
GarbageBinHardware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009c  00800100  0000207e  00002112  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000207e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b7  0080019c  0080019c  000021ae  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000021ae  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000358  00000000  00000000  0000220a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000627c  00000000  00000000  00002562  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001724  00000000  00000000  000087de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000010a4  00000000  00000000  00009f02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000978  00000000  00000000  0000afa8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000017f6  00000000  00000000  0000b920  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000027cb  00000000  00000000  0000d116  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000310  00000000  00000000  0000f8e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
{
  while( *text ) { LCD_SendChar( *text++ ); }
}

void LCD_PrintHex( const int data )
{
       0:	0c 94 df 00 	jmp	0x1be	; 0x1be <__ctors_end>
       4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
       8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
       c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      10:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  // Allocate space for result.
  char st[8] = "";
      14:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      18:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      1c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      20:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
      24:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      28:	0c 94 ac 01 	jmp	0x358	; 0x358 <__vector_10>
      2c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  
  // Convert data to ASCII hex.
  itoa( data, st, 16 );
  
  // Prepend "0x" prefix.
  LCD_PrintMessage( "0x" );
      30:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      34:	0c 94 9b 01 	jmp	0x336	; 0x336 <__vector_13>
  
  // Print the data to LCD.
  LCD_PrintMessage( st );
      38:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      3c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
}
      40:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      44:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      48:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      4c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      50:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      54:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      58:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      5c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      60:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      64:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      68:	63 0b       	sbc	r22, r19
      6a:	74 0b       	sbc	r23, r20
      6c:	7d 0b       	sbc	r23, r29
      6e:	83 0b       	sbc	r24, r19
      70:	8c 0b       	sbc	r24, r28
      72:	ab 0b       	sbc	r26, r27
      74:	b4 0b       	sbc	r27, r20
      76:	bd 0b       	sbc	r27, r29
      78:	c6 0b       	sbc	r28, r22
      7a:	ce 0b       	sbc	r28, r30
      7c:	ce 0b       	sbc	r28, r30
      7e:	ce 0b       	sbc	r28, r30
      80:	ce 0b       	sbc	r28, r30
      82:	ce 0b       	sbc	r28, r30
      84:	ce 0b       	sbc	r28, r30
      86:	ce 0b       	sbc	r28, r30
      88:	ce 0b       	sbc	r28, r30
      8a:	ce 0b       	sbc	r28, r30
      8c:	ce 0b       	sbc	r28, r30
      8e:	ce 0b       	sbc	r28, r30
      90:	ce 0b       	sbc	r28, r30
      92:	ce 0b       	sbc	r28, r30
      94:	ce 0b       	sbc	r28, r30
      96:	ce 0b       	sbc	r28, r30
      98:	ce 0b       	sbc	r28, r30
      9a:	ce 0b       	sbc	r28, r30
      9c:	ce 0b       	sbc	r28, r30
      9e:	ce 0b       	sbc	r28, r30
      a0:	ce 0b       	sbc	r28, r30
      a2:	ce 0b       	sbc	r28, r30
      a4:	ce 0b       	sbc	r28, r30
      a6:	ce 0b       	sbc	r28, r30
      a8:	63 0b       	sbc	r22, r19
      aa:	6b 0b       	sbc	r22, r27
      ac:	74 0b       	sbc	r23, r20
      ae:	7d 0b       	sbc	r23, r29
      b0:	83 0b       	sbc	r24, r19
      b2:	8c 0b       	sbc	r24, r28
      b4:	92 0b       	sbc	r25, r18
      b6:	9a 0b       	sbc	r25, r26
      b8:	a3 0b       	sbc	r26, r19

000000ba <__trampolines_end>:
      ba:	6e 61       	ori	r22, 0x1E	; 30
      bc:	6e 00       	.word	0x006e	; ????

000000be <__c.2159>:
      be:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      ce:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      de:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      ee:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      fe:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     10e:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     11e:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     12e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     13e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     14e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     15e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     16e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     17e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     18e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     19e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1ae:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001bc <__ctors_start>:
     1bc:	96 01       	movw	r18, r12

000001be <__ctors_end>:
     1be:	11 24       	eor	r1, r1
     1c0:	1f be       	out	0x3f, r1	; 63
     1c2:	cf ef       	ldi	r28, 0xFF	; 255
     1c4:	d8 e0       	ldi	r29, 0x08	; 8
     1c6:	de bf       	out	0x3e, r29	; 62
     1c8:	cd bf       	out	0x3d, r28	; 61

000001ca <__do_copy_data>:
     1ca:	11 e0       	ldi	r17, 0x01	; 1
     1cc:	a0 e0       	ldi	r26, 0x00	; 0
     1ce:	b1 e0       	ldi	r27, 0x01	; 1
     1d0:	ee e7       	ldi	r30, 0x7E	; 126
     1d2:	f0 e2       	ldi	r31, 0x20	; 32
     1d4:	02 c0       	rjmp	.+4      	; 0x1da <__do_copy_data+0x10>
     1d6:	05 90       	lpm	r0, Z+
     1d8:	0d 92       	st	X+, r0
     1da:	ac 39       	cpi	r26, 0x9C	; 156
     1dc:	b1 07       	cpc	r27, r17
     1de:	d9 f7       	brne	.-10     	; 0x1d6 <__do_copy_data+0xc>

000001e0 <__do_clear_bss>:
     1e0:	22 e0       	ldi	r18, 0x02	; 2
     1e2:	ac e9       	ldi	r26, 0x9C	; 156
     1e4:	b1 e0       	ldi	r27, 0x01	; 1
     1e6:	01 c0       	rjmp	.+2      	; 0x1ea <.do_clear_bss_start>

000001e8 <.do_clear_bss_loop>:
     1e8:	1d 92       	st	X+, r1

000001ea <.do_clear_bss_start>:
     1ea:	a3 35       	cpi	r26, 0x53	; 83
     1ec:	b2 07       	cpc	r27, r18
     1ee:	e1 f7       	brne	.-8      	; 0x1e8 <.do_clear_bss_loop>

000001f0 <__do_global_ctors>:
     1f0:	11 e0       	ldi	r17, 0x01	; 1
     1f2:	ce eb       	ldi	r28, 0xBE	; 190
     1f4:	d1 e0       	ldi	r29, 0x01	; 1
     1f6:	04 c0       	rjmp	.+8      	; 0x200 <__do_global_ctors+0x10>
     1f8:	22 97       	sbiw	r28, 0x02	; 2
     1fa:	fe 01       	movw	r30, r28
     1fc:	0e 94 be 0c 	call	0x197c	; 0x197c <__tablejump__>
     200:	cc 3b       	cpi	r28, 0xBC	; 188
     202:	d1 07       	cpc	r29, r17
     204:	c9 f7       	brne	.-14     	; 0x1f8 <__do_global_ctors+0x8>
     206:	0e 94 d7 01 	call	0x3ae	; 0x3ae <main>
     20a:	0c 94 3d 10 	jmp	0x207a	; 0x207a <_exit>

0000020e <__bad_interrupt>:
     20e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000212 <_ZN6StringD1Ev>:
class String
{
public:
  String();
  String( const char *cstr );
  virtual ~String() {}
     212:	2a e0       	ldi	r18, 0x0A	; 10
     214:	31 e0       	ldi	r19, 0x01	; 1
     216:	fc 01       	movw	r30, r24
     218:	31 83       	std	Z+1, r19	; 0x01
     21a:	20 83       	st	Z, r18
     21c:	08 95       	ret

0000021e <_ZN6StringD0Ev>:
     21e:	2a e0       	ldi	r18, 0x0A	; 10
     220:	31 e0       	ldi	r19, 0x01	; 1
     222:	fc 01       	movw	r30, r24
     224:	31 83       	std	Z+1, r19	; 0x01
     226:	20 83       	st	Z, r18
  return buf;
}

void operator delete( void *buf )
{
  free( buf );
     228:	0e 94 4d 02 	call	0x49a	; 0x49a <_ZdlPv>
     22c:	08 95       	ret

0000022e <_Z17GPS_GetCoordinatev>:

TinyGPSPlus GPS_tinyGPS;
volatile bool GPS_timeoutFlag = false;

GPSCoordinate GPS_GetCoordinate()
{
     22e:	8f 92       	push	r8
     230:	9f 92       	push	r9
     232:	af 92       	push	r10
     234:	bf 92       	push	r11
     236:	cf 92       	push	r12
     238:	df 92       	push	r13
     23a:	ef 92       	push	r14
     23c:	ff 92       	push	r15
     23e:	0f 93       	push	r16
     240:	1f 93       	push	r17
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	cd b7       	in	r28, 0x3d	; 61
     248:	de b7       	in	r29, 0x3e	; 62
     24a:	cc 5e       	subi	r28, 0xEC	; 236
     24c:	d3 40       	sbci	r29, 0x03	; 3
     24e:	0f b6       	in	r0, 0x3f	; 63
     250:	f8 94       	cli
     252:	de bf       	out	0x3e, r29	; 62
     254:	0f be       	out	0x3f, r0	; 63
     256:	cd bf       	out	0x3d, r28	; 61
     258:	6c 01       	movw	r12, r24
  struct GPSCoordinate gpsCoordinate;
  bool gpsNotUpdated = true;
     25a:	81 e0       	ldi	r24, 0x01	; 1
struct TinyGPSLocation
{
  friend class TinyGPSPlus;
  public:
  bool isValid() const    { return valid; }
  bool isUpdated() const  { return updated; }
     25c:	0e e9       	ldi	r16, 0x9E	; 158
     25e:	11 e0       	ldi	r17, 0x01	; 1
struct TinyGPSDecimal
{
  friend class TinyGPSPlus;
  public:
  bool isValid() const    { return valid; }
  bool isUpdated() const  { return updated; }
     260:	0f 2e       	mov	r0, r31
     262:	f8 ef       	ldi	r31, 0xF8	; 248
     264:	ef 2e       	mov	r14, r31
     266:	f1 e0       	ldi	r31, 0x01	; 1
     268:	ff 2e       	mov	r15, r31
     26a:	f0 2d       	mov	r31, r0
    // and longitude, and a valid flag set to true.
    if( GPS_tinyGPS.location.isUpdated() || GPS_tinyGPS.altitude.isUpdated() )
    {
      gpsCoordinate.m_latitude = ( float )GPS_tinyGPS.location.lat();
      gpsCoordinate.m_longitude = ( float )GPS_tinyGPS.location.lng();
      gpsCoordinate.m_valid = true;
     26c:	aa 24       	eor	r10, r10
     26e:	a3 94       	inc	r10
      gpsNotUpdated = false;
     270:	b1 2c       	mov	r11, r1
{
  struct GPSCoordinate gpsCoordinate;
  bool gpsNotUpdated = true;

  // While GPS has not yet been updated and timeout has not occurred yet...
  while( gpsNotUpdated && !GPS_timeoutFlag )
     272:	25 c0       	rjmp	.+74     	; 0x2be <_Z17GPS_GetCoordinatev+0x90>
    const char *recvbuf = USART_ReceiveString( '\n', 5 ).ToCString();
    unsigned recvbufIdx = 0;

    while( recvbuf[ recvbufIdx ] )
    {
      GPS_tinyGPS.encode( recvbuf[ recvbufIdx++ ] );
     274:	8d e9       	ldi	r24, 0x9D	; 157
     276:	91 e0       	ldi	r25, 0x01	; 1
     278:	0e 94 0f 0c 	call	0x181e	; 0x181e <_ZN11TinyGPSPlus6encodeEc>
  {
    // Encode bytes received from GPS hardware.
    const char *recvbuf = USART_ReceiveString( '\n', 5 ).ToCString();
    unsigned recvbufIdx = 0;

    while( recvbuf[ recvbufIdx ] )
     27c:	f4 01       	movw	r30, r8
     27e:	61 91       	ld	r22, Z+
     280:	4f 01       	movw	r8, r30
     282:	61 11       	cpse	r22, r1
     284:	f7 cf       	rjmp	.-18     	; 0x274 <_Z17GPS_GetCoordinatev+0x46>
      GPS_tinyGPS.encode( recvbuf[ recvbufIdx++ ] );
    }

    // If GPS info is updated, update return structure with updated latitude 
    // and longitude, and a valid flag set to true.
    if( GPS_tinyGPS.location.isUpdated() || GPS_tinyGPS.altitude.isUpdated() )
     286:	f8 01       	movw	r30, r16
     288:	80 81       	ld	r24, Z
     28a:	81 11       	cpse	r24, r1
     28c:	04 c0       	rjmp	.+8      	; 0x296 <_Z17GPS_GetCoordinatev+0x68>
     28e:	f7 01       	movw	r30, r14
     290:	80 81       	ld	r24, Z
     292:	88 23       	and	r24, r24
     294:	b1 f0       	breq	.+44     	; 0x2c2 <_Z17GPS_GetCoordinatev+0x94>
    {
      gpsCoordinate.m_latitude = ( float )GPS_tinyGPS.location.lat();
     296:	8d e9       	ldi	r24, 0x9D	; 157
     298:	91 e0       	ldi	r25, 0x01	; 1
     29a:	0e 94 5e 09 	call	0x12bc	; 0x12bc <_ZN15TinyGPSLocation3latEv>
     29e:	f6 01       	movw	r30, r12
     2a0:	60 83       	st	Z, r22
     2a2:	71 83       	std	Z+1, r23	; 0x01
     2a4:	82 83       	std	Z+2, r24	; 0x02
     2a6:	93 83       	std	Z+3, r25	; 0x03
      gpsCoordinate.m_longitude = ( float )GPS_tinyGPS.location.lng();
     2a8:	8d e9       	ldi	r24, 0x9D	; 157
     2aa:	91 e0       	ldi	r25, 0x01	; 1
     2ac:	0e 94 8a 09 	call	0x1314	; 0x1314 <_ZN15TinyGPSLocation3lngEv>
     2b0:	f6 01       	movw	r30, r12
     2b2:	64 83       	std	Z+4, r22	; 0x04
     2b4:	75 83       	std	Z+5, r23	; 0x05
     2b6:	86 83       	std	Z+6, r24	; 0x06
     2b8:	97 83       	std	Z+7, r25	; 0x07
      gpsCoordinate.m_valid = true;
     2ba:	a0 86       	std	Z+8, r10	; 0x08
      gpsNotUpdated = false;
     2bc:	8b 2d       	mov	r24, r11
{
  struct GPSCoordinate gpsCoordinate;
  bool gpsNotUpdated = true;

  // While GPS has not yet been updated and timeout has not occurred yet...
  while( gpsNotUpdated && !GPS_timeoutFlag )
     2be:	88 23       	and	r24, r24
     2c0:	41 f0       	breq	.+16     	; 0x2d2 <_Z17GPS_GetCoordinatev+0xa4>
     2c2:	80 91 9c 01 	lds	r24, 0x019C
     2c6:	81 11       	cpse	r24, r1
     2c8:	04 c0       	rjmp	.+8      	; 0x2d2 <_Z17GPS_GetCoordinatev+0xa4>
     2ca:	08 c0       	rjmp	.+16     	; 0x2dc <_Z17GPS_GetCoordinatev+0xae>

  // Check if a timeout has occurred. If so, set valid flag in return 
  // structure to false.
  if( GPS_timeoutFlag )
  {
    gpsCoordinate.m_valid = false;
     2cc:	f6 01       	movw	r30, r12
     2ce:	10 86       	std	Z+8, r1	; 0x08
     2d0:	13 c0       	rjmp	.+38     	; 0x2f8 <_Z17GPS_GetCoordinatev+0xca>
    }
  }

  // Check if a timeout has occurred. If so, set valid flag in return 
  // structure to false.
  if( GPS_timeoutFlag )
     2d2:	80 91 9c 01 	lds	r24, 0x019C
     2d6:	81 11       	cpse	r24, r1
     2d8:	f9 cf       	rjmp	.-14     	; 0x2cc <_Z17GPS_GetCoordinatev+0x9e>
     2da:	0e c0       	rjmp	.+28     	; 0x2f8 <_Z17GPS_GetCoordinatev+0xca>

  // While GPS has not yet been updated and timeout has not occurred yet...
  while( gpsNotUpdated && !GPS_timeoutFlag )
  {
    // Encode bytes received from GPS hardware.
    const char *recvbuf = USART_ReceiveString( '\n', 5 ).ToCString();
     2dc:	45 e0       	ldi	r20, 0x05	; 5
     2de:	50 e0       	ldi	r21, 0x00	; 0
     2e0:	6a e0       	ldi	r22, 0x0A	; 10
     2e2:	ce 01       	movw	r24, r28
     2e4:	01 96       	adiw	r24, 0x01	; 1
     2e6:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z19USART_ReceiveStringhj>
    unsigned recvbufIdx = 0;

    while( recvbuf[ recvbufIdx ] )
     2ea:	6b 81       	ldd	r22, Y+3	; 0x03
     2ec:	66 23       	and	r22, r22
     2ee:	59 f2       	breq	.-106    	; 0x286 <_Z17GPS_GetCoordinatev+0x58>
     2f0:	ce 01       	movw	r24, r28
     2f2:	04 96       	adiw	r24, 0x04	; 4
     2f4:	4c 01       	movw	r8, r24
     2f6:	be cf       	rjmp	.-132    	; 0x274 <_Z17GPS_GetCoordinatev+0x46>
  {
    gpsCoordinate.m_valid = false;
  }

  // Reset the GPS timeout flag to false.
  GPS_timeoutFlag = false;
     2f8:	10 92 9c 01 	sts	0x019C, r1

  // Return GPSCoordinate structure.
  return gpsCoordinate;
}
     2fc:	c6 01       	movw	r24, r12
     2fe:	c4 51       	subi	r28, 0x14	; 20
     300:	dc 4f       	sbci	r29, 0xFC	; 252
     302:	0f b6       	in	r0, 0x3f	; 63
     304:	f8 94       	cli
     306:	de bf       	out	0x3e, r29	; 62
     308:	0f be       	out	0x3f, r0	; 63
     30a:	cd bf       	out	0x3d, r28	; 61
     30c:	df 91       	pop	r29
     30e:	cf 91       	pop	r28
     310:	1f 91       	pop	r17
     312:	0f 91       	pop	r16
     314:	ff 90       	pop	r15
     316:	ef 90       	pop	r14
     318:	df 90       	pop	r13
     31a:	cf 90       	pop	r12
     31c:	bf 90       	pop	r11
     31e:	af 90       	pop	r10
     320:	9f 90       	pop	r9
     322:	8f 90       	pop	r8
     324:	08 95       	ret

00000326 <_Z8GPS_Initv>:

void GPS_Init()
{
  // Initialize the USART driver if not already initialized.
  USART_Init();
     326:	0e 94 50 02 	call	0x4a0	; 0x4a0 <_Z10USART_Initv>
     32a:	08 95       	ret

0000032c <_GLOBAL__sub_I_GPS_tinyGPS>:
#include "GPSDriver.h"
#include "String.h"
#include "TinyGPS++.h"
#include "USARTDriver.h"

TinyGPSPlus GPS_tinyGPS;
     32c:	8d e9       	ldi	r24, 0x9D	; 157
     32e:	91 e0       	ldi	r25, 0x01	; 1
     330:	0e 94 9b 07 	call	0xf36	; 0xf36 <_ZN11TinyGPSPlusC1Ev>
     334:	08 95       	ret

00000336 <__vector_13>:
volatile uint16_t HCSR04_measuredTransmitToReceiveTime = 0;
volatile bool HCSR04_timerOverflowFlag = false;
volatile bool HCSR04_waitFlag = false;

ISR( TIMER1_OVF_vect )
{
     336:	1f 92       	push	r1
     338:	0f 92       	push	r0
     33a:	0f b6       	in	r0, 0x3f	; 63
     33c:	0f 92       	push	r0
     33e:	11 24       	eor	r1, r1
     340:	8f 93       	push	r24
  // Indicate that TIMER1 counter has overflowed.
  HCSR04_timerOverflowFlag = true;
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	80 93 4b 02 	sts	0x024B, r24

  // Indicate that the program can stop waiting.
  HCSR04_waitFlag = false;
     348:	10 92 4a 02 	sts	0x024A, r1
}
     34c:	8f 91       	pop	r24
     34e:	0f 90       	pop	r0
     350:	0f be       	out	0x3f, r0	; 63
     352:	0f 90       	pop	r0
     354:	1f 90       	pop	r1
     356:	18 95       	reti

00000358 <__vector_10>:

ISR( TIMER1_CAPT_vect )
{
     358:	1f 92       	push	r1
     35a:	0f 92       	push	r0
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	0f 92       	push	r0
     360:	11 24       	eor	r1, r1
     362:	8f 93       	push	r24
     364:	9f 93       	push	r25
     366:	ef 93       	push	r30
     368:	ff 93       	push	r31
  // If input capture was previously on a rising edge trigger...
  if( ( TCCR1B & ( 1 << ICES1 ) ) == ( 1 << ICES1 ) )
     36a:	80 91 81 00 	lds	r24, 0x0081
     36e:	86 ff       	sbrs	r24, 6
     370:	0b c0       	rjmp	.+22     	; 0x388 <__vector_10+0x30>
  {
    // Reset input capture to a falling edge trigger.
    TCCR1B ^= ( 1 << ICES1 );
     372:	e1 e8       	ldi	r30, 0x81	; 129
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	90 81       	ld	r25, Z
     378:	80 e4       	ldi	r24, 0x40	; 64
     37a:	89 27       	eor	r24, r25
     37c:	80 83       	st	Z, r24

    // Restart TIMER1 counter counting from 0.
    TCNT1 = 0;
     37e:	10 92 85 00 	sts	0x0085, r1
     382:	10 92 84 00 	sts	0x0084, r1
     386:	0a c0       	rjmp	.+20     	; 0x39c <__vector_10+0x44>
  }
  else
  {
    // Set the transmit to receive time.
    HCSR04_measuredTransmitToReceiveTime = TCNT1;
     388:	80 91 84 00 	lds	r24, 0x0084
     38c:	90 91 85 00 	lds	r25, 0x0085
     390:	90 93 4d 02 	sts	0x024D, r25
     394:	80 93 4c 02 	sts	0x024C, r24

    // Indicate that the program can stop waiting.
    HCSR04_waitFlag = false;
     398:	10 92 4a 02 	sts	0x024A, r1
  }
}
     39c:	ff 91       	pop	r31
     39e:	ef 91       	pop	r30
     3a0:	9f 91       	pop	r25
     3a2:	8f 91       	pop	r24
     3a4:	0f 90       	pop	r0
     3a6:	0f be       	out	0x3f, r0	; 63
     3a8:	0f 90       	pop	r0
     3aa:	1f 90       	pop	r1
     3ac:	18 95       	reti

000003ae <main>:
  }
  return 0;
}

int main()
{
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	cd b7       	in	r28, 0x3d	; 61
     3b4:	de b7       	in	r29, 0x3e	; 62
     3b6:	cd 56       	subi	r28, 0x6D	; 109
     3b8:	d1 09       	sbc	r29, r1
     3ba:	0f b6       	in	r0, 0x3f	; 63
     3bc:	f8 94       	cli
     3be:	de bf       	out	0x3e, r29	; 62
     3c0:	0f be       	out	0x3f, r0	; 63
     3c2:	cd bf       	out	0x3d, r28	; 61
  GPS_Init();
     3c4:	0e 94 93 01 	call	0x326	; 0x326 <_Z8GPS_Initv>

  while( 1 )
  {
    struct GPSCoordinate gpsCoordinate = GPS_GetCoordinate();
    char buf[100];
    sprintf( buf, "LAT: %f LNG: %f\n", gpsCoordinate.m_latitude, gpsCoordinate.m_longitude );
     3c8:	0f 2e       	mov	r0, r31
     3ca:	fe e0       	ldi	r31, 0x0E	; 14
     3cc:	ef 2e       	mov	r14, r31
     3ce:	f1 e0       	ldi	r31, 0x01	; 1
     3d0:	ff 2e       	mov	r15, r31
     3d2:	f0 2d       	mov	r31, r0
     3d4:	8e 01       	movw	r16, r28
     3d6:	0f 5f       	subi	r16, 0xFF	; 255
     3d8:	1f 4f       	sbci	r17, 0xFF	; 255
{
  GPS_Init();

  while( 1 )
  {
    struct GPSCoordinate gpsCoordinate = GPS_GetCoordinate();
     3da:	ce 01       	movw	r24, r28
     3dc:	8b 59       	subi	r24, 0x9B	; 155
     3de:	9f 4f       	sbci	r25, 0xFF	; 255
     3e0:	0e 94 17 01 	call	0x22e	; 0x22e <_Z17GPS_GetCoordinatev>
    char buf[100];
    sprintf( buf, "LAT: %f LNG: %f\n", gpsCoordinate.m_latitude, gpsCoordinate.m_longitude );
     3e4:	ad 96       	adiw	r28, 0x2d	; 45
     3e6:	8f ad       	ldd	r24, Y+63	; 0x3f
     3e8:	ad 97       	sbiw	r28, 0x2d	; 45
     3ea:	8f 93       	push	r24
     3ec:	ac 96       	adiw	r28, 0x2c	; 44
     3ee:	8f ad       	ldd	r24, Y+63	; 0x3f
     3f0:	ac 97       	sbiw	r28, 0x2c	; 44
     3f2:	8f 93       	push	r24
     3f4:	ab 96       	adiw	r28, 0x2b	; 43
     3f6:	8f ad       	ldd	r24, Y+63	; 0x3f
     3f8:	ab 97       	sbiw	r28, 0x2b	; 43
     3fa:	8f 93       	push	r24
     3fc:	aa 96       	adiw	r28, 0x2a	; 42
     3fe:	8f ad       	ldd	r24, Y+63	; 0x3f
     400:	aa 97       	sbiw	r28, 0x2a	; 42
     402:	8f 93       	push	r24
     404:	a9 96       	adiw	r28, 0x29	; 41
     406:	8f ad       	ldd	r24, Y+63	; 0x3f
     408:	a9 97       	sbiw	r28, 0x29	; 41
     40a:	8f 93       	push	r24
     40c:	a8 96       	adiw	r28, 0x28	; 40
     40e:	8f ad       	ldd	r24, Y+63	; 0x3f
     410:	a8 97       	sbiw	r28, 0x28	; 40
     412:	8f 93       	push	r24
     414:	a7 96       	adiw	r28, 0x27	; 39
     416:	8f ad       	ldd	r24, Y+63	; 0x3f
     418:	a7 97       	sbiw	r28, 0x27	; 39
     41a:	8f 93       	push	r24
     41c:	a6 96       	adiw	r28, 0x26	; 38
     41e:	8f ad       	ldd	r24, Y+63	; 0x3f
     420:	a6 97       	sbiw	r28, 0x26	; 38
     422:	8f 93       	push	r24
     424:	ff 92       	push	r15
     426:	ef 92       	push	r14
     428:	1f 93       	push	r17
     42a:	0f 93       	push	r16
     42c:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <sprintf>
    USART_SendString( buf );
     430:	c8 01       	movw	r24, r16
     432:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z16USART_SendStringPKc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     436:	2f ef       	ldi	r18, 0xFF	; 255
     438:	83 ed       	ldi	r24, 0xD3	; 211
     43a:	90 e3       	ldi	r25, 0x30	; 48
     43c:	21 50       	subi	r18, 0x01	; 1
     43e:	80 40       	sbci	r24, 0x00	; 0
     440:	90 40       	sbci	r25, 0x00	; 0
     442:	e1 f7       	brne	.-8      	; 0x43c <main+0x8e>
     444:	00 c0       	rjmp	.+0      	; 0x446 <main+0x98>
     446:	00 00       	nop
     448:	0f b6       	in	r0, 0x3f	; 63
     44a:	f8 94       	cli
     44c:	de bf       	out	0x3e, r29	; 62
     44e:	0f be       	out	0x3f, r0	; 63
     450:	cd bf       	out	0x3d, r28	; 61
     452:	c3 cf       	rjmp	.-122    	; 0x3da <main+0x2c>

00000454 <_ZN6StringC1Ev>:
 *  Author: Justin
 */ 

#include "String.h"

String::String() : m_idx( 0 )
     454:	2a e0       	ldi	r18, 0x0A	; 10
     456:	31 e0       	ldi	r19, 0x01	; 1
     458:	fc 01       	movw	r30, r24
     45a:	31 83       	std	Z+1, r19	; 0x01
     45c:	20 83       	st	Z, r18
     45e:	e6 51       	subi	r30, 0x16	; 22
     460:	fc 4f       	sbci	r31, 0xFC	; 252
     462:	11 82       	std	Z+1, r1	; 0x01
     464:	10 82       	st	Z, r1
{
  m_buf[ m_idx ] = '\0';
     466:	fc 01       	movw	r30, r24
     468:	12 82       	std	Z+2, r1	; 0x02
     46a:	08 95       	ret

0000046c <_ZN6StringpLEh>:
  m_buf[ m_idx ] = '\0';
}

void String::operator+=( const unsigned char charArg )
{
  if( m_idx < MAX_BUFFER_SIZE - 1 )
     46c:	fc 01       	movw	r30, r24
     46e:	e6 51       	subi	r30, 0x16	; 22
     470:	fc 4f       	sbci	r31, 0xFC	; 252
     472:	20 81       	ld	r18, Z
     474:	31 81       	ldd	r19, Z+1	; 0x01
     476:	27 3e       	cpi	r18, 0xE7	; 231
     478:	43 e0       	ldi	r20, 0x03	; 3
     47a:	34 07       	cpc	r19, r20
     47c:	68 f4       	brcc	.+26     	; 0x498 <_ZN6StringpLEh+0x2c>
  {
    m_buf[m_idx++] = charArg;
     47e:	a9 01       	movw	r20, r18
     480:	4f 5f       	subi	r20, 0xFF	; 255
     482:	5f 4f       	sbci	r21, 0xFF	; 255
     484:	51 83       	std	Z+1, r21	; 0x01
     486:	40 83       	st	Z, r20
     488:	fc 01       	movw	r30, r24
     48a:	e2 0f       	add	r30, r18
     48c:	f3 1f       	adc	r31, r19
     48e:	62 83       	std	Z+2, r22	; 0x02
    m_buf[m_idx] = '\0';
     490:	fc 01       	movw	r30, r24
     492:	e4 0f       	add	r30, r20
     494:	f5 1f       	adc	r31, r21
     496:	12 82       	std	Z+2, r1	; 0x02
     498:	08 95       	ret

0000049a <_ZdlPv>:
  return buf;
}

void operator delete( void *buf )
{
  free( buf );
     49a:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <free>
     49e:	08 95       	ret

000004a0 <_Z10USART_Initv>:

volatile bool USART_initializeFlag = false;

void USART_Init( void )
{
  if( !USART_initializeFlag )
     4a0:	80 91 4e 02 	lds	r24, 0x024E
     4a4:	81 11       	cpse	r24, r1
     4a6:	12 c0       	rjmp	.+36     	; 0x4cc <_Z10USART_Initv+0x2c>
  {
    UBRR0H = ( BAUD_PRESCALER >> 8 );
     4a8:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = ( BAUD_PRESCALER );
     4ac:	87 e6       	ldi	r24, 0x67	; 103
     4ae:	80 93 c4 00 	sts	0x00C4, r24
    UCSR0B |= ( 1 << RXEN0 ) | ( 1 << TXEN0 );
     4b2:	e1 ec       	ldi	r30, 0xC1	; 193
     4b4:	f0 e0       	ldi	r31, 0x00	; 0
     4b6:	80 81       	ld	r24, Z
     4b8:	88 61       	ori	r24, 0x18	; 24
     4ba:	80 83       	st	Z, r24
    UCSR0C |= ( 1 << UCSZ00 ) | ( 1 << UCSZ01 );
     4bc:	e2 ec       	ldi	r30, 0xC2	; 194
     4be:	f0 e0       	ldi	r31, 0x00	; 0
     4c0:	80 81       	ld	r24, Z
     4c2:	86 60       	ori	r24, 0x06	; 6
     4c4:	80 83       	st	Z, r24
    USART_initializeFlag = true;
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	80 93 4e 02 	sts	0x024E, r24
     4cc:	08 95       	ret

000004ce <_Z19USART_ReceiveStringhj>:
  while( !( UCSR0A & ( 1 << RXC0 ) ) );
  return UDR0;
}

String USART_ReceiveString( unsigned char terminator, unsigned terminationCount )
{
     4ce:	6f 92       	push	r6
     4d0:	7f 92       	push	r7
     4d2:	8f 92       	push	r8
     4d4:	9f 92       	push	r9
     4d6:	af 92       	push	r10
     4d8:	bf 92       	push	r11
     4da:	cf 92       	push	r12
     4dc:	df 92       	push	r13
     4de:	ef 92       	push	r14
     4e0:	ff 92       	push	r15
     4e2:	0f 93       	push	r16
     4e4:	1f 93       	push	r17
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
     4ea:	4c 01       	movw	r8, r24
     4ec:	66 2e       	mov	r6, r22
     4ee:	5a 01       	movw	r10, r20
  String receivedString;
     4f0:	0e 94 2a 02 	call	0x454	; 0x454 <_ZN6StringC1Ev>
  unsigned char receivedByte;
  unsigned newlineCount = 0;
     4f4:	00 e0       	ldi	r16, 0x00	; 0
     4f6:	10 e0       	ldi	r17, 0x00	; 0
  
  do
  {
    while( !( UCSR0A & ( 1 << RXC0 ) ) );
     4f8:	c0 ec       	ldi	r28, 0xC0	; 192
     4fa:	d0 e0       	ldi	r29, 0x00	; 0
    receivedByte = UDR0;
     4fc:	0f 2e       	mov	r0, r31
     4fe:	f6 ec       	ldi	r31, 0xC6	; 198
     500:	cf 2e       	mov	r12, r31
     502:	d1 2c       	mov	r13, r1
     504:	f0 2d       	mov	r31, r0

  const bool BufferIsFull() const { return m_idx == MAX_BUFFER_SIZE; }
     506:	74 01       	movw	r14, r8
     508:	26 e1       	ldi	r18, 0x16	; 22
     50a:	e2 1a       	sub	r14, r18
     50c:	2c ef       	ldi	r18, 0xFC	; 252
     50e:	f2 0a       	sbc	r15, r18
  unsigned char receivedByte;
  unsigned newlineCount = 0;
  
  do
  {
    while( !( UCSR0A & ( 1 << RXC0 ) ) );
     510:	88 81       	ld	r24, Y
     512:	88 23       	and	r24, r24
     514:	ec f7       	brge	.-6      	; 0x510 <_Z19USART_ReceiveStringhj+0x42>
    receivedByte = UDR0;
     516:	f6 01       	movw	r30, r12
     518:	70 80       	ld	r7, Z
    receivedString += receivedByte;
     51a:	67 2d       	mov	r22, r7
     51c:	c4 01       	movw	r24, r8
     51e:	0e 94 36 02 	call	0x46c	; 0x46c <_ZN6StringpLEh>
    
    if( receivedByte == terminator )
     522:	76 10       	cpse	r7, r6
     524:	02 c0       	rjmp	.+4      	; 0x52a <_Z19USART_ReceiveStringhj+0x5c>
    {
      newlineCount++;
     526:	0f 5f       	subi	r16, 0xFF	; 255
     528:	1f 4f       	sbci	r17, 0xFF	; 255
    }
    
  } while( !receivedString.BufferIsFull() && newlineCount < terminationCount );
     52a:	f7 01       	movw	r30, r14
     52c:	80 81       	ld	r24, Z
     52e:	91 81       	ldd	r25, Z+1	; 0x01
     530:	88 3e       	cpi	r24, 0xE8	; 232
     532:	93 40       	sbci	r25, 0x03	; 3
     534:	19 f0       	breq	.+6      	; 0x53c <_Z19USART_ReceiveStringhj+0x6e>
     536:	0a 15       	cp	r16, r10
     538:	1b 05       	cpc	r17, r11
     53a:	50 f3       	brcs	.-44     	; 0x510 <_Z19USART_ReceiveStringhj+0x42>

  return receivedString;
}
     53c:	c4 01       	movw	r24, r8
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	1f 91       	pop	r17
     544:	0f 91       	pop	r16
     546:	ff 90       	pop	r15
     548:	ef 90       	pop	r14
     54a:	df 90       	pop	r13
     54c:	cf 90       	pop	r12
     54e:	bf 90       	pop	r11
     550:	af 90       	pop	r10
     552:	9f 90       	pop	r9
     554:	8f 90       	pop	r8
     556:	7f 90       	pop	r7
     558:	6f 90       	pop	r6
     55a:	08 95       	ret

0000055c <_Z14USART_SendByteh>:

void USART_SendByte( unsigned char data )
{
  while( ! ( UCSR0A & ( 1 << UDRE0 ) ) );
     55c:	e0 ec       	ldi	r30, 0xC0	; 192
     55e:	f0 e0       	ldi	r31, 0x00	; 0
     560:	90 81       	ld	r25, Z
     562:	95 ff       	sbrs	r25, 5
     564:	fd cf       	rjmp	.-6      	; 0x560 <_Z14USART_SendByteh+0x4>
  UDR0 = data;
     566:	80 93 c6 00 	sts	0x00C6, r24
     56a:	08 95       	ret

0000056c <_Z16USART_SendStringPKc>:
}

void USART_SendString( const char* stringPtr )
{
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	ec 01       	movw	r28, r24
  while( *stringPtr != 0x00 )
     572:	88 81       	ld	r24, Y
     574:	88 23       	and	r24, r24
     576:	31 f0       	breq	.+12     	; 0x584 <_Z16USART_SendStringPKc+0x18>
     578:	21 96       	adiw	r28, 0x01	; 1
  {
    USART_SendByte( *stringPtr++ );
     57a:	0e 94 ae 02 	call	0x55c	; 0x55c <_Z14USART_SendByteh>
  UDR0 = data;
}

void USART_SendString( const char* stringPtr )
{
  while( *stringPtr != 0x00 )
     57e:	89 91       	ld	r24, Y+
     580:	81 11       	cpse	r24, r1
     582:	fb cf       	rjmp	.-10     	; 0x57a <_Z16USART_SendStringPKc+0xe>
  {
    USART_SendByte( *stringPtr++ );
  }
     584:	df 91       	pop	r29
     586:	cf 91       	pop	r28
     588:	08 95       	ret

0000058a <__subsf3>:
     58a:	50 58       	subi	r21, 0x80	; 128

0000058c <__addsf3>:
     58c:	bb 27       	eor	r27, r27
     58e:	aa 27       	eor	r26, r26
     590:	0e d0       	rcall	.+28     	; 0x5ae <__addsf3x>
     592:	1c c1       	rjmp	.+568    	; 0x7cc <__fp_round>
     594:	0d d1       	rcall	.+538    	; 0x7b0 <__fp_pscA>
     596:	30 f0       	brcs	.+12     	; 0x5a4 <__addsf3+0x18>
     598:	12 d1       	rcall	.+548    	; 0x7be <__fp_pscB>
     59a:	20 f0       	brcs	.+8      	; 0x5a4 <__addsf3+0x18>
     59c:	31 f4       	brne	.+12     	; 0x5aa <__addsf3+0x1e>
     59e:	9f 3f       	cpi	r25, 0xFF	; 255
     5a0:	11 f4       	brne	.+4      	; 0x5a6 <__addsf3+0x1a>
     5a2:	1e f4       	brtc	.+6      	; 0x5aa <__addsf3+0x1e>
     5a4:	02 c1       	rjmp	.+516    	; 0x7aa <__fp_nan>
     5a6:	0e f4       	brtc	.+2      	; 0x5aa <__addsf3+0x1e>
     5a8:	e0 95       	com	r30
     5aa:	e7 fb       	bst	r30, 7
     5ac:	f8 c0       	rjmp	.+496    	; 0x79e <__fp_inf>

000005ae <__addsf3x>:
     5ae:	e9 2f       	mov	r30, r25
     5b0:	1e d1       	rcall	.+572    	; 0x7ee <__fp_split3>
     5b2:	80 f3       	brcs	.-32     	; 0x594 <__addsf3+0x8>
     5b4:	ba 17       	cp	r27, r26
     5b6:	62 07       	cpc	r22, r18
     5b8:	73 07       	cpc	r23, r19
     5ba:	84 07       	cpc	r24, r20
     5bc:	95 07       	cpc	r25, r21
     5be:	18 f0       	brcs	.+6      	; 0x5c6 <__addsf3x+0x18>
     5c0:	71 f4       	brne	.+28     	; 0x5de <__addsf3x+0x30>
     5c2:	9e f5       	brtc	.+102    	; 0x62a <__addsf3x+0x7c>
     5c4:	36 c1       	rjmp	.+620    	; 0x832 <__fp_zero>
     5c6:	0e f4       	brtc	.+2      	; 0x5ca <__addsf3x+0x1c>
     5c8:	e0 95       	com	r30
     5ca:	0b 2e       	mov	r0, r27
     5cc:	ba 2f       	mov	r27, r26
     5ce:	a0 2d       	mov	r26, r0
     5d0:	0b 01       	movw	r0, r22
     5d2:	b9 01       	movw	r22, r18
     5d4:	90 01       	movw	r18, r0
     5d6:	0c 01       	movw	r0, r24
     5d8:	ca 01       	movw	r24, r20
     5da:	a0 01       	movw	r20, r0
     5dc:	11 24       	eor	r1, r1
     5de:	ff 27       	eor	r31, r31
     5e0:	59 1b       	sub	r21, r25
     5e2:	99 f0       	breq	.+38     	; 0x60a <__addsf3x+0x5c>
     5e4:	59 3f       	cpi	r21, 0xF9	; 249
     5e6:	50 f4       	brcc	.+20     	; 0x5fc <__addsf3x+0x4e>
     5e8:	50 3e       	cpi	r21, 0xE0	; 224
     5ea:	68 f1       	brcs	.+90     	; 0x646 <__addsf3x+0x98>
     5ec:	1a 16       	cp	r1, r26
     5ee:	f0 40       	sbci	r31, 0x00	; 0
     5f0:	a2 2f       	mov	r26, r18
     5f2:	23 2f       	mov	r18, r19
     5f4:	34 2f       	mov	r19, r20
     5f6:	44 27       	eor	r20, r20
     5f8:	58 5f       	subi	r21, 0xF8	; 248
     5fa:	f3 cf       	rjmp	.-26     	; 0x5e2 <__addsf3x+0x34>
     5fc:	46 95       	lsr	r20
     5fe:	37 95       	ror	r19
     600:	27 95       	ror	r18
     602:	a7 95       	ror	r26
     604:	f0 40       	sbci	r31, 0x00	; 0
     606:	53 95       	inc	r21
     608:	c9 f7       	brne	.-14     	; 0x5fc <__addsf3x+0x4e>
     60a:	7e f4       	brtc	.+30     	; 0x62a <__addsf3x+0x7c>
     60c:	1f 16       	cp	r1, r31
     60e:	ba 0b       	sbc	r27, r26
     610:	62 0b       	sbc	r22, r18
     612:	73 0b       	sbc	r23, r19
     614:	84 0b       	sbc	r24, r20
     616:	ba f0       	brmi	.+46     	; 0x646 <__addsf3x+0x98>
     618:	91 50       	subi	r25, 0x01	; 1
     61a:	a1 f0       	breq	.+40     	; 0x644 <__addsf3x+0x96>
     61c:	ff 0f       	add	r31, r31
     61e:	bb 1f       	adc	r27, r27
     620:	66 1f       	adc	r22, r22
     622:	77 1f       	adc	r23, r23
     624:	88 1f       	adc	r24, r24
     626:	c2 f7       	brpl	.-16     	; 0x618 <__addsf3x+0x6a>
     628:	0e c0       	rjmp	.+28     	; 0x646 <__addsf3x+0x98>
     62a:	ba 0f       	add	r27, r26
     62c:	62 1f       	adc	r22, r18
     62e:	73 1f       	adc	r23, r19
     630:	84 1f       	adc	r24, r20
     632:	48 f4       	brcc	.+18     	; 0x646 <__addsf3x+0x98>
     634:	87 95       	ror	r24
     636:	77 95       	ror	r23
     638:	67 95       	ror	r22
     63a:	b7 95       	ror	r27
     63c:	f7 95       	ror	r31
     63e:	9e 3f       	cpi	r25, 0xFE	; 254
     640:	08 f0       	brcs	.+2      	; 0x644 <__addsf3x+0x96>
     642:	b3 cf       	rjmp	.-154    	; 0x5aa <__addsf3+0x1e>
     644:	93 95       	inc	r25
     646:	88 0f       	add	r24, r24
     648:	08 f0       	brcs	.+2      	; 0x64c <__addsf3x+0x9e>
     64a:	99 27       	eor	r25, r25
     64c:	ee 0f       	add	r30, r30
     64e:	97 95       	ror	r25
     650:	87 95       	ror	r24
     652:	08 95       	ret

00000654 <__divsf3>:
     654:	0c d0       	rcall	.+24     	; 0x66e <__divsf3x>
     656:	ba c0       	rjmp	.+372    	; 0x7cc <__fp_round>
     658:	b2 d0       	rcall	.+356    	; 0x7be <__fp_pscB>
     65a:	40 f0       	brcs	.+16     	; 0x66c <__divsf3+0x18>
     65c:	a9 d0       	rcall	.+338    	; 0x7b0 <__fp_pscA>
     65e:	30 f0       	brcs	.+12     	; 0x66c <__divsf3+0x18>
     660:	21 f4       	brne	.+8      	; 0x66a <__divsf3+0x16>
     662:	5f 3f       	cpi	r21, 0xFF	; 255
     664:	19 f0       	breq	.+6      	; 0x66c <__divsf3+0x18>
     666:	9b c0       	rjmp	.+310    	; 0x79e <__fp_inf>
     668:	51 11       	cpse	r21, r1
     66a:	e4 c0       	rjmp	.+456    	; 0x834 <__fp_szero>
     66c:	9e c0       	rjmp	.+316    	; 0x7aa <__fp_nan>

0000066e <__divsf3x>:
     66e:	bf d0       	rcall	.+382    	; 0x7ee <__fp_split3>
     670:	98 f3       	brcs	.-26     	; 0x658 <__divsf3+0x4>

00000672 <__divsf3_pse>:
     672:	99 23       	and	r25, r25
     674:	c9 f3       	breq	.-14     	; 0x668 <__divsf3+0x14>
     676:	55 23       	and	r21, r21
     678:	b1 f3       	breq	.-20     	; 0x666 <__divsf3+0x12>
     67a:	95 1b       	sub	r25, r21
     67c:	55 0b       	sbc	r21, r21
     67e:	bb 27       	eor	r27, r27
     680:	aa 27       	eor	r26, r26
     682:	62 17       	cp	r22, r18
     684:	73 07       	cpc	r23, r19
     686:	84 07       	cpc	r24, r20
     688:	38 f0       	brcs	.+14     	; 0x698 <__divsf3_pse+0x26>
     68a:	9f 5f       	subi	r25, 0xFF	; 255
     68c:	5f 4f       	sbci	r21, 0xFF	; 255
     68e:	22 0f       	add	r18, r18
     690:	33 1f       	adc	r19, r19
     692:	44 1f       	adc	r20, r20
     694:	aa 1f       	adc	r26, r26
     696:	a9 f3       	breq	.-22     	; 0x682 <__divsf3_pse+0x10>
     698:	33 d0       	rcall	.+102    	; 0x700 <__divsf3_pse+0x8e>
     69a:	0e 2e       	mov	r0, r30
     69c:	3a f0       	brmi	.+14     	; 0x6ac <__divsf3_pse+0x3a>
     69e:	e0 e8       	ldi	r30, 0x80	; 128
     6a0:	30 d0       	rcall	.+96     	; 0x702 <__divsf3_pse+0x90>
     6a2:	91 50       	subi	r25, 0x01	; 1
     6a4:	50 40       	sbci	r21, 0x00	; 0
     6a6:	e6 95       	lsr	r30
     6a8:	00 1c       	adc	r0, r0
     6aa:	ca f7       	brpl	.-14     	; 0x69e <__divsf3_pse+0x2c>
     6ac:	29 d0       	rcall	.+82     	; 0x700 <__divsf3_pse+0x8e>
     6ae:	fe 2f       	mov	r31, r30
     6b0:	27 d0       	rcall	.+78     	; 0x700 <__divsf3_pse+0x8e>
     6b2:	66 0f       	add	r22, r22
     6b4:	77 1f       	adc	r23, r23
     6b6:	88 1f       	adc	r24, r24
     6b8:	bb 1f       	adc	r27, r27
     6ba:	26 17       	cp	r18, r22
     6bc:	37 07       	cpc	r19, r23
     6be:	48 07       	cpc	r20, r24
     6c0:	ab 07       	cpc	r26, r27
     6c2:	b0 e8       	ldi	r27, 0x80	; 128
     6c4:	09 f0       	breq	.+2      	; 0x6c8 <__divsf3_pse+0x56>
     6c6:	bb 0b       	sbc	r27, r27
     6c8:	80 2d       	mov	r24, r0
     6ca:	bf 01       	movw	r22, r30
     6cc:	ff 27       	eor	r31, r31
     6ce:	93 58       	subi	r25, 0x83	; 131
     6d0:	5f 4f       	sbci	r21, 0xFF	; 255
     6d2:	2a f0       	brmi	.+10     	; 0x6de <__divsf3_pse+0x6c>
     6d4:	9e 3f       	cpi	r25, 0xFE	; 254
     6d6:	51 05       	cpc	r21, r1
     6d8:	68 f0       	brcs	.+26     	; 0x6f4 <__divsf3_pse+0x82>
     6da:	61 c0       	rjmp	.+194    	; 0x79e <__fp_inf>
     6dc:	ab c0       	rjmp	.+342    	; 0x834 <__fp_szero>
     6de:	5f 3f       	cpi	r21, 0xFF	; 255
     6e0:	ec f3       	brlt	.-6      	; 0x6dc <__divsf3_pse+0x6a>
     6e2:	98 3e       	cpi	r25, 0xE8	; 232
     6e4:	dc f3       	brlt	.-10     	; 0x6dc <__divsf3_pse+0x6a>
     6e6:	86 95       	lsr	r24
     6e8:	77 95       	ror	r23
     6ea:	67 95       	ror	r22
     6ec:	b7 95       	ror	r27
     6ee:	f7 95       	ror	r31
     6f0:	9f 5f       	subi	r25, 0xFF	; 255
     6f2:	c9 f7       	brne	.-14     	; 0x6e6 <__divsf3_pse+0x74>
     6f4:	88 0f       	add	r24, r24
     6f6:	91 1d       	adc	r25, r1
     6f8:	96 95       	lsr	r25
     6fa:	87 95       	ror	r24
     6fc:	97 f9       	bld	r25, 7
     6fe:	08 95       	ret
     700:	e1 e0       	ldi	r30, 0x01	; 1
     702:	66 0f       	add	r22, r22
     704:	77 1f       	adc	r23, r23
     706:	88 1f       	adc	r24, r24
     708:	bb 1f       	adc	r27, r27
     70a:	62 17       	cp	r22, r18
     70c:	73 07       	cpc	r23, r19
     70e:	84 07       	cpc	r24, r20
     710:	ba 07       	cpc	r27, r26
     712:	20 f0       	brcs	.+8      	; 0x71c <__divsf3_pse+0xaa>
     714:	62 1b       	sub	r22, r18
     716:	73 0b       	sbc	r23, r19
     718:	84 0b       	sbc	r24, r20
     71a:	ba 0b       	sbc	r27, r26
     71c:	ee 1f       	adc	r30, r30
     71e:	88 f7       	brcc	.-30     	; 0x702 <__divsf3_pse+0x90>
     720:	e0 95       	com	r30
     722:	08 95       	ret

00000724 <__floatunsisf>:
     724:	e8 94       	clt
     726:	09 c0       	rjmp	.+18     	; 0x73a <__floatsisf+0x12>

00000728 <__floatsisf>:
     728:	97 fb       	bst	r25, 7
     72a:	3e f4       	brtc	.+14     	; 0x73a <__floatsisf+0x12>
     72c:	90 95       	com	r25
     72e:	80 95       	com	r24
     730:	70 95       	com	r23
     732:	61 95       	neg	r22
     734:	7f 4f       	sbci	r23, 0xFF	; 255
     736:	8f 4f       	sbci	r24, 0xFF	; 255
     738:	9f 4f       	sbci	r25, 0xFF	; 255
     73a:	99 23       	and	r25, r25
     73c:	a9 f0       	breq	.+42     	; 0x768 <__floatsisf+0x40>
     73e:	f9 2f       	mov	r31, r25
     740:	96 e9       	ldi	r25, 0x96	; 150
     742:	bb 27       	eor	r27, r27
     744:	93 95       	inc	r25
     746:	f6 95       	lsr	r31
     748:	87 95       	ror	r24
     74a:	77 95       	ror	r23
     74c:	67 95       	ror	r22
     74e:	b7 95       	ror	r27
     750:	f1 11       	cpse	r31, r1
     752:	f8 cf       	rjmp	.-16     	; 0x744 <__floatsisf+0x1c>
     754:	fa f4       	brpl	.+62     	; 0x794 <__floatsisf+0x6c>
     756:	bb 0f       	add	r27, r27
     758:	11 f4       	brne	.+4      	; 0x75e <__floatsisf+0x36>
     75a:	60 ff       	sbrs	r22, 0
     75c:	1b c0       	rjmp	.+54     	; 0x794 <__floatsisf+0x6c>
     75e:	6f 5f       	subi	r22, 0xFF	; 255
     760:	7f 4f       	sbci	r23, 0xFF	; 255
     762:	8f 4f       	sbci	r24, 0xFF	; 255
     764:	9f 4f       	sbci	r25, 0xFF	; 255
     766:	16 c0       	rjmp	.+44     	; 0x794 <__floatsisf+0x6c>
     768:	88 23       	and	r24, r24
     76a:	11 f0       	breq	.+4      	; 0x770 <__floatsisf+0x48>
     76c:	96 e9       	ldi	r25, 0x96	; 150
     76e:	11 c0       	rjmp	.+34     	; 0x792 <__floatsisf+0x6a>
     770:	77 23       	and	r23, r23
     772:	21 f0       	breq	.+8      	; 0x77c <__floatsisf+0x54>
     774:	9e e8       	ldi	r25, 0x8E	; 142
     776:	87 2f       	mov	r24, r23
     778:	76 2f       	mov	r23, r22
     77a:	05 c0       	rjmp	.+10     	; 0x786 <__floatsisf+0x5e>
     77c:	66 23       	and	r22, r22
     77e:	71 f0       	breq	.+28     	; 0x79c <__floatsisf+0x74>
     780:	96 e8       	ldi	r25, 0x86	; 134
     782:	86 2f       	mov	r24, r22
     784:	70 e0       	ldi	r23, 0x00	; 0
     786:	60 e0       	ldi	r22, 0x00	; 0
     788:	2a f0       	brmi	.+10     	; 0x794 <__floatsisf+0x6c>
     78a:	9a 95       	dec	r25
     78c:	66 0f       	add	r22, r22
     78e:	77 1f       	adc	r23, r23
     790:	88 1f       	adc	r24, r24
     792:	da f7       	brpl	.-10     	; 0x78a <__floatsisf+0x62>
     794:	88 0f       	add	r24, r24
     796:	96 95       	lsr	r25
     798:	87 95       	ror	r24
     79a:	97 f9       	bld	r25, 7
     79c:	08 95       	ret

0000079e <__fp_inf>:
     79e:	97 f9       	bld	r25, 7
     7a0:	9f 67       	ori	r25, 0x7F	; 127
     7a2:	80 e8       	ldi	r24, 0x80	; 128
     7a4:	70 e0       	ldi	r23, 0x00	; 0
     7a6:	60 e0       	ldi	r22, 0x00	; 0
     7a8:	08 95       	ret

000007aa <__fp_nan>:
     7aa:	9f ef       	ldi	r25, 0xFF	; 255
     7ac:	80 ec       	ldi	r24, 0xC0	; 192
     7ae:	08 95       	ret

000007b0 <__fp_pscA>:
     7b0:	00 24       	eor	r0, r0
     7b2:	0a 94       	dec	r0
     7b4:	16 16       	cp	r1, r22
     7b6:	17 06       	cpc	r1, r23
     7b8:	18 06       	cpc	r1, r24
     7ba:	09 06       	cpc	r0, r25
     7bc:	08 95       	ret

000007be <__fp_pscB>:
     7be:	00 24       	eor	r0, r0
     7c0:	0a 94       	dec	r0
     7c2:	12 16       	cp	r1, r18
     7c4:	13 06       	cpc	r1, r19
     7c6:	14 06       	cpc	r1, r20
     7c8:	05 06       	cpc	r0, r21
     7ca:	08 95       	ret

000007cc <__fp_round>:
     7cc:	09 2e       	mov	r0, r25
     7ce:	03 94       	inc	r0
     7d0:	00 0c       	add	r0, r0
     7d2:	11 f4       	brne	.+4      	; 0x7d8 <__fp_round+0xc>
     7d4:	88 23       	and	r24, r24
     7d6:	52 f0       	brmi	.+20     	; 0x7ec <__fp_round+0x20>
     7d8:	bb 0f       	add	r27, r27
     7da:	40 f4       	brcc	.+16     	; 0x7ec <__fp_round+0x20>
     7dc:	bf 2b       	or	r27, r31
     7de:	11 f4       	brne	.+4      	; 0x7e4 <__fp_round+0x18>
     7e0:	60 ff       	sbrs	r22, 0
     7e2:	04 c0       	rjmp	.+8      	; 0x7ec <__fp_round+0x20>
     7e4:	6f 5f       	subi	r22, 0xFF	; 255
     7e6:	7f 4f       	sbci	r23, 0xFF	; 255
     7e8:	8f 4f       	sbci	r24, 0xFF	; 255
     7ea:	9f 4f       	sbci	r25, 0xFF	; 255
     7ec:	08 95       	ret

000007ee <__fp_split3>:
     7ee:	57 fd       	sbrc	r21, 7
     7f0:	90 58       	subi	r25, 0x80	; 128
     7f2:	44 0f       	add	r20, r20
     7f4:	55 1f       	adc	r21, r21
     7f6:	59 f0       	breq	.+22     	; 0x80e <__fp_splitA+0x10>
     7f8:	5f 3f       	cpi	r21, 0xFF	; 255
     7fa:	71 f0       	breq	.+28     	; 0x818 <__fp_splitA+0x1a>
     7fc:	47 95       	ror	r20

000007fe <__fp_splitA>:
     7fe:	88 0f       	add	r24, r24
     800:	97 fb       	bst	r25, 7
     802:	99 1f       	adc	r25, r25
     804:	61 f0       	breq	.+24     	; 0x81e <__fp_splitA+0x20>
     806:	9f 3f       	cpi	r25, 0xFF	; 255
     808:	79 f0       	breq	.+30     	; 0x828 <__fp_splitA+0x2a>
     80a:	87 95       	ror	r24
     80c:	08 95       	ret
     80e:	12 16       	cp	r1, r18
     810:	13 06       	cpc	r1, r19
     812:	14 06       	cpc	r1, r20
     814:	55 1f       	adc	r21, r21
     816:	f2 cf       	rjmp	.-28     	; 0x7fc <__fp_split3+0xe>
     818:	46 95       	lsr	r20
     81a:	f1 df       	rcall	.-30     	; 0x7fe <__fp_splitA>
     81c:	08 c0       	rjmp	.+16     	; 0x82e <__fp_splitA+0x30>
     81e:	16 16       	cp	r1, r22
     820:	17 06       	cpc	r1, r23
     822:	18 06       	cpc	r1, r24
     824:	99 1f       	adc	r25, r25
     826:	f1 cf       	rjmp	.-30     	; 0x80a <__fp_splitA+0xc>
     828:	86 95       	lsr	r24
     82a:	71 05       	cpc	r23, r1
     82c:	61 05       	cpc	r22, r1
     82e:	08 94       	sec
     830:	08 95       	ret

00000832 <__fp_zero>:
     832:	e8 94       	clt

00000834 <__fp_szero>:
     834:	bb 27       	eor	r27, r27
     836:	66 27       	eor	r22, r22
     838:	77 27       	eor	r23, r23
     83a:	cb 01       	movw	r24, r22
     83c:	97 f9       	bld	r25, 7
     83e:	08 95       	ret

00000840 <vfprintf>:
     840:	a3 e1       	ldi	r26, 0x13	; 19
     842:	b0 e0       	ldi	r27, 0x00	; 0
     844:	e6 e2       	ldi	r30, 0x26	; 38
     846:	f4 e0       	ldi	r31, 0x04	; 4
     848:	0c 94 d5 0c 	jmp	0x19aa	; 0x19aa <__prologue_saves__>
     84c:	7c 01       	movw	r14, r24
     84e:	1b 01       	movw	r2, r22
     850:	6a 01       	movw	r12, r20
     852:	fc 01       	movw	r30, r24
     854:	17 82       	std	Z+7, r1	; 0x07
     856:	16 82       	std	Z+6, r1	; 0x06
     858:	83 81       	ldd	r24, Z+3	; 0x03
     85a:	81 ff       	sbrs	r24, 1
     85c:	66 c3       	rjmp	.+1740   	; 0xf2a <__stack+0x62b>
     85e:	be 01       	movw	r22, r28
     860:	6f 5f       	subi	r22, 0xFF	; 255
     862:	7f 4f       	sbci	r23, 0xFF	; 255
     864:	4b 01       	movw	r8, r22
     866:	f7 01       	movw	r30, r14
     868:	93 81       	ldd	r25, Z+3	; 0x03
     86a:	f1 01       	movw	r30, r2
     86c:	93 fd       	sbrc	r25, 3
     86e:	85 91       	lpm	r24, Z+
     870:	93 ff       	sbrs	r25, 3
     872:	81 91       	ld	r24, Z+
     874:	1f 01       	movw	r2, r30
     876:	88 23       	and	r24, r24
     878:	09 f4       	brne	.+2      	; 0x87c <vfprintf+0x3c>
     87a:	53 c3       	rjmp	.+1702   	; 0xf22 <__stack+0x623>
     87c:	85 32       	cpi	r24, 0x25	; 37
     87e:	39 f4       	brne	.+14     	; 0x88e <vfprintf+0x4e>
     880:	93 fd       	sbrc	r25, 3
     882:	85 91       	lpm	r24, Z+
     884:	93 ff       	sbrs	r25, 3
     886:	81 91       	ld	r24, Z+
     888:	1f 01       	movw	r2, r30
     88a:	85 32       	cpi	r24, 0x25	; 37
     88c:	39 f4       	brne	.+14     	; 0x89c <vfprintf+0x5c>
     88e:	b7 01       	movw	r22, r14
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <fputc>
     896:	56 01       	movw	r10, r12
     898:	65 01       	movw	r12, r10
     89a:	e5 cf       	rjmp	.-54     	; 0x866 <vfprintf+0x26>
     89c:	10 e0       	ldi	r17, 0x00	; 0
     89e:	51 2c       	mov	r5, r1
     8a0:	20 e0       	ldi	r18, 0x00	; 0
     8a2:	20 32       	cpi	r18, 0x20	; 32
     8a4:	a0 f4       	brcc	.+40     	; 0x8ce <vfprintf+0x8e>
     8a6:	8b 32       	cpi	r24, 0x2B	; 43
     8a8:	69 f0       	breq	.+26     	; 0x8c4 <vfprintf+0x84>
     8aa:	30 f4       	brcc	.+12     	; 0x8b8 <vfprintf+0x78>
     8ac:	80 32       	cpi	r24, 0x20	; 32
     8ae:	59 f0       	breq	.+22     	; 0x8c6 <vfprintf+0x86>
     8b0:	83 32       	cpi	r24, 0x23	; 35
     8b2:	69 f4       	brne	.+26     	; 0x8ce <vfprintf+0x8e>
     8b4:	20 61       	ori	r18, 0x10	; 16
     8b6:	2c c0       	rjmp	.+88     	; 0x910 <__stack+0x11>
     8b8:	8d 32       	cpi	r24, 0x2D	; 45
     8ba:	39 f0       	breq	.+14     	; 0x8ca <vfprintf+0x8a>
     8bc:	80 33       	cpi	r24, 0x30	; 48
     8be:	39 f4       	brne	.+14     	; 0x8ce <vfprintf+0x8e>
     8c0:	21 60       	ori	r18, 0x01	; 1
     8c2:	26 c0       	rjmp	.+76     	; 0x910 <__stack+0x11>
     8c4:	22 60       	ori	r18, 0x02	; 2
     8c6:	24 60       	ori	r18, 0x04	; 4
     8c8:	23 c0       	rjmp	.+70     	; 0x910 <__stack+0x11>
     8ca:	28 60       	ori	r18, 0x08	; 8
     8cc:	21 c0       	rjmp	.+66     	; 0x910 <__stack+0x11>
     8ce:	27 fd       	sbrc	r18, 7
     8d0:	27 c0       	rjmp	.+78     	; 0x920 <__stack+0x21>
     8d2:	30 ed       	ldi	r19, 0xD0	; 208
     8d4:	38 0f       	add	r19, r24
     8d6:	3a 30       	cpi	r19, 0x0A	; 10
     8d8:	78 f4       	brcc	.+30     	; 0x8f8 <vfprintf+0xb8>
     8da:	26 ff       	sbrs	r18, 6
     8dc:	06 c0       	rjmp	.+12     	; 0x8ea <vfprintf+0xaa>
     8de:	fa e0       	ldi	r31, 0x0A	; 10
     8e0:	1f 9f       	mul	r17, r31
     8e2:	30 0d       	add	r19, r0
     8e4:	11 24       	eor	r1, r1
     8e6:	13 2f       	mov	r17, r19
     8e8:	13 c0       	rjmp	.+38     	; 0x910 <__stack+0x11>
     8ea:	6a e0       	ldi	r22, 0x0A	; 10
     8ec:	56 9e       	mul	r5, r22
     8ee:	30 0d       	add	r19, r0
     8f0:	11 24       	eor	r1, r1
     8f2:	53 2e       	mov	r5, r19
     8f4:	20 62       	ori	r18, 0x20	; 32
     8f6:	0c c0       	rjmp	.+24     	; 0x910 <__stack+0x11>
     8f8:	8e 32       	cpi	r24, 0x2E	; 46
     8fa:	21 f4       	brne	.+8      	; 0x904 <__stack+0x5>
     8fc:	26 fd       	sbrc	r18, 6
     8fe:	11 c3       	rjmp	.+1570   	; 0xf22 <__stack+0x623>
     900:	20 64       	ori	r18, 0x40	; 64
     902:	06 c0       	rjmp	.+12     	; 0x910 <__stack+0x11>
     904:	8c 36       	cpi	r24, 0x6C	; 108
     906:	11 f4       	brne	.+4      	; 0x90c <__stack+0xd>
     908:	20 68       	ori	r18, 0x80	; 128
     90a:	02 c0       	rjmp	.+4      	; 0x910 <__stack+0x11>
     90c:	88 36       	cpi	r24, 0x68	; 104
     90e:	41 f4       	brne	.+16     	; 0x920 <__stack+0x21>
     910:	f1 01       	movw	r30, r2
     912:	93 fd       	sbrc	r25, 3
     914:	85 91       	lpm	r24, Z+
     916:	93 ff       	sbrs	r25, 3
     918:	81 91       	ld	r24, Z+
     91a:	1f 01       	movw	r2, r30
     91c:	81 11       	cpse	r24, r1
     91e:	c1 cf       	rjmp	.-126    	; 0x8a2 <vfprintf+0x62>
     920:	9b eb       	ldi	r25, 0xBB	; 187
     922:	98 0f       	add	r25, r24
     924:	93 30       	cpi	r25, 0x03	; 3
     926:	18 f4       	brcc	.+6      	; 0x92e <__stack+0x2f>
     928:	20 61       	ori	r18, 0x10	; 16
     92a:	80 5e       	subi	r24, 0xE0	; 224
     92c:	06 c0       	rjmp	.+12     	; 0x93a <__stack+0x3b>
     92e:	9b e9       	ldi	r25, 0x9B	; 155
     930:	98 0f       	add	r25, r24
     932:	93 30       	cpi	r25, 0x03	; 3
     934:	08 f0       	brcs	.+2      	; 0x938 <__stack+0x39>
     936:	aa c1       	rjmp	.+852    	; 0xc8c <__stack+0x38d>
     938:	2f 7e       	andi	r18, 0xEF	; 239
     93a:	26 ff       	sbrs	r18, 6
     93c:	16 e0       	ldi	r17, 0x06	; 6
     93e:	2f 73       	andi	r18, 0x3F	; 63
     940:	72 2e       	mov	r7, r18
     942:	85 36       	cpi	r24, 0x65	; 101
     944:	21 f4       	brne	.+8      	; 0x94e <__stack+0x4f>
     946:	f2 2f       	mov	r31, r18
     948:	f0 64       	ori	r31, 0x40	; 64
     94a:	7f 2e       	mov	r7, r31
     94c:	08 c0       	rjmp	.+16     	; 0x95e <__stack+0x5f>
     94e:	86 36       	cpi	r24, 0x66	; 102
     950:	21 f4       	brne	.+8      	; 0x95a <__stack+0x5b>
     952:	62 2f       	mov	r22, r18
     954:	60 68       	ori	r22, 0x80	; 128
     956:	76 2e       	mov	r7, r22
     958:	02 c0       	rjmp	.+4      	; 0x95e <__stack+0x5f>
     95a:	11 11       	cpse	r17, r1
     95c:	11 50       	subi	r17, 0x01	; 1
     95e:	77 fe       	sbrs	r7, 7
     960:	07 c0       	rjmp	.+14     	; 0x970 <__stack+0x71>
     962:	1c 33       	cpi	r17, 0x3C	; 60
     964:	48 f4       	brcc	.+18     	; 0x978 <__stack+0x79>
     966:	44 24       	eor	r4, r4
     968:	43 94       	inc	r4
     96a:	41 0e       	add	r4, r17
     96c:	27 e0       	ldi	r18, 0x07	; 7
     96e:	0b c0       	rjmp	.+22     	; 0x986 <__stack+0x87>
     970:	18 30       	cpi	r17, 0x08	; 8
     972:	30 f4       	brcc	.+12     	; 0x980 <__stack+0x81>
     974:	21 2f       	mov	r18, r17
     976:	06 c0       	rjmp	.+12     	; 0x984 <__stack+0x85>
     978:	27 e0       	ldi	r18, 0x07	; 7
     97a:	4c e3       	ldi	r20, 0x3C	; 60
     97c:	44 2e       	mov	r4, r20
     97e:	03 c0       	rjmp	.+6      	; 0x986 <__stack+0x87>
     980:	27 e0       	ldi	r18, 0x07	; 7
     982:	17 e0       	ldi	r17, 0x07	; 7
     984:	41 2c       	mov	r4, r1
     986:	56 01       	movw	r10, r12
     988:	74 e0       	ldi	r23, 0x04	; 4
     98a:	a7 0e       	add	r10, r23
     98c:	b1 1c       	adc	r11, r1
     98e:	f6 01       	movw	r30, r12
     990:	60 81       	ld	r22, Z
     992:	71 81       	ldd	r23, Z+1	; 0x01
     994:	82 81       	ldd	r24, Z+2	; 0x02
     996:	93 81       	ldd	r25, Z+3	; 0x03
     998:	04 2d       	mov	r16, r4
     99a:	a4 01       	movw	r20, r8
     99c:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <__ftoa_engine>
     9a0:	6c 01       	movw	r12, r24
     9a2:	09 81       	ldd	r16, Y+1	; 0x01
     9a4:	00 ff       	sbrs	r16, 0
     9a6:	02 c0       	rjmp	.+4      	; 0x9ac <__stack+0xad>
     9a8:	03 ff       	sbrs	r16, 3
     9aa:	06 c0       	rjmp	.+12     	; 0x9b8 <__stack+0xb9>
     9ac:	71 fc       	sbrc	r7, 1
     9ae:	07 c0       	rjmp	.+14     	; 0x9be <__stack+0xbf>
     9b0:	72 fc       	sbrc	r7, 2
     9b2:	08 c0       	rjmp	.+16     	; 0x9c4 <__stack+0xc5>
     9b4:	61 2c       	mov	r6, r1
     9b6:	08 c0       	rjmp	.+16     	; 0x9c8 <__stack+0xc9>
     9b8:	3d e2       	ldi	r19, 0x2D	; 45
     9ba:	63 2e       	mov	r6, r19
     9bc:	05 c0       	rjmp	.+10     	; 0x9c8 <__stack+0xc9>
     9be:	2b e2       	ldi	r18, 0x2B	; 43
     9c0:	62 2e       	mov	r6, r18
     9c2:	02 c0       	rjmp	.+4      	; 0x9c8 <__stack+0xc9>
     9c4:	90 e2       	ldi	r25, 0x20	; 32
     9c6:	69 2e       	mov	r6, r25
     9c8:	80 2f       	mov	r24, r16
     9ca:	8c 70       	andi	r24, 0x0C	; 12
     9cc:	99 f1       	breq	.+102    	; 0xa34 <__stack+0x135>
     9ce:	66 20       	and	r6, r6
     9d0:	11 f0       	breq	.+4      	; 0x9d6 <__stack+0xd7>
     9d2:	84 e0       	ldi	r24, 0x04	; 4
     9d4:	01 c0       	rjmp	.+2      	; 0x9d8 <__stack+0xd9>
     9d6:	83 e0       	ldi	r24, 0x03	; 3
     9d8:	85 15       	cp	r24, r5
     9da:	10 f0       	brcs	.+4      	; 0x9e0 <__stack+0xe1>
     9dc:	51 2c       	mov	r5, r1
     9de:	0b c0       	rjmp	.+22     	; 0x9f6 <__stack+0xf7>
     9e0:	58 1a       	sub	r5, r24
     9e2:	73 fc       	sbrc	r7, 3
     9e4:	08 c0       	rjmp	.+16     	; 0x9f6 <__stack+0xf7>
     9e6:	b7 01       	movw	r22, r14
     9e8:	80 e2       	ldi	r24, 0x20	; 32
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <fputc>
     9f0:	5a 94       	dec	r5
     9f2:	c9 f7       	brne	.-14     	; 0x9e6 <__stack+0xe7>
     9f4:	f3 cf       	rjmp	.-26     	; 0x9dc <__stack+0xdd>
     9f6:	66 20       	and	r6, r6
     9f8:	29 f0       	breq	.+10     	; 0xa04 <__stack+0x105>
     9fa:	b7 01       	movw	r22, r14
     9fc:	86 2d       	mov	r24, r6
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <fputc>
     a04:	03 fd       	sbrc	r16, 3
     a06:	03 c0       	rjmp	.+6      	; 0xa0e <__stack+0x10f>
     a08:	0e eb       	ldi	r16, 0xBE	; 190
     a0a:	10 e0       	ldi	r17, 0x00	; 0
     a0c:	02 c0       	rjmp	.+4      	; 0xa12 <__stack+0x113>
     a0e:	0a eb       	ldi	r16, 0xBA	; 186
     a10:	10 e0       	ldi	r17, 0x00	; 0
     a12:	f7 2d       	mov	r31, r7
     a14:	f0 71       	andi	r31, 0x10	; 16
     a16:	7f 2e       	mov	r7, r31
     a18:	f8 01       	movw	r30, r16
     a1a:	84 91       	lpm	r24, Z
     a1c:	88 23       	and	r24, r24
     a1e:	09 f4       	brne	.+2      	; 0xa22 <__stack+0x123>
     a20:	76 c2       	rjmp	.+1260   	; 0xf0e <__stack+0x60f>
     a22:	71 10       	cpse	r7, r1
     a24:	80 52       	subi	r24, 0x20	; 32
     a26:	b7 01       	movw	r22, r14
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <fputc>
     a2e:	0f 5f       	subi	r16, 0xFF	; 255
     a30:	1f 4f       	sbci	r17, 0xFF	; 255
     a32:	f2 cf       	rjmp	.-28     	; 0xa18 <__stack+0x119>
     a34:	77 fe       	sbrs	r7, 7
     a36:	0f c0       	rjmp	.+30     	; 0xa56 <__stack+0x157>
     a38:	4c 0c       	add	r4, r12
     a3a:	04 ff       	sbrs	r16, 4
     a3c:	04 c0       	rjmp	.+8      	; 0xa46 <__stack+0x147>
     a3e:	8a 81       	ldd	r24, Y+2	; 0x02
     a40:	81 33       	cpi	r24, 0x31	; 49
     a42:	09 f4       	brne	.+2      	; 0xa46 <__stack+0x147>
     a44:	4a 94       	dec	r4
     a46:	14 14       	cp	r1, r4
     a48:	74 f5       	brge	.+92     	; 0xaa6 <__stack+0x1a7>
     a4a:	f8 e0       	ldi	r31, 0x08	; 8
     a4c:	f4 15       	cp	r31, r4
     a4e:	78 f5       	brcc	.+94     	; 0xaae <__stack+0x1af>
     a50:	88 e0       	ldi	r24, 0x08	; 8
     a52:	48 2e       	mov	r4, r24
     a54:	2c c0       	rjmp	.+88     	; 0xaae <__stack+0x1af>
     a56:	76 fc       	sbrc	r7, 6
     a58:	2a c0       	rjmp	.+84     	; 0xaae <__stack+0x1af>
     a5a:	81 2f       	mov	r24, r17
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	8c 15       	cp	r24, r12
     a60:	9d 05       	cpc	r25, r13
     a62:	9c f0       	brlt	.+38     	; 0xa8a <__stack+0x18b>
     a64:	6c ef       	ldi	r22, 0xFC	; 252
     a66:	c6 16       	cp	r12, r22
     a68:	6f ef       	ldi	r22, 0xFF	; 255
     a6a:	d6 06       	cpc	r13, r22
     a6c:	74 f0       	brlt	.+28     	; 0xa8a <__stack+0x18b>
     a6e:	77 2d       	mov	r23, r7
     a70:	70 68       	ori	r23, 0x80	; 128
     a72:	77 2e       	mov	r7, r23
     a74:	0a c0       	rjmp	.+20     	; 0xa8a <__stack+0x18b>
     a76:	e2 e0       	ldi	r30, 0x02	; 2
     a78:	f0 e0       	ldi	r31, 0x00	; 0
     a7a:	ec 0f       	add	r30, r28
     a7c:	fd 1f       	adc	r31, r29
     a7e:	e1 0f       	add	r30, r17
     a80:	f1 1d       	adc	r31, r1
     a82:	80 81       	ld	r24, Z
     a84:	80 33       	cpi	r24, 0x30	; 48
     a86:	19 f4       	brne	.+6      	; 0xa8e <__stack+0x18f>
     a88:	11 50       	subi	r17, 0x01	; 1
     a8a:	11 11       	cpse	r17, r1
     a8c:	f4 cf       	rjmp	.-24     	; 0xa76 <__stack+0x177>
     a8e:	77 fe       	sbrs	r7, 7
     a90:	0e c0       	rjmp	.+28     	; 0xaae <__stack+0x1af>
     a92:	44 24       	eor	r4, r4
     a94:	43 94       	inc	r4
     a96:	41 0e       	add	r4, r17
     a98:	81 2f       	mov	r24, r17
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	c8 16       	cp	r12, r24
     a9e:	d9 06       	cpc	r13, r25
     aa0:	2c f4       	brge	.+10     	; 0xaac <__stack+0x1ad>
     aa2:	1c 19       	sub	r17, r12
     aa4:	04 c0       	rjmp	.+8      	; 0xaae <__stack+0x1af>
     aa6:	44 24       	eor	r4, r4
     aa8:	43 94       	inc	r4
     aaa:	01 c0       	rjmp	.+2      	; 0xaae <__stack+0x1af>
     aac:	10 e0       	ldi	r17, 0x00	; 0
     aae:	77 fe       	sbrs	r7, 7
     ab0:	07 c0       	rjmp	.+14     	; 0xac0 <__stack+0x1c1>
     ab2:	1c 14       	cp	r1, r12
     ab4:	1d 04       	cpc	r1, r13
     ab6:	3c f4       	brge	.+14     	; 0xac6 <__stack+0x1c7>
     ab8:	96 01       	movw	r18, r12
     aba:	2f 5f       	subi	r18, 0xFF	; 255
     abc:	3f 4f       	sbci	r19, 0xFF	; 255
     abe:	05 c0       	rjmp	.+10     	; 0xaca <__stack+0x1cb>
     ac0:	25 e0       	ldi	r18, 0x05	; 5
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	02 c0       	rjmp	.+4      	; 0xaca <__stack+0x1cb>
     ac6:	21 e0       	ldi	r18, 0x01	; 1
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	66 20       	and	r6, r6
     acc:	11 f0       	breq	.+4      	; 0xad2 <__stack+0x1d3>
     ace:	2f 5f       	subi	r18, 0xFF	; 255
     ad0:	3f 4f       	sbci	r19, 0xFF	; 255
     ad2:	11 23       	and	r17, r17
     ad4:	31 f0       	breq	.+12     	; 0xae2 <__stack+0x1e3>
     ad6:	41 2f       	mov	r20, r17
     ad8:	50 e0       	ldi	r21, 0x00	; 0
     ada:	4f 5f       	subi	r20, 0xFF	; 255
     adc:	5f 4f       	sbci	r21, 0xFF	; 255
     ade:	24 0f       	add	r18, r20
     ae0:	35 1f       	adc	r19, r21
     ae2:	45 2d       	mov	r20, r5
     ae4:	50 e0       	ldi	r21, 0x00	; 0
     ae6:	24 17       	cp	r18, r20
     ae8:	35 07       	cpc	r19, r21
     aea:	14 f4       	brge	.+4      	; 0xaf0 <__stack+0x1f1>
     aec:	52 1a       	sub	r5, r18
     aee:	01 c0       	rjmp	.+2      	; 0xaf2 <__stack+0x1f3>
     af0:	51 2c       	mov	r5, r1
     af2:	87 2d       	mov	r24, r7
     af4:	89 70       	andi	r24, 0x09	; 9
     af6:	49 f4       	brne	.+18     	; 0xb0a <__stack+0x20b>
     af8:	55 20       	and	r5, r5
     afa:	39 f0       	breq	.+14     	; 0xb0a <__stack+0x20b>
     afc:	b7 01       	movw	r22, r14
     afe:	80 e2       	ldi	r24, 0x20	; 32
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <fputc>
     b06:	5a 94       	dec	r5
     b08:	f7 cf       	rjmp	.-18     	; 0xaf8 <__stack+0x1f9>
     b0a:	66 20       	and	r6, r6
     b0c:	29 f0       	breq	.+10     	; 0xb18 <__stack+0x219>
     b0e:	b7 01       	movw	r22, r14
     b10:	86 2d       	mov	r24, r6
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <fputc>
     b18:	73 fc       	sbrc	r7, 3
     b1a:	09 c0       	rjmp	.+18     	; 0xb2e <__stack+0x22f>
     b1c:	55 20       	and	r5, r5
     b1e:	39 f0       	breq	.+14     	; 0xb2e <__stack+0x22f>
     b20:	b7 01       	movw	r22, r14
     b22:	80 e3       	ldi	r24, 0x30	; 48
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <fputc>
     b2a:	5a 94       	dec	r5
     b2c:	f7 cf       	rjmp	.-18     	; 0xb1c <__stack+0x21d>
     b2e:	77 fe       	sbrs	r7, 7
     b30:	5f c0       	rjmp	.+190    	; 0xbf0 <__stack+0x2f1>
     b32:	9c 2d       	mov	r25, r12
     b34:	8d 2d       	mov	r24, r13
     b36:	d7 fe       	sbrs	r13, 7
     b38:	02 c0       	rjmp	.+4      	; 0xb3e <__stack+0x23f>
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	69 2e       	mov	r6, r25
     b40:	78 2e       	mov	r7, r24
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	c6 01       	movw	r24, r12
     b48:	84 19       	sub	r24, r4
     b4a:	91 09       	sbc	r25, r1
     b4c:	9d 87       	std	Y+13, r25	; 0x0d
     b4e:	8c 87       	std	Y+12, r24	; 0x0c
     b50:	96 01       	movw	r18, r12
     b52:	26 19       	sub	r18, r6
     b54:	37 09       	sbc	r19, r7
     b56:	28 0d       	add	r18, r8
     b58:	39 1d       	adc	r19, r9
     b5a:	81 2f       	mov	r24, r17
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	ee 27       	eor	r30, r30
     b60:	ff 27       	eor	r31, r31
     b62:	e8 1b       	sub	r30, r24
     b64:	f9 0b       	sbc	r31, r25
     b66:	ff 87       	std	Y+15, r31	; 0x0f
     b68:	ee 87       	std	Y+14, r30	; 0x0e
     b6a:	ff ef       	ldi	r31, 0xFF	; 255
     b6c:	6f 16       	cp	r6, r31
     b6e:	7f 06       	cpc	r7, r31
     b70:	69 f4       	brne	.+26     	; 0xb8c <__stack+0x28d>
     b72:	b7 01       	movw	r22, r14
     b74:	8e e2       	ldi	r24, 0x2E	; 46
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	2b 8b       	std	Y+19, r18	; 0x13
     b7a:	3a 8b       	std	Y+18, r19	; 0x12
     b7c:	48 8b       	std	Y+16, r20	; 0x10
     b7e:	59 8b       	std	Y+17, r21	; 0x11
     b80:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <fputc>
     b84:	59 89       	ldd	r21, Y+17	; 0x11
     b86:	48 89       	ldd	r20, Y+16	; 0x10
     b88:	3a 89       	ldd	r19, Y+18	; 0x12
     b8a:	2b 89       	ldd	r18, Y+19	; 0x13
     b8c:	c6 14       	cp	r12, r6
     b8e:	d7 04       	cpc	r13, r7
     b90:	54 f0       	brlt	.+20     	; 0xba6 <__stack+0x2a7>
     b92:	6c 85       	ldd	r22, Y+12	; 0x0c
     b94:	7d 85       	ldd	r23, Y+13	; 0x0d
     b96:	66 15       	cp	r22, r6
     b98:	77 05       	cpc	r23, r7
     b9a:	2c f4       	brge	.+10     	; 0xba6 <__stack+0x2a7>
     b9c:	f9 01       	movw	r30, r18
     b9e:	e4 0f       	add	r30, r20
     ba0:	f5 1f       	adc	r31, r21
     ba2:	81 81       	ldd	r24, Z+1	; 0x01
     ba4:	01 c0       	rjmp	.+2      	; 0xba8 <__stack+0x2a9>
     ba6:	80 e3       	ldi	r24, 0x30	; 48
     ba8:	71 e0       	ldi	r23, 0x01	; 1
     baa:	67 1a       	sub	r6, r23
     bac:	71 08       	sbc	r7, r1
     bae:	4f 5f       	subi	r20, 0xFF	; 255
     bb0:	5f 4f       	sbci	r21, 0xFF	; 255
     bb2:	ee 85       	ldd	r30, Y+14	; 0x0e
     bb4:	ff 85       	ldd	r31, Y+15	; 0x0f
     bb6:	6e 16       	cp	r6, r30
     bb8:	7f 06       	cpc	r7, r31
     bba:	6c f0       	brlt	.+26     	; 0xbd6 <__stack+0x2d7>
     bbc:	b7 01       	movw	r22, r14
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	2b 8b       	std	Y+19, r18	; 0x13
     bc2:	3a 8b       	std	Y+18, r19	; 0x12
     bc4:	48 8b       	std	Y+16, r20	; 0x10
     bc6:	59 8b       	std	Y+17, r21	; 0x11
     bc8:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <fputc>
     bcc:	2b 89       	ldd	r18, Y+19	; 0x13
     bce:	3a 89       	ldd	r19, Y+18	; 0x12
     bd0:	48 89       	ldd	r20, Y+16	; 0x10
     bd2:	59 89       	ldd	r21, Y+17	; 0x11
     bd4:	ca cf       	rjmp	.-108    	; 0xb6a <__stack+0x26b>
     bd6:	6c 14       	cp	r6, r12
     bd8:	7d 04       	cpc	r7, r13
     bda:	39 f4       	brne	.+14     	; 0xbea <__stack+0x2eb>
     bdc:	9a 81       	ldd	r25, Y+2	; 0x02
     bde:	96 33       	cpi	r25, 0x36	; 54
     be0:	18 f4       	brcc	.+6      	; 0xbe8 <__stack+0x2e9>
     be2:	95 33       	cpi	r25, 0x35	; 53
     be4:	11 f4       	brne	.+4      	; 0xbea <__stack+0x2eb>
     be6:	04 ff       	sbrs	r16, 4
     be8:	81 e3       	ldi	r24, 0x31	; 49
     bea:	b7 01       	movw	r22, r14
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	4b c0       	rjmp	.+150    	; 0xc86 <__stack+0x387>
     bf0:	8a 81       	ldd	r24, Y+2	; 0x02
     bf2:	81 33       	cpi	r24, 0x31	; 49
     bf4:	09 f0       	breq	.+2      	; 0xbf8 <__stack+0x2f9>
     bf6:	0f 7e       	andi	r16, 0xEF	; 239
     bf8:	b7 01       	movw	r22, r14
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <fputc>
     c00:	11 11       	cpse	r17, r1
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__stack+0x30f>
     c04:	74 fe       	sbrs	r7, 4
     c06:	18 c0       	rjmp	.+48     	; 0xc38 <__stack+0x339>
     c08:	85 e4       	ldi	r24, 0x45	; 69
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	17 c0       	rjmp	.+46     	; 0xc3c <__stack+0x33d>
     c0e:	b7 01       	movw	r22, r14
     c10:	8e e2       	ldi	r24, 0x2E	; 46
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <fputc>
     c18:	82 e0       	ldi	r24, 0x02	; 2
     c1a:	66 24       	eor	r6, r6
     c1c:	63 94       	inc	r6
     c1e:	68 0e       	add	r6, r24
     c20:	f4 01       	movw	r30, r8
     c22:	e8 0f       	add	r30, r24
     c24:	f1 1d       	adc	r31, r1
     c26:	80 81       	ld	r24, Z
     c28:	b7 01       	movw	r22, r14
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <fputc>
     c30:	11 50       	subi	r17, 0x01	; 1
     c32:	41 f3       	breq	.-48     	; 0xc04 <__stack+0x305>
     c34:	86 2d       	mov	r24, r6
     c36:	f1 cf       	rjmp	.-30     	; 0xc1a <__stack+0x31b>
     c38:	85 e6       	ldi	r24, 0x65	; 101
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	b7 01       	movw	r22, r14
     c3e:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <fputc>
     c42:	d7 fc       	sbrc	r13, 7
     c44:	05 c0       	rjmp	.+10     	; 0xc50 <__stack+0x351>
     c46:	c1 14       	cp	r12, r1
     c48:	d1 04       	cpc	r13, r1
     c4a:	39 f4       	brne	.+14     	; 0xc5a <__stack+0x35b>
     c4c:	04 ff       	sbrs	r16, 4
     c4e:	05 c0       	rjmp	.+10     	; 0xc5a <__stack+0x35b>
     c50:	d1 94       	neg	r13
     c52:	c1 94       	neg	r12
     c54:	d1 08       	sbc	r13, r1
     c56:	8d e2       	ldi	r24, 0x2D	; 45
     c58:	01 c0       	rjmp	.+2      	; 0xc5c <__stack+0x35d>
     c5a:	8b e2       	ldi	r24, 0x2B	; 43
     c5c:	b7 01       	movw	r22, r14
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <fputc>
     c64:	80 e3       	ldi	r24, 0x30	; 48
     c66:	6a e0       	ldi	r22, 0x0A	; 10
     c68:	c6 16       	cp	r12, r22
     c6a:	d1 04       	cpc	r13, r1
     c6c:	2c f0       	brlt	.+10     	; 0xc78 <__stack+0x379>
     c6e:	8f 5f       	subi	r24, 0xFF	; 255
     c70:	fa e0       	ldi	r31, 0x0A	; 10
     c72:	cf 1a       	sub	r12, r31
     c74:	d1 08       	sbc	r13, r1
     c76:	f7 cf       	rjmp	.-18     	; 0xc66 <__stack+0x367>
     c78:	b7 01       	movw	r22, r14
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <fputc>
     c80:	b7 01       	movw	r22, r14
     c82:	c6 01       	movw	r24, r12
     c84:	c0 96       	adiw	r24, 0x30	; 48
     c86:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <fputc>
     c8a:	41 c1       	rjmp	.+642    	; 0xf0e <__stack+0x60f>
     c8c:	83 36       	cpi	r24, 0x63	; 99
     c8e:	31 f0       	breq	.+12     	; 0xc9c <__stack+0x39d>
     c90:	83 37       	cpi	r24, 0x73	; 115
     c92:	79 f0       	breq	.+30     	; 0xcb2 <__stack+0x3b3>
     c94:	83 35       	cpi	r24, 0x53	; 83
     c96:	09 f0       	breq	.+2      	; 0xc9a <__stack+0x39b>
     c98:	58 c0       	rjmp	.+176    	; 0xd4a <__stack+0x44b>
     c9a:	21 c0       	rjmp	.+66     	; 0xcde <__stack+0x3df>
     c9c:	56 01       	movw	r10, r12
     c9e:	72 e0       	ldi	r23, 0x02	; 2
     ca0:	a7 0e       	add	r10, r23
     ca2:	b1 1c       	adc	r11, r1
     ca4:	f6 01       	movw	r30, r12
     ca6:	80 81       	ld	r24, Z
     ca8:	89 83       	std	Y+1, r24	; 0x01
     caa:	01 e0       	ldi	r16, 0x01	; 1
     cac:	10 e0       	ldi	r17, 0x00	; 0
     cae:	64 01       	movw	r12, r8
     cb0:	14 c0       	rjmp	.+40     	; 0xcda <__stack+0x3db>
     cb2:	56 01       	movw	r10, r12
     cb4:	f2 e0       	ldi	r31, 0x02	; 2
     cb6:	af 0e       	add	r10, r31
     cb8:	b1 1c       	adc	r11, r1
     cba:	f6 01       	movw	r30, r12
     cbc:	c0 80       	ld	r12, Z
     cbe:	d1 80       	ldd	r13, Z+1	; 0x01
     cc0:	26 ff       	sbrs	r18, 6
     cc2:	03 c0       	rjmp	.+6      	; 0xcca <__stack+0x3cb>
     cc4:	61 2f       	mov	r22, r17
     cc6:	70 e0       	ldi	r23, 0x00	; 0
     cc8:	02 c0       	rjmp	.+4      	; 0xcce <__stack+0x3cf>
     cca:	6f ef       	ldi	r22, 0xFF	; 255
     ccc:	7f ef       	ldi	r23, 0xFF	; 255
     cce:	c6 01       	movw	r24, r12
     cd0:	2b 8b       	std	Y+19, r18	; 0x13
     cd2:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <strnlen>
     cd6:	8c 01       	movw	r16, r24
     cd8:	2b 89       	ldd	r18, Y+19	; 0x13
     cda:	2f 77       	andi	r18, 0x7F	; 127
     cdc:	15 c0       	rjmp	.+42     	; 0xd08 <__stack+0x409>
     cde:	56 01       	movw	r10, r12
     ce0:	f2 e0       	ldi	r31, 0x02	; 2
     ce2:	af 0e       	add	r10, r31
     ce4:	b1 1c       	adc	r11, r1
     ce6:	f6 01       	movw	r30, r12
     ce8:	c0 80       	ld	r12, Z
     cea:	d1 80       	ldd	r13, Z+1	; 0x01
     cec:	26 ff       	sbrs	r18, 6
     cee:	03 c0       	rjmp	.+6      	; 0xcf6 <__stack+0x3f7>
     cf0:	61 2f       	mov	r22, r17
     cf2:	70 e0       	ldi	r23, 0x00	; 0
     cf4:	02 c0       	rjmp	.+4      	; 0xcfa <__stack+0x3fb>
     cf6:	6f ef       	ldi	r22, 0xFF	; 255
     cf8:	7f ef       	ldi	r23, 0xFF	; 255
     cfa:	c6 01       	movw	r24, r12
     cfc:	2b 8b       	std	Y+19, r18	; 0x13
     cfe:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <strnlen_P>
     d02:	8c 01       	movw	r16, r24
     d04:	2b 89       	ldd	r18, Y+19	; 0x13
     d06:	20 68       	ori	r18, 0x80	; 128
     d08:	72 2e       	mov	r7, r18
     d0a:	23 fd       	sbrc	r18, 3
     d0c:	1a c0       	rjmp	.+52     	; 0xd42 <__stack+0x443>
     d0e:	85 2d       	mov	r24, r5
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	08 17       	cp	r16, r24
     d14:	19 07       	cpc	r17, r25
     d16:	a8 f4       	brcc	.+42     	; 0xd42 <__stack+0x443>
     d18:	b7 01       	movw	r22, r14
     d1a:	80 e2       	ldi	r24, 0x20	; 32
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <fputc>
     d22:	5a 94       	dec	r5
     d24:	f4 cf       	rjmp	.-24     	; 0xd0e <__stack+0x40f>
     d26:	f6 01       	movw	r30, r12
     d28:	77 fc       	sbrc	r7, 7
     d2a:	85 91       	lpm	r24, Z+
     d2c:	77 fe       	sbrs	r7, 7
     d2e:	81 91       	ld	r24, Z+
     d30:	6f 01       	movw	r12, r30
     d32:	b7 01       	movw	r22, r14
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <fputc>
     d3a:	51 10       	cpse	r5, r1
     d3c:	5a 94       	dec	r5
     d3e:	01 50       	subi	r16, 0x01	; 1
     d40:	11 09       	sbc	r17, r1
     d42:	01 15       	cp	r16, r1
     d44:	11 05       	cpc	r17, r1
     d46:	79 f7       	brne	.-34     	; 0xd26 <__stack+0x427>
     d48:	e2 c0       	rjmp	.+452    	; 0xf0e <__stack+0x60f>
     d4a:	84 36       	cpi	r24, 0x64	; 100
     d4c:	11 f0       	breq	.+4      	; 0xd52 <__stack+0x453>
     d4e:	89 36       	cpi	r24, 0x69	; 105
     d50:	51 f5       	brne	.+84     	; 0xda6 <__stack+0x4a7>
     d52:	56 01       	movw	r10, r12
     d54:	27 ff       	sbrs	r18, 7
     d56:	09 c0       	rjmp	.+18     	; 0xd6a <__stack+0x46b>
     d58:	f4 e0       	ldi	r31, 0x04	; 4
     d5a:	af 0e       	add	r10, r31
     d5c:	b1 1c       	adc	r11, r1
     d5e:	f6 01       	movw	r30, r12
     d60:	60 81       	ld	r22, Z
     d62:	71 81       	ldd	r23, Z+1	; 0x01
     d64:	82 81       	ldd	r24, Z+2	; 0x02
     d66:	93 81       	ldd	r25, Z+3	; 0x03
     d68:	0a c0       	rjmp	.+20     	; 0xd7e <__stack+0x47f>
     d6a:	f2 e0       	ldi	r31, 0x02	; 2
     d6c:	af 0e       	add	r10, r31
     d6e:	b1 1c       	adc	r11, r1
     d70:	f6 01       	movw	r30, r12
     d72:	60 81       	ld	r22, Z
     d74:	71 81       	ldd	r23, Z+1	; 0x01
     d76:	88 27       	eor	r24, r24
     d78:	77 fd       	sbrc	r23, 7
     d7a:	80 95       	com	r24
     d7c:	98 2f       	mov	r25, r24
     d7e:	02 2f       	mov	r16, r18
     d80:	0f 76       	andi	r16, 0x6F	; 111
     d82:	97 ff       	sbrs	r25, 7
     d84:	08 c0       	rjmp	.+16     	; 0xd96 <__stack+0x497>
     d86:	90 95       	com	r25
     d88:	80 95       	com	r24
     d8a:	70 95       	com	r23
     d8c:	61 95       	neg	r22
     d8e:	7f 4f       	sbci	r23, 0xFF	; 255
     d90:	8f 4f       	sbci	r24, 0xFF	; 255
     d92:	9f 4f       	sbci	r25, 0xFF	; 255
     d94:	00 68       	ori	r16, 0x80	; 128
     d96:	2a e0       	ldi	r18, 0x0A	; 10
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	a4 01       	movw	r20, r8
     d9c:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <__ultoa_invert>
     da0:	c8 2e       	mov	r12, r24
     da2:	c8 18       	sub	r12, r8
     da4:	3e c0       	rjmp	.+124    	; 0xe22 <__stack+0x523>
     da6:	02 2f       	mov	r16, r18
     da8:	85 37       	cpi	r24, 0x75	; 117
     daa:	21 f4       	brne	.+8      	; 0xdb4 <__stack+0x4b5>
     dac:	0f 7e       	andi	r16, 0xEF	; 239
     dae:	2a e0       	ldi	r18, 0x0A	; 10
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	1d c0       	rjmp	.+58     	; 0xdee <__stack+0x4ef>
     db4:	09 7f       	andi	r16, 0xF9	; 249
     db6:	8f 36       	cpi	r24, 0x6F	; 111
     db8:	91 f0       	breq	.+36     	; 0xdde <__stack+0x4df>
     dba:	18 f4       	brcc	.+6      	; 0xdc2 <__stack+0x4c3>
     dbc:	88 35       	cpi	r24, 0x58	; 88
     dbe:	59 f0       	breq	.+22     	; 0xdd6 <__stack+0x4d7>
     dc0:	b0 c0       	rjmp	.+352    	; 0xf22 <__stack+0x623>
     dc2:	80 37       	cpi	r24, 0x70	; 112
     dc4:	19 f0       	breq	.+6      	; 0xdcc <__stack+0x4cd>
     dc6:	88 37       	cpi	r24, 0x78	; 120
     dc8:	11 f0       	breq	.+4      	; 0xdce <__stack+0x4cf>
     dca:	ab c0       	rjmp	.+342    	; 0xf22 <__stack+0x623>
     dcc:	00 61       	ori	r16, 0x10	; 16
     dce:	04 ff       	sbrs	r16, 4
     dd0:	09 c0       	rjmp	.+18     	; 0xde4 <__stack+0x4e5>
     dd2:	04 60       	ori	r16, 0x04	; 4
     dd4:	07 c0       	rjmp	.+14     	; 0xde4 <__stack+0x4e5>
     dd6:	24 ff       	sbrs	r18, 4
     dd8:	08 c0       	rjmp	.+16     	; 0xdea <__stack+0x4eb>
     dda:	06 60       	ori	r16, 0x06	; 6
     ddc:	06 c0       	rjmp	.+12     	; 0xdea <__stack+0x4eb>
     dde:	28 e0       	ldi	r18, 0x08	; 8
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	05 c0       	rjmp	.+10     	; 0xdee <__stack+0x4ef>
     de4:	20 e1       	ldi	r18, 0x10	; 16
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	02 c0       	rjmp	.+4      	; 0xdee <__stack+0x4ef>
     dea:	20 e1       	ldi	r18, 0x10	; 16
     dec:	32 e0       	ldi	r19, 0x02	; 2
     dee:	56 01       	movw	r10, r12
     df0:	07 ff       	sbrs	r16, 7
     df2:	09 c0       	rjmp	.+18     	; 0xe06 <__stack+0x507>
     df4:	f4 e0       	ldi	r31, 0x04	; 4
     df6:	af 0e       	add	r10, r31
     df8:	b1 1c       	adc	r11, r1
     dfa:	f6 01       	movw	r30, r12
     dfc:	60 81       	ld	r22, Z
     dfe:	71 81       	ldd	r23, Z+1	; 0x01
     e00:	82 81       	ldd	r24, Z+2	; 0x02
     e02:	93 81       	ldd	r25, Z+3	; 0x03
     e04:	08 c0       	rjmp	.+16     	; 0xe16 <__stack+0x517>
     e06:	f2 e0       	ldi	r31, 0x02	; 2
     e08:	af 0e       	add	r10, r31
     e0a:	b1 1c       	adc	r11, r1
     e0c:	f6 01       	movw	r30, r12
     e0e:	60 81       	ld	r22, Z
     e10:	71 81       	ldd	r23, Z+1	; 0x01
     e12:	80 e0       	ldi	r24, 0x00	; 0
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	a4 01       	movw	r20, r8
     e18:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <__ultoa_invert>
     e1c:	c8 2e       	mov	r12, r24
     e1e:	c8 18       	sub	r12, r8
     e20:	0f 77       	andi	r16, 0x7F	; 127
     e22:	06 ff       	sbrs	r16, 6
     e24:	0b c0       	rjmp	.+22     	; 0xe3c <__stack+0x53d>
     e26:	20 2f       	mov	r18, r16
     e28:	2e 7f       	andi	r18, 0xFE	; 254
     e2a:	c1 16       	cp	r12, r17
     e2c:	50 f4       	brcc	.+20     	; 0xe42 <__stack+0x543>
     e2e:	04 ff       	sbrs	r16, 4
     e30:	0a c0       	rjmp	.+20     	; 0xe46 <__stack+0x547>
     e32:	02 fd       	sbrc	r16, 2
     e34:	08 c0       	rjmp	.+16     	; 0xe46 <__stack+0x547>
     e36:	20 2f       	mov	r18, r16
     e38:	2e 7e       	andi	r18, 0xEE	; 238
     e3a:	05 c0       	rjmp	.+10     	; 0xe46 <__stack+0x547>
     e3c:	dc 2c       	mov	r13, r12
     e3e:	20 2f       	mov	r18, r16
     e40:	03 c0       	rjmp	.+6      	; 0xe48 <__stack+0x549>
     e42:	dc 2c       	mov	r13, r12
     e44:	01 c0       	rjmp	.+2      	; 0xe48 <__stack+0x549>
     e46:	d1 2e       	mov	r13, r17
     e48:	24 ff       	sbrs	r18, 4
     e4a:	0d c0       	rjmp	.+26     	; 0xe66 <__stack+0x567>
     e4c:	fe 01       	movw	r30, r28
     e4e:	ec 0d       	add	r30, r12
     e50:	f1 1d       	adc	r31, r1
     e52:	80 81       	ld	r24, Z
     e54:	80 33       	cpi	r24, 0x30	; 48
     e56:	11 f4       	brne	.+4      	; 0xe5c <__stack+0x55d>
     e58:	29 7e       	andi	r18, 0xE9	; 233
     e5a:	09 c0       	rjmp	.+18     	; 0xe6e <__stack+0x56f>
     e5c:	22 ff       	sbrs	r18, 2
     e5e:	06 c0       	rjmp	.+12     	; 0xe6c <__stack+0x56d>
     e60:	d3 94       	inc	r13
     e62:	d3 94       	inc	r13
     e64:	04 c0       	rjmp	.+8      	; 0xe6e <__stack+0x56f>
     e66:	82 2f       	mov	r24, r18
     e68:	86 78       	andi	r24, 0x86	; 134
     e6a:	09 f0       	breq	.+2      	; 0xe6e <__stack+0x56f>
     e6c:	d3 94       	inc	r13
     e6e:	23 fd       	sbrc	r18, 3
     e70:	13 c0       	rjmp	.+38     	; 0xe98 <__stack+0x599>
     e72:	20 ff       	sbrs	r18, 0
     e74:	06 c0       	rjmp	.+12     	; 0xe82 <__stack+0x583>
     e76:	1c 2d       	mov	r17, r12
     e78:	d5 14       	cp	r13, r5
     e7a:	18 f4       	brcc	.+6      	; 0xe82 <__stack+0x583>
     e7c:	15 0d       	add	r17, r5
     e7e:	1d 19       	sub	r17, r13
     e80:	d5 2c       	mov	r13, r5
     e82:	d5 14       	cp	r13, r5
     e84:	68 f4       	brcc	.+26     	; 0xea0 <__stack+0x5a1>
     e86:	b7 01       	movw	r22, r14
     e88:	80 e2       	ldi	r24, 0x20	; 32
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	2b 8b       	std	Y+19, r18	; 0x13
     e8e:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <fputc>
     e92:	d3 94       	inc	r13
     e94:	2b 89       	ldd	r18, Y+19	; 0x13
     e96:	f5 cf       	rjmp	.-22     	; 0xe82 <__stack+0x583>
     e98:	d5 14       	cp	r13, r5
     e9a:	10 f4       	brcc	.+4      	; 0xea0 <__stack+0x5a1>
     e9c:	5d 18       	sub	r5, r13
     e9e:	01 c0       	rjmp	.+2      	; 0xea2 <__stack+0x5a3>
     ea0:	51 2c       	mov	r5, r1
     ea2:	24 ff       	sbrs	r18, 4
     ea4:	12 c0       	rjmp	.+36     	; 0xeca <__stack+0x5cb>
     ea6:	b7 01       	movw	r22, r14
     ea8:	80 e3       	ldi	r24, 0x30	; 48
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	2b 8b       	std	Y+19, r18	; 0x13
     eae:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <fputc>
     eb2:	2b 89       	ldd	r18, Y+19	; 0x13
     eb4:	22 ff       	sbrs	r18, 2
     eb6:	17 c0       	rjmp	.+46     	; 0xee6 <__stack+0x5e7>
     eb8:	21 ff       	sbrs	r18, 1
     eba:	03 c0       	rjmp	.+6      	; 0xec2 <__stack+0x5c3>
     ebc:	88 e5       	ldi	r24, 0x58	; 88
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <__stack+0x5c7>
     ec2:	88 e7       	ldi	r24, 0x78	; 120
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	b7 01       	movw	r22, r14
     ec8:	0c c0       	rjmp	.+24     	; 0xee2 <__stack+0x5e3>
     eca:	82 2f       	mov	r24, r18
     ecc:	86 78       	andi	r24, 0x86	; 134
     ece:	59 f0       	breq	.+22     	; 0xee6 <__stack+0x5e7>
     ed0:	21 fd       	sbrc	r18, 1
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <__stack+0x5d9>
     ed4:	80 e2       	ldi	r24, 0x20	; 32
     ed6:	01 c0       	rjmp	.+2      	; 0xeda <__stack+0x5db>
     ed8:	8b e2       	ldi	r24, 0x2B	; 43
     eda:	27 fd       	sbrc	r18, 7
     edc:	8d e2       	ldi	r24, 0x2D	; 45
     ede:	b7 01       	movw	r22, r14
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <fputc>
     ee6:	c1 16       	cp	r12, r17
     ee8:	38 f4       	brcc	.+14     	; 0xef8 <__stack+0x5f9>
     eea:	b7 01       	movw	r22, r14
     eec:	80 e3       	ldi	r24, 0x30	; 48
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <fputc>
     ef4:	11 50       	subi	r17, 0x01	; 1
     ef6:	f7 cf       	rjmp	.-18     	; 0xee6 <__stack+0x5e7>
     ef8:	ca 94       	dec	r12
     efa:	f4 01       	movw	r30, r8
     efc:	ec 0d       	add	r30, r12
     efe:	f1 1d       	adc	r31, r1
     f00:	80 81       	ld	r24, Z
     f02:	b7 01       	movw	r22, r14
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <fputc>
     f0a:	c1 10       	cpse	r12, r1
     f0c:	f5 cf       	rjmp	.-22     	; 0xef8 <__stack+0x5f9>
     f0e:	55 20       	and	r5, r5
     f10:	09 f4       	brne	.+2      	; 0xf14 <__stack+0x615>
     f12:	c2 cc       	rjmp	.-1660   	; 0x898 <vfprintf+0x58>
     f14:	b7 01       	movw	r22, r14
     f16:	80 e2       	ldi	r24, 0x20	; 32
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <fputc>
     f1e:	5a 94       	dec	r5
     f20:	f6 cf       	rjmp	.-20     	; 0xf0e <__stack+0x60f>
     f22:	f7 01       	movw	r30, r14
     f24:	86 81       	ldd	r24, Z+6	; 0x06
     f26:	97 81       	ldd	r25, Z+7	; 0x07
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <__stack+0x62f>
     f2a:	8f ef       	ldi	r24, 0xFF	; 255
     f2c:	9f ef       	ldi	r25, 0xFF	; 255
     f2e:	63 96       	adiw	r28, 0x13	; 19
     f30:	e2 e1       	ldi	r30, 0x12	; 18
     f32:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <__epilogue_restores__>

00000f36 <_ZN11TinyGPSPlusC1Ev>:
double radians(double degrees)
{
  return degrees * PI / (double)180;
}

TinyGPSPlus::TinyGPSPlus()
     f36:	fc 01       	movw	r30, r24
  const RawDegrees &rawLat()     { updated = false; return rawLatData; }
  const RawDegrees &rawLng()     { updated = false; return rawLngData; }
  double lat();
  double lng();

  TinyGPSLocation() : valid(false), updated(false)
     f38:	10 82       	st	Z, r1
     f3a:	11 82       	std	Z+1, r1	; 0x01
{
  uint16_t deg;
  uint32_t billionths;
  bool negative;
  public:
  RawDegrees() : deg(0), billionths(0), negative(false)
     f3c:	13 82       	std	Z+3, r1	; 0x03
     f3e:	12 82       	std	Z+2, r1	; 0x02
     f40:	14 82       	std	Z+4, r1	; 0x04
     f42:	15 82       	std	Z+5, r1	; 0x05
     f44:	16 82       	std	Z+6, r1	; 0x06
     f46:	17 82       	std	Z+7, r1	; 0x07
     f48:	10 86       	std	Z+8, r1	; 0x08
     f4a:	12 86       	std	Z+10, r1	; 0x0a
     f4c:	11 86       	std	Z+9, r1	; 0x09
     f4e:	13 86       	std	Z+11, r1	; 0x0b
     f50:	14 86       	std	Z+12, r1	; 0x0c
     f52:	15 86       	std	Z+13, r1	; 0x0d
     f54:	16 86       	std	Z+14, r1	; 0x0e
     f56:	17 86       	std	Z+15, r1	; 0x0f
     f58:	11 8a       	std	Z+17, r1	; 0x11
     f5a:	10 8a       	std	Z+16, r1	; 0x10
     f5c:	12 8a       	std	Z+18, r1	; 0x12
     f5e:	13 8a       	std	Z+19, r1	; 0x13
     f60:	14 8a       	std	Z+20, r1	; 0x14
     f62:	15 8a       	std	Z+21, r1	; 0x15
     f64:	16 8a       	std	Z+22, r1	; 0x16
     f66:	10 8e       	std	Z+24, r1	; 0x18
     f68:	17 8a       	std	Z+23, r1	; 0x17
     f6a:	11 8e       	std	Z+25, r1	; 0x19
     f6c:	12 8e       	std	Z+26, r1	; 0x1a
     f6e:	13 8e       	std	Z+27, r1	; 0x1b
     f70:	14 8e       	std	Z+28, r1	; 0x1c
     f72:	15 8e       	std	Z+29, r1	; 0x1d
  uint32_t value()           { updated = false; return date; }
  uint16_t year();
  uint8_t month();
  uint8_t day();

  TinyGPSDate() : valid(false), updated(false), date(0)
     f74:	12 a2       	std	Z+34, r1	; 0x22
     f76:	13 a2       	std	Z+35, r1	; 0x23
     f78:	14 a2       	std	Z+36, r1	; 0x24
     f7a:	15 a2       	std	Z+37, r1	; 0x25
     f7c:	16 a2       	std	Z+38, r1	; 0x26
     f7e:	17 a2       	std	Z+39, r1	; 0x27
  uint8_t hour();
  uint8_t minute();
  uint8_t second();
  uint8_t centisecond();

  TinyGPSTime() : valid(false), updated(false), time(0)
     f80:	10 aa       	std	Z+48, r1	; 0x30
     f82:	11 aa       	std	Z+49, r1	; 0x31
     f84:	12 aa       	std	Z+50, r1	; 0x32
     f86:	13 aa       	std	Z+51, r1	; 0x33
     f88:	14 aa       	std	Z+52, r1	; 0x34
     f8a:	15 aa       	std	Z+53, r1	; 0x35
  bool isValid() const    { return valid; }
  bool isUpdated() const  { return updated; }
  // uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
  int32_t value()         { updated = false; return val; }

  TinyGPSDecimal() : valid(false), updated(false), val(0)
     f8c:	16 ae       	std	Z+62, r1	; 0x3e
     f8e:	17 ae       	std	Z+63, r1	; 0x3f
     f90:	dc 01       	movw	r26, r24
     f92:	ac 5b       	subi	r26, 0xBC	; 188
     f94:	bf 4f       	sbci	r27, 0xFF	; 255
     f96:	1d 92       	st	X+, r1
     f98:	1d 92       	st	X+, r1
     f9a:	1d 92       	st	X+, r1
     f9c:	1c 92       	st	X, r1
     f9e:	13 97       	sbiw	r26, 0x03	; 3
     fa0:	18 96       	adiw	r26, 0x08	; 8
     fa2:	1c 92       	st	X, r1
     fa4:	11 96       	adiw	r26, 0x01	; 1
     fa6:	1c 92       	st	X, r1
     fa8:	11 97       	sbiw	r26, 0x01	; 1
     faa:	16 96       	adiw	r26, 0x06	; 6
     fac:	1d 92       	st	X+, r1
     fae:	1d 92       	st	X+, r1
     fb0:	1d 92       	st	X+, r1
     fb2:	1c 92       	st	X, r1
     fb4:	19 97       	sbiw	r26, 0x09	; 9
     fb6:	1e 96       	adiw	r26, 0x0e	; 14
     fb8:	1c 92       	st	X, r1
     fba:	11 96       	adiw	r26, 0x01	; 1
     fbc:	1c 92       	st	X, r1
     fbe:	11 97       	sbiw	r26, 0x01	; 1
     fc0:	16 96       	adiw	r26, 0x06	; 6
     fc2:	1d 92       	st	X+, r1
     fc4:	1d 92       	st	X+, r1
     fc6:	1d 92       	st	X+, r1
     fc8:	1c 92       	st	X, r1
     fca:	19 97       	sbiw	r26, 0x09	; 9
  bool isValid() const    { return valid; }
  bool isUpdated() const  { return updated; }
  // uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
  uint32_t value()        { updated = false; return val; }

  TinyGPSInteger() : valid(false), updated(false), val(0)
     fcc:	1e 96       	adiw	r26, 0x0e	; 14
     fce:	1c 92       	st	X, r1
     fd0:	11 96       	adiw	r26, 0x01	; 1
     fd2:	1c 92       	st	X, r1
     fd4:	11 97       	sbiw	r26, 0x01	; 1
     fd6:	16 96       	adiw	r26, 0x06	; 6
     fd8:	1d 92       	st	X+, r1
     fda:	1d 92       	st	X+, r1
     fdc:	1d 92       	st	X+, r1
     fde:	1c 92       	st	X, r1
     fe0:	19 97       	sbiw	r26, 0x09	; 9
  bool isValid() const    { return valid; }
  bool isUpdated() const  { return updated; }
  // uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
  int32_t value()         { updated = false; return val; }

  TinyGPSDecimal() : valid(false), updated(false), val(0)
     fe2:	1e 96       	adiw	r26, 0x0e	; 14
     fe4:	1c 92       	st	X, r1
     fe6:	11 96       	adiw	r26, 0x01	; 1
     fe8:	1c 92       	st	X, r1
     fea:	11 97       	sbiw	r26, 0x01	; 1
     fec:	16 96       	adiw	r26, 0x06	; 6
     fee:	1d 92       	st	X+, r1
     ff0:	1d 92       	st	X+, r1
     ff2:	1d 92       	st	X+, r1
     ff4:	1c 92       	st	X, r1
     ff6:	19 97       	sbiw	r26, 0x09	; 9
,  customElts(0)
,  customCandidates(0)
,  encodedCharCount(0)
,  sentencesWithFixCount(0)
,  failedChecksumCount(0)
,  passedChecksumCount(0)
     ff8:	1e 96       	adiw	r26, 0x0e	; 14
     ffa:	1c 92       	st	X, r1
     ffc:	11 96       	adiw	r26, 0x01	; 1
     ffe:	1c 92       	st	X, r1
    1000:	50 96       	adiw	r26, 0x10	; 16
    1002:	82 e0       	ldi	r24, 0x02	; 2
    1004:	8c 93       	st	X, r24
    1006:	11 96       	adiw	r26, 0x01	; 1
    1008:	1c 92       	st	X, r1
    100a:	11 96       	adiw	r26, 0x01	; 1
    100c:	1c 92       	st	X, r1
    100e:	11 96       	adiw	r26, 0x01	; 1
    1010:	1c 92       	st	X, r1
    1012:	11 96       	adiw	r26, 0x01	; 1
    1014:	11 96       	adiw	r26, 0x01	; 1
    1016:	1c 92       	st	X, r1
    1018:	1e 92       	st	-X, r1
    101a:	12 96       	adiw	r26, 0x02	; 2
    101c:	11 96       	adiw	r26, 0x01	; 1
    101e:	1c 92       	st	X, r1
    1020:	1e 92       	st	-X, r1
    1022:	12 96       	adiw	r26, 0x02	; 2
    1024:	1d 92       	st	X+, r1
    1026:	1d 92       	st	X+, r1
    1028:	1d 92       	st	X+, r1
    102a:	1c 92       	st	X, r1
    102c:	13 97       	sbiw	r26, 0x03	; 3
    102e:	14 96       	adiw	r26, 0x04	; 4
    1030:	1d 92       	st	X+, r1
    1032:	1d 92       	st	X+, r1
    1034:	1d 92       	st	X+, r1
    1036:	1c 92       	st	X, r1
    1038:	13 97       	sbiw	r26, 0x03	; 3
    103a:	14 96       	adiw	r26, 0x04	; 4
    103c:	1d 92       	st	X+, r1
    103e:	1d 92       	st	X+, r1
    1040:	1d 92       	st	X+, r1
    1042:	1c 92       	st	X, r1
    1044:	13 97       	sbiw	r26, 0x03	; 3
    1046:	14 96       	adiw	r26, 0x04	; 4
    1048:	1d 92       	st	X+, r1
    104a:	1d 92       	st	X+, r1
    104c:	1d 92       	st	X+, r1
    104e:	1c 92       	st	X, r1
    1050:	13 97       	sbiw	r26, 0x03	; 3
{
  term[0] = '\0';
    1052:	ea 57       	subi	r30, 0x7A	; 122
    1054:	ff 4f       	sbci	r31, 0xFF	; 255
    1056:	10 82       	st	Z, r1
    1058:	08 95       	ret

0000105a <_ZN11TinyGPSPlus7fromHexEc>:
//
// internal utilities
//
int TinyGPSPlus::fromHex(char a)
{
  if (a >= 'A' && a <= 'F')
    105a:	8f eb       	ldi	r24, 0xBF	; 191
    105c:	86 0f       	add	r24, r22
    105e:	86 30       	cpi	r24, 0x06	; 6
    1060:	20 f4       	brcc	.+8      	; 0x106a <_ZN11TinyGPSPlus7fromHexEc+0x10>
  return a - 'A' + 10;
    1062:	86 2f       	mov	r24, r22
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	c7 97       	sbiw	r24, 0x37	; 55
    1068:	08 95       	ret
  else if (a >= 'a' && a <= 'f')
    106a:	8f e9       	ldi	r24, 0x9F	; 159
    106c:	86 0f       	add	r24, r22
    106e:	86 30       	cpi	r24, 0x06	; 6
    1070:	28 f4       	brcc	.+10     	; 0x107c <_ZN11TinyGPSPlus7fromHexEc+0x22>
  return a - 'a' + 10;
    1072:	86 2f       	mov	r24, r22
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	87 55       	subi	r24, 0x57	; 87
    1078:	91 09       	sbc	r25, r1
    107a:	08 95       	ret
  else
  return a - '0';
    107c:	86 2f       	mov	r24, r22
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	c0 97       	sbiw	r24, 0x30	; 48
}
    1082:	08 95       	ret

00001084 <_ZN11TinyGPSPlus12parseDecimalEPKc>:

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
    1084:	ff 92       	push	r15
    1086:	0f 93       	push	r16
    1088:	1f 93       	push	r17
    108a:	cf 93       	push	r28
    108c:	df 93       	push	r29
    108e:	ec 01       	movw	r28, r24
  bool negative = *term == '-';
    1090:	ff 24       	eor	r15, r15
    1092:	f3 94       	inc	r15
    1094:	88 81       	ld	r24, Y
    1096:	8d 32       	cpi	r24, 0x2D	; 45
    1098:	09 f0       	breq	.+2      	; 0x109c <_ZN11TinyGPSPlus12parseDecimalEPKc+0x18>
    109a:	f1 2c       	mov	r15, r1
  if (negative) ++term;
    109c:	f1 10       	cpse	r15, r1
    109e:	21 96       	adiw	r28, 0x01	; 1
  int32_t ret = 100 * (int32_t)atol(term);
    10a0:	ce 01       	movw	r24, r28
    10a2:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <atol>
    10a6:	9b 01       	movw	r18, r22
    10a8:	ac 01       	movw	r20, r24
    10aa:	a4 e6       	ldi	r26, 0x64	; 100
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	0e 94 c2 0c 	call	0x1984	; 0x1984 <__muluhisi3>
  while (isdigit(*term)) ++term;
    10b2:	48 81       	ld	r20, Y
    10b4:	24 2f       	mov	r18, r20
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	20 53       	subi	r18, 0x30	; 48
    10ba:	31 09       	sbc	r19, r1
    10bc:	2a 30       	cpi	r18, 0x0A	; 10
    10be:	31 05       	cpc	r19, r1
    10c0:	58 f4       	brcc	.+22     	; 0x10d8 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x54>
    10c2:	fe 01       	movw	r30, r28
    10c4:	31 96       	adiw	r30, 0x01	; 1
    10c6:	ef 01       	movw	r28, r30
    10c8:	41 91       	ld	r20, Z+
    10ca:	24 2f       	mov	r18, r20
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	20 53       	subi	r18, 0x30	; 48
    10d0:	31 09       	sbc	r19, r1
    10d2:	2a 30       	cpi	r18, 0x0A	; 10
    10d4:	31 05       	cpc	r19, r1
    10d6:	b8 f3       	brcs	.-18     	; 0x10c6 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x42>
  if (*term == '.' && isdigit(term[1]))
    10d8:	4e 32       	cpi	r20, 0x2E	; 46
    10da:	81 f5       	brne	.+96     	; 0x113c <_ZN11TinyGPSPlus12parseDecimalEPKc+0xb8>
    10dc:	49 81       	ldd	r20, Y+1	; 0x01
    10de:	24 2f       	mov	r18, r20
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	20 53       	subi	r18, 0x30	; 48
    10e4:	31 09       	sbc	r19, r1
    10e6:	2a 30       	cpi	r18, 0x0A	; 10
    10e8:	31 05       	cpc	r19, r1
    10ea:	40 f5       	brcc	.+80     	; 0x113c <_ZN11TinyGPSPlus12parseDecimalEPKc+0xb8>
  {
    ret += 10 * (term[1] - '0');
    10ec:	24 2f       	mov	r18, r20
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	20 53       	subi	r18, 0x30	; 48
    10f2:	31 09       	sbc	r19, r1
    10f4:	89 01       	movw	r16, r18
    10f6:	00 0f       	add	r16, r16
    10f8:	11 1f       	adc	r17, r17
    10fa:	22 0f       	add	r18, r18
    10fc:	33 1f       	adc	r19, r19
    10fe:	22 0f       	add	r18, r18
    1100:	33 1f       	adc	r19, r19
    1102:	22 0f       	add	r18, r18
    1104:	33 1f       	adc	r19, r19
    1106:	02 0f       	add	r16, r18
    1108:	13 1f       	adc	r17, r19
    110a:	22 27       	eor	r18, r18
    110c:	17 fd       	sbrc	r17, 7
    110e:	20 95       	com	r18
    1110:	32 2f       	mov	r19, r18
    1112:	60 0f       	add	r22, r16
    1114:	71 1f       	adc	r23, r17
    1116:	82 1f       	adc	r24, r18
    1118:	93 1f       	adc	r25, r19
    if (isdigit(term[2]))
    111a:	0a 81       	ldd	r16, Y+2	; 0x02
    111c:	20 2f       	mov	r18, r16
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	20 53       	subi	r18, 0x30	; 48
    1122:	31 09       	sbc	r19, r1
    1124:	2a 30       	cpi	r18, 0x0A	; 10
    1126:	31 05       	cpc	r19, r1
    1128:	48 f4       	brcc	.+18     	; 0x113c <_ZN11TinyGPSPlus12parseDecimalEPKc+0xb8>
    ret += term[2] - '0';
    112a:	89 01       	movw	r16, r18
    112c:	22 27       	eor	r18, r18
    112e:	17 fd       	sbrc	r17, 7
    1130:	20 95       	com	r18
    1132:	32 2f       	mov	r19, r18
    1134:	60 0f       	add	r22, r16
    1136:	71 1f       	adc	r23, r17
    1138:	82 1f       	adc	r24, r18
    113a:	93 1f       	adc	r25, r19
  }
  return negative ? -ret : ret;
    113c:	ff 20       	and	r15, r15
    113e:	39 f0       	breq	.+14     	; 0x114e <_ZN11TinyGPSPlus12parseDecimalEPKc+0xca>
    1140:	90 95       	com	r25
    1142:	80 95       	com	r24
    1144:	70 95       	com	r23
    1146:	61 95       	neg	r22
    1148:	7f 4f       	sbci	r23, 0xFF	; 255
    114a:	8f 4f       	sbci	r24, 0xFF	; 255
    114c:	9f 4f       	sbci	r25, 0xFF	; 255
}
    114e:	df 91       	pop	r29
    1150:	cf 91       	pop	r28
    1152:	1f 91       	pop	r17
    1154:	0f 91       	pop	r16
    1156:	ff 90       	pop	r15
    1158:	08 95       	ret

0000115a <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>:

// static
// Parse degrees in that funny NMEA format DDMM.MMMM
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
    115a:	4f 92       	push	r4
    115c:	5f 92       	push	r5
    115e:	7f 92       	push	r7
    1160:	8f 92       	push	r8
    1162:	9f 92       	push	r9
    1164:	af 92       	push	r10
    1166:	bf 92       	push	r11
    1168:	cf 92       	push	r12
    116a:	df 92       	push	r13
    116c:	ef 92       	push	r14
    116e:	ff 92       	push	r15
    1170:	0f 93       	push	r16
    1172:	1f 93       	push	r17
    1174:	cf 93       	push	r28
    1176:	df 93       	push	r29
    1178:	ec 01       	movw	r28, r24
    117a:	2b 01       	movw	r4, r22
  uint32_t leftOfDecimal = (uint32_t)atol(term);
    117c:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <atol>
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
    1180:	24 e6       	ldi	r18, 0x64	; 100
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	40 e0       	ldi	r20, 0x00	; 0
    1186:	50 e0       	ldi	r21, 0x00	; 0
    1188:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__udivmodsi4>
    118c:	49 01       	movw	r8, r18
    118e:	5a 01       	movw	r10, r20
    1190:	9b 01       	movw	r18, r22
    1192:	ac 01       	movw	r20, r24
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
    1194:	60 e8       	ldi	r22, 0x80	; 128
    1196:	76 e9       	ldi	r23, 0x96	; 150
    1198:	88 e9       	ldi	r24, 0x98	; 152
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	0e 94 8a 0c 	call	0x1914	; 0x1914 <__mulsi3>
    11a0:	6b 01       	movw	r12, r22
    11a2:	7c 01       	movw	r14, r24

  deg.deg = (int16_t)(leftOfDecimal / 100);
    11a4:	f2 01       	movw	r30, r4
    11a6:	91 82       	std	Z+1, r9	; 0x01
    11a8:	80 82       	st	Z, r8

  while (isdigit(*term))
    11aa:	28 81       	ld	r18, Y
    11ac:	82 2f       	mov	r24, r18
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	c0 97       	sbiw	r24, 0x30	; 48
    11b2:	0a 97       	sbiw	r24, 0x0a	; 10
    11b4:	48 f4       	brcc	.+18     	; 0x11c8 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x6e>
    11b6:	fe 01       	movw	r30, r28
    11b8:	31 96       	adiw	r30, 0x01	; 1
  ++term;
    11ba:	ef 01       	movw	r28, r30
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;

  deg.deg = (int16_t)(leftOfDecimal / 100);

  while (isdigit(*term))
    11bc:	21 91       	ld	r18, Z+
    11be:	82 2f       	mov	r24, r18
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	c0 97       	sbiw	r24, 0x30	; 48
    11c4:	0a 97       	sbiw	r24, 0x0a	; 10
    11c6:	c8 f3       	brcs	.-14     	; 0x11ba <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x60>
  ++term;

  if (*term == '.')
    11c8:	2e 32       	cpi	r18, 0x2E	; 46
    11ca:	89 f5       	brne	.+98     	; 0x122e <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0xd4>
  while (isdigit(*++term))
    11cc:	19 81       	ldd	r17, Y+1	; 0x01
    11ce:	81 2f       	mov	r24, r17
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	c0 97       	sbiw	r24, 0x30	; 48
    11d4:	0a 97       	sbiw	r24, 0x0a	; 10
    11d6:	58 f5       	brcc	.+86     	; 0x122e <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0xd4>
    11d8:	22 96       	adiw	r28, 0x02	; 2
    11da:	68 94       	set
    11dc:	77 24       	eor	r7, r7
    11de:	77 f8       	bld	r7, 7
    11e0:	06 e9       	ldi	r16, 0x96	; 150
    11e2:	f8 e9       	ldi	r31, 0x98	; 152
    11e4:	e0 e0       	ldi	r30, 0x00	; 0
  {
    multiplier /= 10;
    11e6:	0f 2e       	mov	r0, r31
    11e8:	fa e0       	ldi	r31, 0x0A	; 10
    11ea:	8f 2e       	mov	r8, r31
    11ec:	91 2c       	mov	r9, r1
    11ee:	a1 2c       	mov	r10, r1
    11f0:	b1 2c       	mov	r11, r1
    11f2:	f0 2d       	mov	r31, r0
    11f4:	67 2d       	mov	r22, r7
    11f6:	70 2f       	mov	r23, r16
    11f8:	8f 2f       	mov	r24, r31
    11fa:	9e 2f       	mov	r25, r30
    11fc:	a5 01       	movw	r20, r10
    11fe:	94 01       	movw	r18, r8
    1200:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__udivmodsi4>
    1204:	72 2e       	mov	r7, r18
    1206:	03 2f       	mov	r16, r19
    1208:	f4 2f       	mov	r31, r20
    120a:	e5 2f       	mov	r30, r21
    tenMillionthsOfMinutes += (*term - '0') * multiplier;
    120c:	a1 2f       	mov	r26, r17
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	d0 97       	sbiw	r26, 0x30	; 48
    1212:	0e 94 cd 0c 	call	0x199a	; 0x199a <__mulshisi3>
    1216:	c6 0e       	add	r12, r22
    1218:	d7 1e       	adc	r13, r23
    121a:	e8 1e       	adc	r14, r24
    121c:	f9 1e       	adc	r15, r25

  while (isdigit(*term))
  ++term;

  if (*term == '.')
  while (isdigit(*++term))
    121e:	19 91       	ld	r17, Y+
    1220:	21 2f       	mov	r18, r17
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	20 53       	subi	r18, 0x30	; 48
    1226:	31 09       	sbc	r19, r1
    1228:	2a 30       	cpi	r18, 0x0A	; 10
    122a:	31 05       	cpc	r19, r1
    122c:	18 f3       	brcs	.-58     	; 0x11f4 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x9a>
  {
    multiplier /= 10;
    tenMillionthsOfMinutes += (*term - '0') * multiplier;
  }

  deg.billionths = (5 * tenMillionthsOfMinutes + 1) / 3;
    122e:	d7 01       	movw	r26, r14
    1230:	c6 01       	movw	r24, r12
    1232:	88 0f       	add	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	aa 1f       	adc	r26, r26
    1238:	bb 1f       	adc	r27, r27
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	aa 1f       	adc	r26, r26
    1240:	bb 1f       	adc	r27, r27
    1242:	c8 0e       	add	r12, r24
    1244:	d9 1e       	adc	r13, r25
    1246:	ea 1e       	adc	r14, r26
    1248:	fb 1e       	adc	r15, r27
    124a:	c7 01       	movw	r24, r14
    124c:	b6 01       	movw	r22, r12
    124e:	6f 5f       	subi	r22, 0xFF	; 255
    1250:	7f 4f       	sbci	r23, 0xFF	; 255
    1252:	8f 4f       	sbci	r24, 0xFF	; 255
    1254:	9f 4f       	sbci	r25, 0xFF	; 255
    1256:	23 e0       	ldi	r18, 0x03	; 3
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	40 e0       	ldi	r20, 0x00	; 0
    125c:	50 e0       	ldi	r21, 0x00	; 0
    125e:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__udivmodsi4>
    1262:	f2 01       	movw	r30, r4
    1264:	22 83       	std	Z+2, r18	; 0x02
    1266:	33 83       	std	Z+3, r19	; 0x03
    1268:	44 83       	std	Z+4, r20	; 0x04
    126a:	55 83       	std	Z+5, r21	; 0x05
  deg.negative = false;
    126c:	16 82       	std	Z+6, r1	; 0x06
}
    126e:	df 91       	pop	r29
    1270:	cf 91       	pop	r28
    1272:	1f 91       	pop	r17
    1274:	0f 91       	pop	r16
    1276:	ff 90       	pop	r15
    1278:	ef 90       	pop	r14
    127a:	df 90       	pop	r13
    127c:	cf 90       	pop	r12
    127e:	bf 90       	pop	r11
    1280:	af 90       	pop	r10
    1282:	9f 90       	pop	r9
    1284:	8f 90       	pop	r8
    1286:	7f 90       	pop	r7
    1288:	5f 90       	pop	r5
    128a:	4f 90       	pop	r4
    128c:	08 95       	ret

0000128e <_ZN15TinyGPSLocation6commitEv>:
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
  rawLatData = rawNewLatData;
    128e:	27 e0       	ldi	r18, 0x07	; 7
    1290:	fc 01       	movw	r30, r24
    1292:	70 96       	adiw	r30, 0x10	; 16
    1294:	dc 01       	movw	r26, r24
    1296:	12 96       	adiw	r26, 0x02	; 2
    1298:	01 90       	ld	r0, Z+
    129a:	0d 92       	st	X+, r0
    129c:	2a 95       	dec	r18
    129e:	e1 f7       	brne	.-8      	; 0x1298 <_ZN15TinyGPSLocation6commitEv+0xa>
  rawLngData = rawNewLngData;
    12a0:	27 e0       	ldi	r18, 0x07	; 7
    12a2:	fc 01       	movw	r30, r24
    12a4:	77 96       	adiw	r30, 0x17	; 23
    12a6:	dc 01       	movw	r26, r24
    12a8:	19 96       	adiw	r26, 0x09	; 9
    12aa:	01 90       	ld	r0, Z+
    12ac:	0d 92       	st	X+, r0
    12ae:	2a 95       	dec	r18
    12b0:	e1 f7       	brne	.-8      	; 0x12aa <_ZN15TinyGPSLocation6commitEv+0x1c>
  // lastCommitTime = millis();
  valid = updated = true;
    12b2:	21 e0       	ldi	r18, 0x01	; 1
    12b4:	fc 01       	movw	r30, r24
    12b6:	21 83       	std	Z+1, r18	; 0x01
    12b8:	20 83       	st	Z, r18
    12ba:	08 95       	ret

000012bc <_ZN15TinyGPSLocation3latEv>:
{
  TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
    12bc:	cf 92       	push	r12
    12be:	df 92       	push	r13
    12c0:	ef 92       	push	r14
    12c2:	ff 92       	push	r15
    12c4:	cf 93       	push	r28
    12c6:	df 93       	push	r29
    12c8:	ec 01       	movw	r28, r24
  updated = false;
    12ca:	19 82       	std	Y+1, r1	; 0x01
  double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
    12cc:	6a 81       	ldd	r22, Y+2	; 0x02
    12ce:	7b 81       	ldd	r23, Y+3	; 0x03
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	0e 94 92 03 	call	0x724	; 0x724 <__floatunsisf>
    12d8:	6b 01       	movw	r12, r22
    12da:	7c 01       	movw	r14, r24
    12dc:	6c 81       	ldd	r22, Y+4	; 0x04
    12de:	7d 81       	ldd	r23, Y+5	; 0x05
    12e0:	8e 81       	ldd	r24, Y+6	; 0x06
    12e2:	9f 81       	ldd	r25, Y+7	; 0x07
    12e4:	0e 94 92 03 	call	0x724	; 0x724 <__floatunsisf>
    12e8:	28 e2       	ldi	r18, 0x28	; 40
    12ea:	3b e6       	ldi	r19, 0x6B	; 107
    12ec:	4e e6       	ldi	r20, 0x6E	; 110
    12ee:	5e e4       	ldi	r21, 0x4E	; 78
    12f0:	0e 94 2a 03 	call	0x654	; 0x654 <__divsf3>
    12f4:	9b 01       	movw	r18, r22
    12f6:	ac 01       	movw	r20, r24
    12f8:	c7 01       	movw	r24, r14
    12fa:	b6 01       	movw	r22, r12
    12fc:	0e 94 c6 02 	call	0x58c	; 0x58c <__addsf3>
  return rawLatData.negative ? -ret : ret;
    1300:	28 85       	ldd	r18, Y+8	; 0x08
    1302:	21 11       	cpse	r18, r1
    1304:	90 58       	subi	r25, 0x80	; 128
}
    1306:	df 91       	pop	r29
    1308:	cf 91       	pop	r28
    130a:	ff 90       	pop	r15
    130c:	ef 90       	pop	r14
    130e:	df 90       	pop	r13
    1310:	cf 90       	pop	r12
    1312:	08 95       	ret

00001314 <_ZN15TinyGPSLocation3lngEv>:

double TinyGPSLocation::lng()
{
    1314:	cf 92       	push	r12
    1316:	df 92       	push	r13
    1318:	ef 92       	push	r14
    131a:	ff 92       	push	r15
    131c:	cf 93       	push	r28
    131e:	df 93       	push	r29
    1320:	ec 01       	movw	r28, r24
  updated = false;
    1322:	19 82       	std	Y+1, r1	; 0x01
  double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
    1324:	69 85       	ldd	r22, Y+9	; 0x09
    1326:	7a 85       	ldd	r23, Y+10	; 0x0a
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	0e 94 92 03 	call	0x724	; 0x724 <__floatunsisf>
    1330:	6b 01       	movw	r12, r22
    1332:	7c 01       	movw	r14, r24
    1334:	6b 85       	ldd	r22, Y+11	; 0x0b
    1336:	7c 85       	ldd	r23, Y+12	; 0x0c
    1338:	8d 85       	ldd	r24, Y+13	; 0x0d
    133a:	9e 85       	ldd	r25, Y+14	; 0x0e
    133c:	0e 94 92 03 	call	0x724	; 0x724 <__floatunsisf>
    1340:	28 e2       	ldi	r18, 0x28	; 40
    1342:	3b e6       	ldi	r19, 0x6B	; 107
    1344:	4e e6       	ldi	r20, 0x6E	; 110
    1346:	5e e4       	ldi	r21, 0x4E	; 78
    1348:	0e 94 2a 03 	call	0x654	; 0x654 <__divsf3>
    134c:	9b 01       	movw	r18, r22
    134e:	ac 01       	movw	r20, r24
    1350:	c7 01       	movw	r24, r14
    1352:	b6 01       	movw	r22, r12
    1354:	0e 94 c6 02 	call	0x58c	; 0x58c <__addsf3>
  return rawLngData.negative ? -ret : ret;
    1358:	2f 85       	ldd	r18, Y+15	; 0x0f
    135a:	21 11       	cpse	r18, r1
    135c:	90 58       	subi	r25, 0x80	; 128
}
    135e:	df 91       	pop	r29
    1360:	cf 91       	pop	r28
    1362:	ff 90       	pop	r15
    1364:	ef 90       	pop	r14
    1366:	df 90       	pop	r13
    1368:	cf 90       	pop	r12
    136a:	08 95       	ret

0000136c <_ZN11TinyGPSTime7setTimeEPKc>:
  // lastCommitTime = millis();
  valid = updated = true;
}

void TinyGPSTime::setTime(const char *term)
{
    136c:	cf 93       	push	r28
    136e:	df 93       	push	r29
    1370:	ec 01       	movw	r28, r24
    1372:	cb 01       	movw	r24, r22
  newTime = (uint32_t)TinyGPSPlus::parseDecimal(term);
    1374:	0e 94 42 08 	call	0x1084	; 0x1084 <_ZN11TinyGPSPlus12parseDecimalEPKc>
    1378:	6e 83       	std	Y+6, r22	; 0x06
    137a:	7f 83       	std	Y+7, r23	; 0x07
    137c:	88 87       	std	Y+8, r24	; 0x08
    137e:	99 87       	std	Y+9, r25	; 0x09
}
    1380:	df 91       	pop	r29
    1382:	cf 91       	pop	r28
    1384:	08 95       	ret

00001386 <_ZN11TinyGPSDate7setDateEPKc>:

void TinyGPSDate::setDate(const char *term)
{
    1386:	cf 93       	push	r28
    1388:	df 93       	push	r29
    138a:	ec 01       	movw	r28, r24
    138c:	cb 01       	movw	r24, r22
  newDate = atol(term);
    138e:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <atol>
    1392:	6e 83       	std	Y+6, r22	; 0x06
    1394:	7f 83       	std	Y+7, r23	; 0x07
    1396:	88 87       	std	Y+8, r24	; 0x08
    1398:	99 87       	std	Y+9, r25	; 0x09
}
    139a:	df 91       	pop	r29
    139c:	cf 91       	pop	r28
    139e:	08 95       	ret

000013a0 <_ZN14TinyGPSDecimal3setEPKc>:
  // lastCommitTime = millis();
  valid = updated = true;
}

void TinyGPSDecimal::set(const char *term)
{
    13a0:	cf 93       	push	r28
    13a2:	df 93       	push	r29
    13a4:	ec 01       	movw	r28, r24
    13a6:	cb 01       	movw	r24, r22
  newval = TinyGPSPlus::parseDecimal(term);
    13a8:	0e 94 42 08 	call	0x1084	; 0x1084 <_ZN11TinyGPSPlus12parseDecimalEPKc>
    13ac:	6a 87       	std	Y+10, r22	; 0x0a
    13ae:	7b 87       	std	Y+11, r23	; 0x0b
    13b0:	8c 87       	std	Y+12, r24	; 0x0c
    13b2:	9d 87       	std	Y+13, r25	; 0x0d
}
    13b4:	df 91       	pop	r29
    13b6:	cf 91       	pop	r28
    13b8:	08 95       	ret

000013ba <_ZN14TinyGPSInteger3setEPKc>:
  // lastCommitTime = millis();
  valid = updated = true;
}

void TinyGPSInteger::set(const char *term)
{
    13ba:	cf 93       	push	r28
    13bc:	df 93       	push	r29
    13be:	ec 01       	movw	r28, r24
    13c0:	cb 01       	movw	r24, r22
  newval = atol(term);
    13c2:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <atol>
    13c6:	6a 87       	std	Y+10, r22	; 0x0a
    13c8:	7b 87       	std	Y+11, r23	; 0x0b
    13ca:	8c 87       	std	Y+12, r24	; 0x0c
    13cc:	9d 87       	std	Y+13, r25	; 0x0d
}
    13ce:	df 91       	pop	r29
    13d0:	cf 91       	pop	r28
    13d2:	08 95       	ret

000013d4 <_ZN13TinyGPSCustom6commitEv>:
  // Insert this item into the GPS tree
  gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
    13d4:	cf 93       	push	r28
    13d6:	df 93       	push	r29
    13d8:	ec 01       	movw	r28, r24
  strcpy(this->buffer, this->stagingBuffer);
    13da:	bc 01       	movw	r22, r24
    13dc:	40 96       	adiw	r24, 0x10	; 16
    13de:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <strcpy>
  // lastCommitTime = millis();
  valid = updated = true;
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	8d a3       	std	Y+37, r24	; 0x25
    13e6:	8c a3       	std	Y+36, r24	; 0x24
}
    13e8:	df 91       	pop	r29
    13ea:	cf 91       	pop	r28
    13ec:	08 95       	ret

000013ee <_ZN13TinyGPSCustom3setEPKc>:

void TinyGPSCustom::set(const char *term)
{
  strncpy(this->stagingBuffer, term, sizeof(this->stagingBuffer));
    13ee:	40 e1       	ldi	r20, 0x10	; 16
    13f0:	50 e0       	ldi	r21, 0x00	; 0
    13f2:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <strncpy>
    13f6:	08 95       	ret

000013f8 <_ZN11TinyGPSPlus16endOfTermHandlerEv>:
#define COMBINE(sentence_type, term_number) (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPSPlus::endOfTermHandler()
{
    13f8:	af 92       	push	r10
    13fa:	bf 92       	push	r11
    13fc:	cf 92       	push	r12
    13fe:	df 92       	push	r13
    1400:	ef 92       	push	r14
    1402:	ff 92       	push	r15
    1404:	1f 93       	push	r17
    1406:	cf 93       	push	r28
    1408:	df 93       	push	r29
    140a:	ec 01       	movw	r28, r24
  // If it's the checksum term, and the checksum checks out, commit
  if (isChecksumTerm)
    140c:	fc 01       	movw	r30, r24
    140e:	eb 57       	subi	r30, 0x7B	; 123
    1410:	ff 4f       	sbci	r31, 0xFF	; 255
    1412:	10 81       	ld	r17, Z
    1414:	11 23       	and	r17, r17
    1416:	09 f4       	brne	.+2      	; 0x141a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x22>
    1418:	dd c0       	rjmp	.+442    	; 0x15d4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1dc>
  {
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
    141a:	31 96       	adiw	r30, 0x01	; 1
    141c:	60 81       	ld	r22, Z
    141e:	0e 94 2d 08 	call	0x105a	; 0x105a <_ZN11TinyGPSPlus7fromHexEc>
    1422:	f8 2e       	mov	r15, r24
    1424:	fe 01       	movw	r30, r28
    1426:	e9 57       	subi	r30, 0x79	; 121
    1428:	ff 4f       	sbci	r31, 0xFF	; 255
    142a:	60 81       	ld	r22, Z
    142c:	ce 01       	movw	r24, r28
    142e:	0e 94 2d 08 	call	0x105a	; 0x105a <_ZN11TinyGPSPlus7fromHexEc>
    1432:	30 e1       	ldi	r19, 0x10	; 16
    1434:	f3 9e       	mul	r15, r19
    1436:	80 0d       	add	r24, r0
    1438:	11 24       	eor	r1, r1
    if (checksum == parity)
    143a:	fe 01       	movw	r30, r28
    143c:	ec 57       	subi	r30, 0x7C	; 124
    143e:	ff 4f       	sbci	r31, 0xFF	; 255
    1440:	90 81       	ld	r25, Z
    1442:	98 13       	cpse	r25, r24
    1444:	b7 c0       	rjmp	.+366    	; 0x15b4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1bc>
    {
      passedChecksumCount++;
    1446:	b5 96       	adiw	r30, 0x25	; 37
    1448:	40 81       	ld	r20, Z
    144a:	51 81       	ldd	r21, Z+1	; 0x01
    144c:	62 81       	ldd	r22, Z+2	; 0x02
    144e:	73 81       	ldd	r23, Z+3	; 0x03
    1450:	4f 5f       	subi	r20, 0xFF	; 255
    1452:	5f 4f       	sbci	r21, 0xFF	; 255
    1454:	6f 4f       	sbci	r22, 0xFF	; 255
    1456:	7f 4f       	sbci	r23, 0xFF	; 255
    1458:	40 83       	st	Z, r20
    145a:	51 83       	std	Z+1, r21	; 0x01
    145c:	62 83       	std	Z+2, r22	; 0x02
    145e:	73 83       	std	Z+3, r23	; 0x03
      if (sentenceHasFix)
    1460:	71 97       	sbiw	r30, 0x11	; 17
    1462:	20 81       	ld	r18, Z
    1464:	22 23       	and	r18, r18
    1466:	69 f0       	breq	.+26     	; 0x1482 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x8a>
      ++sentencesWithFixCount;
    1468:	39 96       	adiw	r30, 0x09	; 9
    146a:	40 81       	ld	r20, Z
    146c:	51 81       	ldd	r21, Z+1	; 0x01
    146e:	62 81       	ldd	r22, Z+2	; 0x02
    1470:	73 81       	ldd	r23, Z+3	; 0x03
    1472:	4f 5f       	subi	r20, 0xFF	; 255
    1474:	5f 4f       	sbci	r21, 0xFF	; 255
    1476:	6f 4f       	sbci	r22, 0xFF	; 255
    1478:	7f 4f       	sbci	r23, 0xFF	; 255
    147a:	40 83       	st	Z, r20
    147c:	51 83       	std	Z+1, r21	; 0x01
    147e:	62 83       	std	Z+2, r22	; 0x02
    1480:	73 83       	std	Z+3, r23	; 0x03

      switch(curSentenceType)
    1482:	fe 01       	movw	r30, r28
    1484:	eb 56       	subi	r30, 0x6B	; 107
    1486:	ff 4f       	sbci	r31, 0xFF	; 255
    1488:	80 81       	ld	r24, Z
    148a:	88 23       	and	r24, r24
    148c:	c9 f1       	breq	.+114    	; 0x1500 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x108>
    148e:	81 30       	cpi	r24, 0x01	; 1
    1490:	09 f0       	breq	.+2      	; 0x1494 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x9c>
    1492:	6d c0       	rjmp	.+218    	; 0x156e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x176>
  return rawLngData.negative ? -ret : ret;
}

void TinyGPSDate::commit()
{
  date = newDate;
    1494:	88 a5       	ldd	r24, Y+40	; 0x28
    1496:	99 a5       	ldd	r25, Y+41	; 0x29
    1498:	aa a5       	ldd	r26, Y+42	; 0x2a
    149a:	bb a5       	ldd	r27, Y+43	; 0x2b
    149c:	8c a3       	std	Y+36, r24	; 0x24
    149e:	9d a3       	std	Y+37, r25	; 0x25
    14a0:	ae a3       	std	Y+38, r26	; 0x26
    14a2:	bf a3       	std	Y+39, r27	; 0x27
  // lastCommitTime = millis();
  valid = updated = true;
    14a4:	31 e0       	ldi	r19, 0x01	; 1
    14a6:	3b a3       	std	Y+35, r19	; 0x23
    14a8:	3a a3       	std	Y+34, r19	; 0x22
}

void TinyGPSTime::commit()
{
  time = newTime;
    14aa:	8e a9       	ldd	r24, Y+54	; 0x36
    14ac:	9f a9       	ldd	r25, Y+55	; 0x37
    14ae:	a8 ad       	ldd	r26, Y+56	; 0x38
    14b0:	b9 ad       	ldd	r27, Y+57	; 0x39
    14b2:	8a ab       	std	Y+50, r24	; 0x32
    14b4:	9b ab       	std	Y+51, r25	; 0x33
    14b6:	ac ab       	std	Y+52, r26	; 0x34
    14b8:	bd ab       	std	Y+53, r27	; 0x35
  // lastCommitTime = millis();
  valid = updated = true;
    14ba:	39 ab       	std	Y+49, r19	; 0x31
    14bc:	38 ab       	std	Y+48, r19	; 0x30
      switch(curSentenceType)
      {
        case GPS_SENTENCE_GPRMC:
        date.commit();
        time.commit();
        if (sentenceHasFix)
    14be:	22 23       	and	r18, r18
    14c0:	09 f4       	brne	.+2      	; 0x14c4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xcc>
    14c2:	55 c0       	rjmp	.+170    	; 0x156e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x176>
        {
          location.commit();
    14c4:	ce 01       	movw	r24, r28
    14c6:	0e 94 47 09 	call	0x128e	; 0x128e <_ZN15TinyGPSLocation6commitEv>
  return time % 100;
}

void TinyGPSDecimal::commit()
{
  val = newval;
    14ca:	fe 01       	movw	r30, r28
    14cc:	e8 5b       	subi	r30, 0xB8	; 184
    14ce:	ff 4f       	sbci	r31, 0xFF	; 255
    14d0:	80 81       	ld	r24, Z
    14d2:	91 81       	ldd	r25, Z+1	; 0x01
    14d4:	a2 81       	ldd	r26, Z+2	; 0x02
    14d6:	b3 81       	ldd	r27, Z+3	; 0x03
    14d8:	34 97       	sbiw	r30, 0x04	; 4
    14da:	80 83       	st	Z, r24
    14dc:	91 83       	std	Z+1, r25	; 0x01
    14de:	a2 83       	std	Z+2, r26	; 0x02
    14e0:	b3 83       	std	Z+3, r27	; 0x03
  // lastCommitTime = millis();
  valid = updated = true;
    14e2:	21 e0       	ldi	r18, 0x01	; 1
    14e4:	2f af       	std	Y+63, r18	; 0x3f
    14e6:	2e af       	std	Y+62, r18	; 0x3e
  return time % 100;
}

void TinyGPSDecimal::commit()
{
  val = newval;
    14e8:	38 96       	adiw	r30, 0x08	; 8
    14ea:	82 85       	ldd	r24, Z+10	; 0x0a
    14ec:	93 85       	ldd	r25, Z+11	; 0x0b
    14ee:	a4 85       	ldd	r26, Z+12	; 0x0c
    14f0:	b5 85       	ldd	r27, Z+13	; 0x0d
    14f2:	86 83       	std	Z+6, r24	; 0x06
    14f4:	97 83       	std	Z+7, r25	; 0x07
    14f6:	a0 87       	std	Z+8, r26	; 0x08
    14f8:	b1 87       	std	Z+9, r27	; 0x09
  // lastCommitTime = millis();
  valid = updated = true;
    14fa:	21 83       	std	Z+1, r18	; 0x01
    14fc:	20 83       	st	Z, r18
    14fe:	37 c0       	rjmp	.+110    	; 0x156e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x176>
  valid = updated = true;
}

void TinyGPSTime::commit()
{
  time = newTime;
    1500:	8e a9       	ldd	r24, Y+54	; 0x36
    1502:	9f a9       	ldd	r25, Y+55	; 0x37
    1504:	a8 ad       	ldd	r26, Y+56	; 0x38
    1506:	b9 ad       	ldd	r27, Y+57	; 0x39
    1508:	8a ab       	std	Y+50, r24	; 0x32
    150a:	9b ab       	std	Y+51, r25	; 0x33
    150c:	ac ab       	std	Y+52, r26	; 0x34
    150e:	bd ab       	std	Y+53, r27	; 0x35
  // lastCommitTime = millis();
  valid = updated = true;
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	89 ab       	std	Y+49, r24	; 0x31
    1514:	88 ab       	std	Y+48, r24	; 0x30
          course.commit();
        }
        break;
        case GPS_SENTENCE_GPGGA:
        time.commit();
        if (sentenceHasFix)
    1516:	22 23       	and	r18, r18
    1518:	89 f0       	breq	.+34     	; 0x153c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x144>
        {
          location.commit();
    151a:	ce 01       	movw	r24, r28
    151c:	0e 94 47 09 	call	0x128e	; 0x128e <_ZN15TinyGPSLocation6commitEv>
  return time % 100;
}

void TinyGPSDecimal::commit()
{
  val = newval;
    1520:	fe 01       	movw	r30, r28
    1522:	e6 5a       	subi	r30, 0xA6	; 166
    1524:	ff 4f       	sbci	r31, 0xFF	; 255
    1526:	82 85       	ldd	r24, Z+10	; 0x0a
    1528:	93 85       	ldd	r25, Z+11	; 0x0b
    152a:	a4 85       	ldd	r26, Z+12	; 0x0c
    152c:	b5 85       	ldd	r27, Z+13	; 0x0d
    152e:	86 83       	std	Z+6, r24	; 0x06
    1530:	97 83       	std	Z+7, r25	; 0x07
    1532:	a0 87       	std	Z+8, r26	; 0x08
    1534:	b1 87       	std	Z+9, r27	; 0x09
  // lastCommitTime = millis();
  valid = updated = true;
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	81 83       	std	Z+1, r24	; 0x01
    153a:	80 83       	st	Z, r24
  newval = TinyGPSPlus::parseDecimal(term);
}

void TinyGPSInteger::commit()
{
  val = newval;
    153c:	fe 01       	movw	r30, r28
    153e:	e8 59       	subi	r30, 0x98	; 152
    1540:	ff 4f       	sbci	r31, 0xFF	; 255
    1542:	82 85       	ldd	r24, Z+10	; 0x0a
    1544:	93 85       	ldd	r25, Z+11	; 0x0b
    1546:	a4 85       	ldd	r26, Z+12	; 0x0c
    1548:	b5 85       	ldd	r27, Z+13	; 0x0d
    154a:	86 83       	std	Z+6, r24	; 0x06
    154c:	97 83       	std	Z+7, r25	; 0x07
    154e:	a0 87       	std	Z+8, r26	; 0x08
    1550:	b1 87       	std	Z+9, r27	; 0x09
  // lastCommitTime = millis();
  valid = updated = true;
    1552:	21 e0       	ldi	r18, 0x01	; 1
    1554:	21 83       	std	Z+1, r18	; 0x01
    1556:	20 83       	st	Z, r18
  return time % 100;
}

void TinyGPSDecimal::commit()
{
  val = newval;
    1558:	3e 96       	adiw	r30, 0x0e	; 14
    155a:	82 85       	ldd	r24, Z+10	; 0x0a
    155c:	93 85       	ldd	r25, Z+11	; 0x0b
    155e:	a4 85       	ldd	r26, Z+12	; 0x0c
    1560:	b5 85       	ldd	r27, Z+13	; 0x0d
    1562:	86 83       	std	Z+6, r24	; 0x06
    1564:	97 83       	std	Z+7, r25	; 0x07
    1566:	a0 87       	std	Z+8, r26	; 0x08
    1568:	b1 87       	std	Z+9, r27	; 0x09
  // lastCommitTime = millis();
  valid = updated = true;
    156a:	21 83       	std	Z+1, r18	; 0x01
    156c:	20 83       	st	Z, r18
        hdop.commit();
        break;
      }

      // Commit all custom listeners of this sentence type
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
    156e:	fe 01       	movw	r30, r28
    1570:	e5 56       	subi	r30, 0x65	; 101
    1572:	ff 4f       	sbci	r31, 0xFF	; 255
    1574:	e0 80       	ld	r14, Z
    1576:	f1 80       	ldd	r15, Z+1	; 0x01
    1578:	e1 14       	cp	r14, r1
    157a:	f1 04       	cpc	r15, r1
    157c:	09 f4       	brne	.+2      	; 0x1580 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
    157e:	44 c1       	rjmp	.+648    	; 0x1808 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x410>
    1580:	ef 01       	movw	r28, r30
    1582:	0c c0       	rjmp	.+24     	; 0x159c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1a4>
      p->commit();
    1584:	c7 01       	movw	r24, r14
    1586:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <_ZN13TinyGPSCustom6commitEv>
        hdop.commit();
        break;
      }

      // Commit all custom listeners of this sentence type
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
    158a:	d7 01       	movw	r26, r14
    158c:	9a 96       	adiw	r26, 0x2a	; 42
    158e:	ed 90       	ld	r14, X+
    1590:	fc 90       	ld	r15, X
    1592:	9b 97       	sbiw	r26, 0x2b	; 43
    1594:	e1 14       	cp	r14, r1
    1596:	f1 04       	cpc	r15, r1
    1598:	09 f4       	brne	.+2      	; 0x159c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1a4>
    159a:	36 c1       	rjmp	.+620    	; 0x1808 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x410>
    159c:	e8 81       	ld	r30, Y
    159e:	f9 81       	ldd	r31, Y+1	; 0x01
    15a0:	66 a1       	ldd	r22, Z+38	; 0x26
    15a2:	77 a1       	ldd	r23, Z+39	; 0x27
    15a4:	f7 01       	movw	r30, r14
    15a6:	86 a1       	ldd	r24, Z+38	; 0x26
    15a8:	97 a1       	ldd	r25, Z+39	; 0x27
    15aa:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <strcmp>
    15ae:	89 2b       	or	r24, r25
    15b0:	49 f3       	breq	.-46     	; 0x1584 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x18c>
    15b2:	2a c1       	rjmp	.+596    	; 0x1808 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x410>
      return true;
    }

    else
    {
      ++failedChecksumCount;
    15b4:	cb 55       	subi	r28, 0x5B	; 91
    15b6:	df 4f       	sbci	r29, 0xFF	; 255
    15b8:	48 81       	ld	r20, Y
    15ba:	59 81       	ldd	r21, Y+1	; 0x01
    15bc:	6a 81       	ldd	r22, Y+2	; 0x02
    15be:	7b 81       	ldd	r23, Y+3	; 0x03
    15c0:	4f 5f       	subi	r20, 0xFF	; 255
    15c2:	5f 4f       	sbci	r21, 0xFF	; 255
    15c4:	6f 4f       	sbci	r22, 0xFF	; 255
    15c6:	7f 4f       	sbci	r23, 0xFF	; 255
    15c8:	48 83       	st	Y, r20
    15ca:	59 83       	std	Y+1, r21	; 0x01
    15cc:	6a 83       	std	Y+2, r22	; 0x02
    15ce:	7b 83       	std	Y+3, r23	; 0x03
    }

    return false;
    15d0:	10 e0       	ldi	r17, 0x00	; 0
    15d2:	1a c1       	rjmp	.+564    	; 0x1808 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x410>
  }

  // the first term determines the sentence type
  if (curTermNumber == 0)
    15d4:	fc 01       	movw	r30, r24
    15d6:	ea 56       	subi	r30, 0x6A	; 106
    15d8:	ff 4f       	sbci	r31, 0xFF	; 255
    15da:	80 81       	ld	r24, Z
    15dc:	81 11       	cpse	r24, r1
    15de:	59 c0       	rjmp	.+178    	; 0x1692 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x29a>
  {
    if (!strcmp(term, _GPRMCterm))
    15e0:	6e 01       	movw	r12, r28
    15e2:	f6 e8       	ldi	r31, 0x86	; 134
    15e4:	cf 0e       	add	r12, r31
    15e6:	d1 1c       	adc	r13, r1
    15e8:	6b e6       	ldi	r22, 0x6B	; 107
    15ea:	71 e0       	ldi	r23, 0x01	; 1
    15ec:	c6 01       	movw	r24, r12
    15ee:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <strcmp>
    15f2:	89 2b       	or	r24, r25
    15f4:	31 f4       	brne	.+12     	; 0x1602 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x20a>
    curSentenceType = GPS_SENTENCE_GPRMC;
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	fe 01       	movw	r30, r28
    15fa:	eb 56       	subi	r30, 0x6B	; 107
    15fc:	ff 4f       	sbci	r31, 0xFF	; 255
    15fe:	80 83       	st	Z, r24
    1600:	11 c0       	rjmp	.+34     	; 0x1624 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x22c>
    else if (!strcmp(term, _GPGGAterm))
    1602:	61 e7       	ldi	r22, 0x71	; 113
    1604:	71 e0       	ldi	r23, 0x01	; 1
    1606:	c6 01       	movw	r24, r12
    1608:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <strcmp>
    160c:	89 2b       	or	r24, r25
    160e:	29 f4       	brne	.+10     	; 0x161a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x222>
    curSentenceType = GPS_SENTENCE_GPGGA;
    1610:	fe 01       	movw	r30, r28
    1612:	eb 56       	subi	r30, 0x6B	; 107
    1614:	ff 4f       	sbci	r31, 0xFF	; 255
    1616:	10 82       	st	Z, r1
    1618:	05 c0       	rjmp	.+10     	; 0x1624 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x22c>
    else
    curSentenceType = GPS_SENTENCE_OTHER;
    161a:	82 e0       	ldi	r24, 0x02	; 2
    161c:	fe 01       	movw	r30, r28
    161e:	eb 56       	subi	r30, 0x6B	; 107
    1620:	ff 4f       	sbci	r31, 0xFF	; 255
    1622:	80 83       	st	Z, r24

    // Any custom candidates of this sentence type?
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
    1624:	fe 01       	movw	r30, r28
    1626:	e7 56       	subi	r30, 0x67	; 103
    1628:	ff 4f       	sbci	r31, 0xFF	; 255
    162a:	e0 80       	ld	r14, Z
    162c:	f1 80       	ldd	r15, Z+1	; 0x01
    162e:	32 96       	adiw	r30, 0x02	; 2
    1630:	f1 82       	std	Z+1, r15	; 0x01
    1632:	e0 82       	st	Z, r14
    1634:	e1 14       	cp	r14, r1
    1636:	f1 04       	cpc	r15, r1
    1638:	09 f4       	brne	.+2      	; 0x163c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x244>
    163a:	e6 c0       	rjmp	.+460    	; 0x1808 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x410>
    163c:	5f 01       	movw	r10, r30
    163e:	0c c0       	rjmp	.+24     	; 0x1658 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x260>
    1640:	d7 01       	movw	r26, r14
    1642:	9a 96       	adiw	r26, 0x2a	; 42
    1644:	ed 90       	ld	r14, X+
    1646:	fc 90       	ld	r15, X
    1648:	9b 97       	sbiw	r26, 0x2b	; 43
    164a:	f5 01       	movw	r30, r10
    164c:	f1 82       	std	Z+1, r15	; 0x01
    164e:	e0 82       	st	Z, r14
    1650:	e1 14       	cp	r14, r1
    1652:	f1 04       	cpc	r15, r1
    1654:	09 f4       	brne	.+2      	; 0x1658 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x260>
    1656:	d8 c0       	rjmp	.+432    	; 0x1808 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x410>
    1658:	b6 01       	movw	r22, r12
    165a:	d7 01       	movw	r26, r14
    165c:	96 96       	adiw	r26, 0x26	; 38
    165e:	8d 91       	ld	r24, X+
    1660:	9c 91       	ld	r25, X
    1662:	97 97       	sbiw	r26, 0x27	; 39
    1664:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <strcmp>
    1668:	99 23       	and	r25, r25
    166a:	54 f3       	brlt	.-44     	; 0x1640 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x248>
    if (customCandidates != NULL && strcmp(customCandidates->sentenceName, term) > 0)
    166c:	e1 14       	cp	r14, r1
    166e:	f1 04       	cpc	r15, r1
    1670:	09 f4       	brne	.+2      	; 0x1674 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x27c>
    1672:	ca c0       	rjmp	.+404    	; 0x1808 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x410>
    1674:	b6 01       	movw	r22, r12
    1676:	f7 01       	movw	r30, r14
    1678:	86 a1       	ldd	r24, Z+38	; 0x26
    167a:	97 a1       	ldd	r25, Z+39	; 0x27
    167c:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <strcmp>
    1680:	18 16       	cp	r1, r24
    1682:	19 06       	cpc	r1, r25
    1684:	0c f0       	brlt	.+2      	; 0x1688 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x290>
    1686:	c0 c0       	rjmp	.+384    	; 0x1808 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x410>
    customCandidates = NULL;
    1688:	c5 56       	subi	r28, 0x65	; 101
    168a:	df 4f       	sbci	r29, 0xFF	; 255
    168c:	19 82       	std	Y+1, r1	; 0x01
    168e:	18 82       	st	Y, r1
    1690:	bb c0       	rjmp	.+374    	; 0x1808 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x410>

    return false;
  }

  if (curSentenceType != GPS_SENTENCE_OTHER && term[0])
    1692:	fe 01       	movw	r30, r28
    1694:	eb 56       	subi	r30, 0x6B	; 107
    1696:	ff 4f       	sbci	r31, 0xFF	; 255
    1698:	90 81       	ld	r25, Z
    169a:	92 30       	cpi	r25, 0x02	; 2
    169c:	09 f4       	brne	.+2      	; 0x16a0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2a8>
    169e:	7e c0       	rjmp	.+252    	; 0x179c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3a4>
    16a0:	3f 97       	sbiw	r30, 0x0f	; 15
    16a2:	20 81       	ld	r18, Z
    16a4:	22 23       	and	r18, r18
    16a6:	09 f4       	brne	.+2      	; 0x16aa <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2b2>
    16a8:	79 c0       	rjmp	.+242    	; 0x179c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3a4>
  switch(COMBINE(curSentenceType, curTermNumber))
    16aa:	30 e2       	ldi	r19, 0x20	; 32
    16ac:	93 9f       	mul	r25, r19
    16ae:	f0 01       	movw	r30, r0
    16b0:	11 24       	eor	r1, r1
    16b2:	e8 2b       	or	r30, r24
    16b4:	31 97       	sbiw	r30, 0x01	; 1
    16b6:	e9 32       	cpi	r30, 0x29	; 41
    16b8:	f1 05       	cpc	r31, r1
    16ba:	08 f0       	brcs	.+2      	; 0x16be <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2c6>
    16bc:	6f c0       	rjmp	.+222    	; 0x179c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3a4>
    16be:	ec 5c       	subi	r30, 0xCC	; 204
    16c0:	ff 4f       	sbci	r31, 0xFF	; 255
    16c2:	0c 94 bc 0c 	jmp	0x1978	; 0x1978 <__tablejump2__>
  {
    case COMBINE(GPS_SENTENCE_GPRMC, 1): // Time in both sentences
    case COMBINE(GPS_SENTENCE_GPGGA, 1):
    time.setTime(term);
    16c6:	be 01       	movw	r22, r28
    16c8:	6a 57       	subi	r22, 0x7A	; 122
    16ca:	7f 4f       	sbci	r23, 0xFF	; 255
    16cc:	ce 01       	movw	r24, r28
    16ce:	c0 96       	adiw	r24, 0x30	; 48
    16d0:	0e 94 b6 09 	call	0x136c	; 0x136c <_ZN11TinyGPSTime7setTimeEPKc>
    break;
    16d4:	63 c0       	rjmp	.+198    	; 0x179c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3a4>
    case COMBINE(GPS_SENTENCE_GPRMC, 2): // GPRMC validity
    sentenceHasFix = term[0] == 'A';
    16d6:	fe 01       	movw	r30, r28
    16d8:	e8 56       	subi	r30, 0x68	; 104
    16da:	ff 4f       	sbci	r31, 0xFF	; 255
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	21 34       	cpi	r18, 0x41	; 65
    16e0:	09 f0       	breq	.+2      	; 0x16e4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ec>
    16e2:	80 e0       	ldi	r24, 0x00	; 0
    16e4:	80 83       	st	Z, r24
    break;
    16e6:	5a c0       	rjmp	.+180    	; 0x179c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3a4>
  valid = updated = true;
}

void TinyGPSLocation::setLatitude(const char *term)
{
  TinyGPSPlus::parseDegrees(term, rawNewLatData);
    16e8:	be 01       	movw	r22, r28
    16ea:	60 5f       	subi	r22, 0xF0	; 240
    16ec:	7f 4f       	sbci	r23, 0xFF	; 255
    16ee:	ce 01       	movw	r24, r28
    16f0:	8a 57       	subi	r24, 0x7A	; 122
    16f2:	9f 4f       	sbci	r25, 0xFF	; 255
    16f4:	0e 94 ad 08 	call	0x115a	; 0x115a <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
    16f8:	51 c0       	rjmp	.+162    	; 0x179c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3a4>
    case COMBINE(GPS_SENTENCE_GPGGA, 2):
    location.setLatitude(term);
    break;
    case COMBINE(GPS_SENTENCE_GPRMC, 4): // N/S
    case COMBINE(GPS_SENTENCE_GPGGA, 3):
    location.rawNewLatData.negative = term[0] == 'S';
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	23 35       	cpi	r18, 0x53	; 83
    16fe:	09 f0       	breq	.+2      	; 0x1702 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x30a>
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	8e 8b       	std	Y+22, r24	; 0x16
    break;
    1704:	4b c0       	rjmp	.+150    	; 0x179c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3a4>
  TinyGPSPlus::parseDegrees(term, rawNewLatData);
}

void TinyGPSLocation::setLongitude(const char *term)
{
  TinyGPSPlus::parseDegrees(term, rawNewLngData);
    1706:	be 01       	movw	r22, r28
    1708:	69 5e       	subi	r22, 0xE9	; 233
    170a:	7f 4f       	sbci	r23, 0xFF	; 255
    170c:	ce 01       	movw	r24, r28
    170e:	8a 57       	subi	r24, 0x7A	; 122
    1710:	9f 4f       	sbci	r25, 0xFF	; 255
    1712:	0e 94 ad 08 	call	0x115a	; 0x115a <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
    1716:	42 c0       	rjmp	.+132    	; 0x179c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3a4>
    case COMBINE(GPS_SENTENCE_GPGGA, 4):
    location.setLongitude(term);
    break;
    case COMBINE(GPS_SENTENCE_GPRMC, 6): // E/W
    case COMBINE(GPS_SENTENCE_GPGGA, 5):
    location.rawNewLngData.negative = term[0] == 'W';
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	27 35       	cpi	r18, 0x57	; 87
    171c:	09 f0       	breq	.+2      	; 0x1720 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x328>
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	8d 8f       	std	Y+29, r24	; 0x1d
    break;
    1722:	3c c0       	rjmp	.+120    	; 0x179c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3a4>
    case COMBINE(GPS_SENTENCE_GPRMC, 7): // Speed (GPRMC)
    speed.set(term);
    1724:	be 01       	movw	r22, r28
    1726:	6a 57       	subi	r22, 0x7A	; 122
    1728:	7f 4f       	sbci	r23, 0xFF	; 255
    172a:	ce 01       	movw	r24, r28
    172c:	ce 96       	adiw	r24, 0x3e	; 62
    172e:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <_ZN14TinyGPSDecimal3setEPKc>
    break;
    1732:	34 c0       	rjmp	.+104    	; 0x179c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3a4>
    case COMBINE(GPS_SENTENCE_GPRMC, 8): // Course (GPRMC)
    course.set(term);
    1734:	be 01       	movw	r22, r28
    1736:	6a 57       	subi	r22, 0x7A	; 122
    1738:	7f 4f       	sbci	r23, 0xFF	; 255
    173a:	ce 01       	movw	r24, r28
    173c:	84 5b       	subi	r24, 0xB4	; 180
    173e:	9f 4f       	sbci	r25, 0xFF	; 255
    1740:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <_ZN14TinyGPSDecimal3setEPKc>
    break;
    1744:	2b c0       	rjmp	.+86     	; 0x179c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3a4>
    case COMBINE(GPS_SENTENCE_GPRMC, 9): // Date (GPRMC)
    date.setDate(term);
    1746:	be 01       	movw	r22, r28
    1748:	6a 57       	subi	r22, 0x7A	; 122
    174a:	7f 4f       	sbci	r23, 0xFF	; 255
    174c:	ce 01       	movw	r24, r28
    174e:	82 96       	adiw	r24, 0x22	; 34
    1750:	0e 94 c3 09 	call	0x1386	; 0x1386 <_ZN11TinyGPSDate7setDateEPKc>
    break;
    1754:	23 c0       	rjmp	.+70     	; 0x179c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3a4>
    case COMBINE(GPS_SENTENCE_GPGGA, 6): // Fix data (GPGGA)
    sentenceHasFix = term[0] > '0';
    1756:	fe 01       	movw	r30, r28
    1758:	e8 56       	subi	r30, 0x68	; 104
    175a:	ff 4f       	sbci	r31, 0xFF	; 255
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	21 33       	cpi	r18, 0x31	; 49
    1760:	08 f4       	brcc	.+2      	; 0x1764 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	80 83       	st	Z, r24
    break;
    1766:	1a c0       	rjmp	.+52     	; 0x179c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3a4>
    case COMBINE(GPS_SENTENCE_GPGGA, 7): // Satellites used (GPGGA)
    satellites.set(term);
    1768:	be 01       	movw	r22, r28
    176a:	6a 57       	subi	r22, 0x7A	; 122
    176c:	7f 4f       	sbci	r23, 0xFF	; 255
    176e:	ce 01       	movw	r24, r28
    1770:	88 59       	subi	r24, 0x98	; 152
    1772:	9f 4f       	sbci	r25, 0xFF	; 255
    1774:	0e 94 dd 09 	call	0x13ba	; 0x13ba <_ZN14TinyGPSInteger3setEPKc>
    break;
    1778:	11 c0       	rjmp	.+34     	; 0x179c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3a4>
    case COMBINE(GPS_SENTENCE_GPGGA, 8): // HDOP
    hdop.set(term);
    177a:	be 01       	movw	r22, r28
    177c:	6a 57       	subi	r22, 0x7A	; 122
    177e:	7f 4f       	sbci	r23, 0xFF	; 255
    1780:	ce 01       	movw	r24, r28
    1782:	8a 58       	subi	r24, 0x8A	; 138
    1784:	9f 4f       	sbci	r25, 0xFF	; 255
    1786:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <_ZN14TinyGPSDecimal3setEPKc>
    break;
    178a:	08 c0       	rjmp	.+16     	; 0x179c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3a4>
    case COMBINE(GPS_SENTENCE_GPGGA, 9): // Altitude (GPGGA)
    altitude.set(term);
    178c:	be 01       	movw	r22, r28
    178e:	6a 57       	subi	r22, 0x7A	; 122
    1790:	7f 4f       	sbci	r23, 0xFF	; 255
    1792:	ce 01       	movw	r24, r28
    1794:	86 5a       	subi	r24, 0xA6	; 166
    1796:	9f 4f       	sbci	r25, 0xFF	; 255
    1798:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <_ZN14TinyGPSDecimal3setEPKc>
    break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
    179c:	fe 01       	movw	r30, r28
    179e:	e5 56       	subi	r30, 0x65	; 101
    17a0:	ff 4f       	sbci	r31, 0xFF	; 255
    17a2:	e0 80       	ld	r14, Z
    17a4:	f1 80       	ldd	r15, Z+1	; 0x01
    17a6:	e1 14       	cp	r14, r1
    17a8:	f1 04       	cpc	r15, r1
    17aa:	71 f1       	breq	.+92     	; 0x1808 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x410>
    17ac:	6f 01       	movw	r12, r30
    17ae:	5e 01       	movw	r10, r28
    17b0:	96 e9       	ldi	r25, 0x96	; 150
    17b2:	a9 0e       	add	r10, r25
    17b4:	b1 1c       	adc	r11, r1
  if (p->termNumber == curTermNumber)
  p->set(term);
    17b6:	ca 57       	subi	r28, 0x7A	; 122
    17b8:	df 4f       	sbci	r29, 0xFF	; 255
    17ba:	0f c0       	rjmp	.+30     	; 0x17da <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3e2>
    break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
  if (p->termNumber == curTermNumber)
    17bc:	28 17       	cp	r18, r24
    17be:	39 07       	cpc	r19, r25
    17c0:	21 f4       	brne	.+8      	; 0x17ca <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3d2>
  p->set(term);
    17c2:	be 01       	movw	r22, r28
    17c4:	c7 01       	movw	r24, r14
    17c6:	0e 94 f7 09 	call	0x13ee	; 0x13ee <_ZN13TinyGPSCustom3setEPKc>
    altitude.set(term);
    break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
    17ca:	d7 01       	movw	r26, r14
    17cc:	9a 96       	adiw	r26, 0x2a	; 42
    17ce:	ed 90       	ld	r14, X+
    17d0:	fc 90       	ld	r15, X
    17d2:	9b 97       	sbiw	r26, 0x2b	; 43
    17d4:	e1 14       	cp	r14, r1
    17d6:	f1 04       	cpc	r15, r1
    17d8:	b9 f0       	breq	.+46     	; 0x1808 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x410>
    17da:	d6 01       	movw	r26, r12
    17dc:	ed 91       	ld	r30, X+
    17de:	fc 91       	ld	r31, X
    17e0:	66 a1       	ldd	r22, Z+38	; 0x26
    17e2:	77 a1       	ldd	r23, Z+39	; 0x27
    17e4:	f7 01       	movw	r30, r14
    17e6:	86 a1       	ldd	r24, Z+38	; 0x26
    17e8:	97 a1       	ldd	r25, Z+39	; 0x27
    17ea:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <strcmp>
    17ee:	89 2b       	or	r24, r25
    17f0:	59 f4       	brne	.+22     	; 0x1808 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x410>
    17f2:	d7 01       	movw	r26, r14
    17f4:	98 96       	adiw	r26, 0x28	; 40
    17f6:	2d 91       	ld	r18, X+
    17f8:	3c 91       	ld	r19, X
    17fa:	99 97       	sbiw	r26, 0x29	; 41
    17fc:	f5 01       	movw	r30, r10
    17fe:	80 81       	ld	r24, Z
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	82 17       	cp	r24, r18
    1804:	93 07       	cpc	r25, r19
    1806:	d4 f6       	brge	.-76     	; 0x17bc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3c4>
  if (p->termNumber == curTermNumber)
  p->set(term);

  return false;
}
    1808:	81 2f       	mov	r24, r17
    180a:	df 91       	pop	r29
    180c:	cf 91       	pop	r28
    180e:	1f 91       	pop	r17
    1810:	ff 90       	pop	r15
    1812:	ef 90       	pop	r14
    1814:	df 90       	pop	r13
    1816:	cf 90       	pop	r12
    1818:	bf 90       	pop	r11
    181a:	af 90       	pop	r10
    181c:	08 95       	ret

0000181e <_ZN11TinyGPSPlus6encodeEc>:
//
// public methods
//

bool TinyGPSPlus::encode(char c)
{
    181e:	1f 93       	push	r17
    1820:	cf 93       	push	r28
    1822:	df 93       	push	r29
    1824:	ec 01       	movw	r28, r24
    1826:	16 2f       	mov	r17, r22
  ++encodedCharCount;
    1828:	fc 01       	movw	r30, r24
    182a:	e3 56       	subi	r30, 0x63	; 99
    182c:	ff 4f       	sbci	r31, 0xFF	; 255
    182e:	40 81       	ld	r20, Z
    1830:	51 81       	ldd	r21, Z+1	; 0x01
    1832:	62 81       	ldd	r22, Z+2	; 0x02
    1834:	73 81       	ldd	r23, Z+3	; 0x03
    1836:	4f 5f       	subi	r20, 0xFF	; 255
    1838:	5f 4f       	sbci	r21, 0xFF	; 255
    183a:	6f 4f       	sbci	r22, 0xFF	; 255
    183c:	7f 4f       	sbci	r23, 0xFF	; 255
    183e:	40 83       	st	Z, r20
    1840:	51 83       	std	Z+1, r21	; 0x01
    1842:	62 83       	std	Z+2, r22	; 0x02
    1844:	73 83       	std	Z+3, r23	; 0x03

  switch(c)
    1846:	14 32       	cpi	r17, 0x24	; 36
    1848:	99 f1       	breq	.+102    	; 0x18b0 <_ZN11TinyGPSPlus6encodeEc+0x92>
    184a:	30 f4       	brcc	.+12     	; 0x1858 <_ZN11TinyGPSPlus6encodeEc+0x3a>
    184c:	1a 30       	cpi	r17, 0x0A	; 10
    184e:	79 f0       	breq	.+30     	; 0x186e <_ZN11TinyGPSPlus6encodeEc+0x50>
    1850:	1d 30       	cpi	r17, 0x0D	; 13
    1852:	09 f0       	breq	.+2      	; 0x1856 <_ZN11TinyGPSPlus6encodeEc+0x38>
    1854:	3f c0       	rjmp	.+126    	; 0x18d4 <_ZN11TinyGPSPlus6encodeEc+0xb6>
    1856:	0b c0       	rjmp	.+22     	; 0x186e <_ZN11TinyGPSPlus6encodeEc+0x50>
    1858:	1a 32       	cpi	r17, 0x2A	; 42
    185a:	49 f0       	breq	.+18     	; 0x186e <_ZN11TinyGPSPlus6encodeEc+0x50>
    185c:	1c 32       	cpi	r17, 0x2C	; 44
    185e:	d1 f5       	brne	.+116    	; 0x18d4 <_ZN11TinyGPSPlus6encodeEc+0xb6>
  {
    case ',': // term terminators
    parity ^= (uint8_t)c;
    1860:	fc 01       	movw	r30, r24
    1862:	ec 57       	subi	r30, 0x7C	; 124
    1864:	ff 4f       	sbci	r31, 0xFF	; 255
    1866:	90 81       	ld	r25, Z
    1868:	8c e2       	ldi	r24, 0x2C	; 44
    186a:	89 27       	eor	r24, r25
    186c:	80 83       	st	Z, r24
    case '\r':
    case '\n':
    case '*':
    {
      bool isValidSentence = false;
      if (curTermOffset < sizeof(term))
    186e:	fe 01       	movw	r30, r28
    1870:	e9 56       	subi	r30, 0x69	; 105
    1872:	ff 4f       	sbci	r31, 0xFF	; 255
    1874:	80 81       	ld	r24, Z
    1876:	8f 30       	cpi	r24, 0x0F	; 15
    1878:	50 f4       	brcc	.+20     	; 0x188e <_ZN11TinyGPSPlus6encodeEc+0x70>
      {
        term[curTermOffset] = 0;
    187a:	fe 01       	movw	r30, r28
    187c:	e8 0f       	add	r30, r24
    187e:	f1 1d       	adc	r31, r1
    1880:	ea 57       	subi	r30, 0x7A	; 122
    1882:	ff 4f       	sbci	r31, 0xFF	; 255
    1884:	10 82       	st	Z, r1
        isValidSentence = endOfTermHandler();
    1886:	ce 01       	movw	r24, r28
    1888:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <_ZN11TinyGPSPlus16endOfTermHandlerEv>
    188c:	01 c0       	rjmp	.+2      	; 0x1890 <_ZN11TinyGPSPlus6encodeEc+0x72>
    parity ^= (uint8_t)c;
    case '\r':
    case '\n':
    case '*':
    {
      bool isValidSentence = false;
    188e:	80 e0       	ldi	r24, 0x00	; 0
      if (curTermOffset < sizeof(term))
      {
        term[curTermOffset] = 0;
        isValidSentence = endOfTermHandler();
      }
      ++curTermNumber;
    1890:	fe 01       	movw	r30, r28
    1892:	ea 56       	subi	r30, 0x6A	; 106
    1894:	ff 4f       	sbci	r31, 0xFF	; 255
    1896:	90 81       	ld	r25, Z
    1898:	9f 5f       	subi	r25, 0xFF	; 255
    189a:	90 83       	st	Z, r25
      curTermOffset = 0;
    189c:	31 96       	adiw	r30, 0x01	; 1
    189e:	10 82       	st	Z, r1
      isChecksumTerm = c == '*';
    18a0:	cb 57       	subi	r28, 0x7B	; 123
    18a2:	df 4f       	sbci	r29, 0xFF	; 255
    18a4:	91 e0       	ldi	r25, 0x01	; 1
    18a6:	1a 32       	cpi	r17, 0x2A	; 42
    18a8:	09 f0       	breq	.+2      	; 0x18ac <_ZN11TinyGPSPlus6encodeEc+0x8e>
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	98 83       	st	Y, r25
      return isValidSentence;
    18ae:	2e c0       	rjmp	.+92     	; 0x190c <_ZN11TinyGPSPlus6encodeEc+0xee>
    }
    break;

    case '$': // sentence begin
    curTermNumber = curTermOffset = 0;
    18b0:	fc 01       	movw	r30, r24
    18b2:	e9 56       	subi	r30, 0x69	; 105
    18b4:	ff 4f       	sbci	r31, 0xFF	; 255
    18b6:	10 82       	st	Z, r1
    18b8:	31 97       	sbiw	r30, 0x01	; 1
    18ba:	10 82       	st	Z, r1
    parity = 0;
    18bc:	72 97       	sbiw	r30, 0x12	; 18
    18be:	10 82       	st	Z, r1
    curSentenceType = GPS_SENTENCE_OTHER;
    18c0:	71 96       	adiw	r30, 0x11	; 17
    18c2:	82 e0       	ldi	r24, 0x02	; 2
    18c4:	80 83       	st	Z, r24
    isChecksumTerm = false;
    18c6:	70 97       	sbiw	r30, 0x10	; 16
    18c8:	10 82       	st	Z, r1
    sentenceHasFix = false;
    18ca:	c8 56       	subi	r28, 0x68	; 104
    18cc:	df 4f       	sbci	r29, 0xFF	; 255
    18ce:	18 82       	st	Y, r1
    return false;
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	1c c0       	rjmp	.+56     	; 0x190c <_ZN11TinyGPSPlus6encodeEc+0xee>

    default: // ordinary characters
    if (curTermOffset < sizeof(term) - 1)
    18d4:	fe 01       	movw	r30, r28
    18d6:	e9 56       	subi	r30, 0x69	; 105
    18d8:	ff 4f       	sbci	r31, 0xFF	; 255
    18da:	80 81       	ld	r24, Z
    18dc:	8e 30       	cpi	r24, 0x0E	; 14
    18de:	48 f4       	brcc	.+18     	; 0x18f2 <_ZN11TinyGPSPlus6encodeEc+0xd4>
    term[curTermOffset++] = c;
    18e0:	91 e0       	ldi	r25, 0x01	; 1
    18e2:	98 0f       	add	r25, r24
    18e4:	90 83       	st	Z, r25
    18e6:	fe 01       	movw	r30, r28
    18e8:	e8 0f       	add	r30, r24
    18ea:	f1 1d       	adc	r31, r1
    18ec:	ea 57       	subi	r30, 0x7A	; 122
    18ee:	ff 4f       	sbci	r31, 0xFF	; 255
    18f0:	10 83       	st	Z, r17
    if (!isChecksumTerm)
    18f2:	fe 01       	movw	r30, r28
    18f4:	eb 57       	subi	r30, 0x7B	; 123
    18f6:	ff 4f       	sbci	r31, 0xFF	; 255
    18f8:	80 81       	ld	r24, Z
    18fa:	81 11       	cpse	r24, r1
    18fc:	06 c0       	rjmp	.+12     	; 0x190a <_ZN11TinyGPSPlus6encodeEc+0xec>
    parity ^= c;
    18fe:	cc 57       	subi	r28, 0x7C	; 124
    1900:	df 4f       	sbci	r29, 0xFF	; 255
    1902:	98 81       	ld	r25, Y
    1904:	19 27       	eor	r17, r25
    1906:	18 83       	st	Y, r17
    1908:	01 c0       	rjmp	.+2      	; 0x190c <_ZN11TinyGPSPlus6encodeEc+0xee>
    return false;
    190a:	80 e0       	ldi	r24, 0x00	; 0
  }

  return false;
}
    190c:	df 91       	pop	r29
    190e:	cf 91       	pop	r28
    1910:	1f 91       	pop	r17
    1912:	08 95       	ret

00001914 <__mulsi3>:
    1914:	db 01       	movw	r26, r22
    1916:	8f 93       	push	r24
    1918:	9f 93       	push	r25
    191a:	0e 94 c2 0c 	call	0x1984	; 0x1984 <__muluhisi3>
    191e:	bf 91       	pop	r27
    1920:	af 91       	pop	r26
    1922:	a2 9f       	mul	r26, r18
    1924:	80 0d       	add	r24, r0
    1926:	91 1d       	adc	r25, r1
    1928:	a3 9f       	mul	r26, r19
    192a:	90 0d       	add	r25, r0
    192c:	b2 9f       	mul	r27, r18
    192e:	90 0d       	add	r25, r0
    1930:	11 24       	eor	r1, r1
    1932:	08 95       	ret

00001934 <__udivmodsi4>:
    1934:	a1 e2       	ldi	r26, 0x21	; 33
    1936:	1a 2e       	mov	r1, r26
    1938:	aa 1b       	sub	r26, r26
    193a:	bb 1b       	sub	r27, r27
    193c:	fd 01       	movw	r30, r26
    193e:	0d c0       	rjmp	.+26     	; 0x195a <__udivmodsi4_ep>

00001940 <__udivmodsi4_loop>:
    1940:	aa 1f       	adc	r26, r26
    1942:	bb 1f       	adc	r27, r27
    1944:	ee 1f       	adc	r30, r30
    1946:	ff 1f       	adc	r31, r31
    1948:	a2 17       	cp	r26, r18
    194a:	b3 07       	cpc	r27, r19
    194c:	e4 07       	cpc	r30, r20
    194e:	f5 07       	cpc	r31, r21
    1950:	20 f0       	brcs	.+8      	; 0x195a <__udivmodsi4_ep>
    1952:	a2 1b       	sub	r26, r18
    1954:	b3 0b       	sbc	r27, r19
    1956:	e4 0b       	sbc	r30, r20
    1958:	f5 0b       	sbc	r31, r21

0000195a <__udivmodsi4_ep>:
    195a:	66 1f       	adc	r22, r22
    195c:	77 1f       	adc	r23, r23
    195e:	88 1f       	adc	r24, r24
    1960:	99 1f       	adc	r25, r25
    1962:	1a 94       	dec	r1
    1964:	69 f7       	brne	.-38     	; 0x1940 <__udivmodsi4_loop>
    1966:	60 95       	com	r22
    1968:	70 95       	com	r23
    196a:	80 95       	com	r24
    196c:	90 95       	com	r25
    196e:	9b 01       	movw	r18, r22
    1970:	ac 01       	movw	r20, r24
    1972:	bd 01       	movw	r22, r26
    1974:	cf 01       	movw	r24, r30
    1976:	08 95       	ret

00001978 <__tablejump2__>:
    1978:	ee 0f       	add	r30, r30
    197a:	ff 1f       	adc	r31, r31

0000197c <__tablejump__>:
    197c:	05 90       	lpm	r0, Z+
    197e:	f4 91       	lpm	r31, Z
    1980:	e0 2d       	mov	r30, r0
    1982:	09 94       	ijmp

00001984 <__muluhisi3>:
    1984:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <__umulhisi3>
    1988:	a5 9f       	mul	r26, r21
    198a:	90 0d       	add	r25, r0
    198c:	b4 9f       	mul	r27, r20
    198e:	90 0d       	add	r25, r0
    1990:	a4 9f       	mul	r26, r20
    1992:	80 0d       	add	r24, r0
    1994:	91 1d       	adc	r25, r1
    1996:	11 24       	eor	r1, r1
    1998:	08 95       	ret

0000199a <__mulshisi3>:
    199a:	b7 ff       	sbrs	r27, 7
    199c:	0c 94 c2 0c 	jmp	0x1984	; 0x1984 <__muluhisi3>

000019a0 <__mulohisi3>:
    19a0:	0e 94 c2 0c 	call	0x1984	; 0x1984 <__muluhisi3>
    19a4:	82 1b       	sub	r24, r18
    19a6:	93 0b       	sbc	r25, r19
    19a8:	08 95       	ret

000019aa <__prologue_saves__>:
    19aa:	2f 92       	push	r2
    19ac:	3f 92       	push	r3
    19ae:	4f 92       	push	r4
    19b0:	5f 92       	push	r5
    19b2:	6f 92       	push	r6
    19b4:	7f 92       	push	r7
    19b6:	8f 92       	push	r8
    19b8:	9f 92       	push	r9
    19ba:	af 92       	push	r10
    19bc:	bf 92       	push	r11
    19be:	cf 92       	push	r12
    19c0:	df 92       	push	r13
    19c2:	ef 92       	push	r14
    19c4:	ff 92       	push	r15
    19c6:	0f 93       	push	r16
    19c8:	1f 93       	push	r17
    19ca:	cf 93       	push	r28
    19cc:	df 93       	push	r29
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
    19d2:	ca 1b       	sub	r28, r26
    19d4:	db 0b       	sbc	r29, r27
    19d6:	0f b6       	in	r0, 0x3f	; 63
    19d8:	f8 94       	cli
    19da:	de bf       	out	0x3e, r29	; 62
    19dc:	0f be       	out	0x3f, r0	; 63
    19de:	cd bf       	out	0x3d, r28	; 61
    19e0:	09 94       	ijmp

000019e2 <__epilogue_restores__>:
    19e2:	2a 88       	ldd	r2, Y+18	; 0x12
    19e4:	39 88       	ldd	r3, Y+17	; 0x11
    19e6:	48 88       	ldd	r4, Y+16	; 0x10
    19e8:	5f 84       	ldd	r5, Y+15	; 0x0f
    19ea:	6e 84       	ldd	r6, Y+14	; 0x0e
    19ec:	7d 84       	ldd	r7, Y+13	; 0x0d
    19ee:	8c 84       	ldd	r8, Y+12	; 0x0c
    19f0:	9b 84       	ldd	r9, Y+11	; 0x0b
    19f2:	aa 84       	ldd	r10, Y+10	; 0x0a
    19f4:	b9 84       	ldd	r11, Y+9	; 0x09
    19f6:	c8 84       	ldd	r12, Y+8	; 0x08
    19f8:	df 80       	ldd	r13, Y+7	; 0x07
    19fa:	ee 80       	ldd	r14, Y+6	; 0x06
    19fc:	fd 80       	ldd	r15, Y+5	; 0x05
    19fe:	0c 81       	ldd	r16, Y+4	; 0x04
    1a00:	1b 81       	ldd	r17, Y+3	; 0x03
    1a02:	aa 81       	ldd	r26, Y+2	; 0x02
    1a04:	b9 81       	ldd	r27, Y+1	; 0x01
    1a06:	ce 0f       	add	r28, r30
    1a08:	d1 1d       	adc	r29, r1
    1a0a:	0f b6       	in	r0, 0x3f	; 63
    1a0c:	f8 94       	cli
    1a0e:	de bf       	out	0x3e, r29	; 62
    1a10:	0f be       	out	0x3f, r0	; 63
    1a12:	cd bf       	out	0x3d, r28	; 61
    1a14:	ed 01       	movw	r28, r26
    1a16:	08 95       	ret

00001a18 <__umulhisi3>:
    1a18:	a2 9f       	mul	r26, r18
    1a1a:	b0 01       	movw	r22, r0
    1a1c:	b3 9f       	mul	r27, r19
    1a1e:	c0 01       	movw	r24, r0
    1a20:	a3 9f       	mul	r26, r19
    1a22:	70 0d       	add	r23, r0
    1a24:	81 1d       	adc	r24, r1
    1a26:	11 24       	eor	r1, r1
    1a28:	91 1d       	adc	r25, r1
    1a2a:	b2 9f       	mul	r27, r18
    1a2c:	70 0d       	add	r23, r0
    1a2e:	81 1d       	adc	r24, r1
    1a30:	11 24       	eor	r1, r1
    1a32:	91 1d       	adc	r25, r1
    1a34:	08 95       	ret

00001a36 <malloc>:
    1a36:	cf 93       	push	r28
    1a38:	df 93       	push	r29
    1a3a:	82 30       	cpi	r24, 0x02	; 2
    1a3c:	91 05       	cpc	r25, r1
    1a3e:	10 f4       	brcc	.+4      	; 0x1a44 <malloc+0xe>
    1a40:	82 e0       	ldi	r24, 0x02	; 2
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	e0 91 51 02 	lds	r30, 0x0251
    1a48:	f0 91 52 02 	lds	r31, 0x0252
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	a0 e0       	ldi	r26, 0x00	; 0
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	30 97       	sbiw	r30, 0x00	; 0
    1a56:	39 f1       	breq	.+78     	; 0x1aa6 <malloc+0x70>
    1a58:	40 81       	ld	r20, Z
    1a5a:	51 81       	ldd	r21, Z+1	; 0x01
    1a5c:	48 17       	cp	r20, r24
    1a5e:	59 07       	cpc	r21, r25
    1a60:	b8 f0       	brcs	.+46     	; 0x1a90 <malloc+0x5a>
    1a62:	48 17       	cp	r20, r24
    1a64:	59 07       	cpc	r21, r25
    1a66:	71 f4       	brne	.+28     	; 0x1a84 <malloc+0x4e>
    1a68:	82 81       	ldd	r24, Z+2	; 0x02
    1a6a:	93 81       	ldd	r25, Z+3	; 0x03
    1a6c:	10 97       	sbiw	r26, 0x00	; 0
    1a6e:	29 f0       	breq	.+10     	; 0x1a7a <malloc+0x44>
    1a70:	13 96       	adiw	r26, 0x03	; 3
    1a72:	9c 93       	st	X, r25
    1a74:	8e 93       	st	-X, r24
    1a76:	12 97       	sbiw	r26, 0x02	; 2
    1a78:	2c c0       	rjmp	.+88     	; 0x1ad2 <malloc+0x9c>
    1a7a:	90 93 52 02 	sts	0x0252, r25
    1a7e:	80 93 51 02 	sts	0x0251, r24
    1a82:	27 c0       	rjmp	.+78     	; 0x1ad2 <malloc+0x9c>
    1a84:	21 15       	cp	r18, r1
    1a86:	31 05       	cpc	r19, r1
    1a88:	31 f0       	breq	.+12     	; 0x1a96 <malloc+0x60>
    1a8a:	42 17       	cp	r20, r18
    1a8c:	53 07       	cpc	r21, r19
    1a8e:	18 f0       	brcs	.+6      	; 0x1a96 <malloc+0x60>
    1a90:	a9 01       	movw	r20, r18
    1a92:	db 01       	movw	r26, r22
    1a94:	01 c0       	rjmp	.+2      	; 0x1a98 <malloc+0x62>
    1a96:	ef 01       	movw	r28, r30
    1a98:	9a 01       	movw	r18, r20
    1a9a:	bd 01       	movw	r22, r26
    1a9c:	df 01       	movw	r26, r30
    1a9e:	02 80       	ldd	r0, Z+2	; 0x02
    1aa0:	f3 81       	ldd	r31, Z+3	; 0x03
    1aa2:	e0 2d       	mov	r30, r0
    1aa4:	d7 cf       	rjmp	.-82     	; 0x1a54 <malloc+0x1e>
    1aa6:	21 15       	cp	r18, r1
    1aa8:	31 05       	cpc	r19, r1
    1aaa:	f9 f0       	breq	.+62     	; 0x1aea <malloc+0xb4>
    1aac:	28 1b       	sub	r18, r24
    1aae:	39 0b       	sbc	r19, r25
    1ab0:	24 30       	cpi	r18, 0x04	; 4
    1ab2:	31 05       	cpc	r19, r1
    1ab4:	80 f4       	brcc	.+32     	; 0x1ad6 <malloc+0xa0>
    1ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab8:	9b 81       	ldd	r25, Y+3	; 0x03
    1aba:	61 15       	cp	r22, r1
    1abc:	71 05       	cpc	r23, r1
    1abe:	21 f0       	breq	.+8      	; 0x1ac8 <malloc+0x92>
    1ac0:	fb 01       	movw	r30, r22
    1ac2:	93 83       	std	Z+3, r25	; 0x03
    1ac4:	82 83       	std	Z+2, r24	; 0x02
    1ac6:	04 c0       	rjmp	.+8      	; 0x1ad0 <malloc+0x9a>
    1ac8:	90 93 52 02 	sts	0x0252, r25
    1acc:	80 93 51 02 	sts	0x0251, r24
    1ad0:	fe 01       	movw	r30, r28
    1ad2:	32 96       	adiw	r30, 0x02	; 2
    1ad4:	44 c0       	rjmp	.+136    	; 0x1b5e <malloc+0x128>
    1ad6:	fe 01       	movw	r30, r28
    1ad8:	e2 0f       	add	r30, r18
    1ada:	f3 1f       	adc	r31, r19
    1adc:	81 93       	st	Z+, r24
    1ade:	91 93       	st	Z+, r25
    1ae0:	22 50       	subi	r18, 0x02	; 2
    1ae2:	31 09       	sbc	r19, r1
    1ae4:	39 83       	std	Y+1, r19	; 0x01
    1ae6:	28 83       	st	Y, r18
    1ae8:	3a c0       	rjmp	.+116    	; 0x1b5e <malloc+0x128>
    1aea:	20 91 4f 02 	lds	r18, 0x024F
    1aee:	30 91 50 02 	lds	r19, 0x0250
    1af2:	23 2b       	or	r18, r19
    1af4:	41 f4       	brne	.+16     	; 0x1b06 <malloc+0xd0>
    1af6:	20 91 02 01 	lds	r18, 0x0102
    1afa:	30 91 03 01 	lds	r19, 0x0103
    1afe:	30 93 50 02 	sts	0x0250, r19
    1b02:	20 93 4f 02 	sts	0x024F, r18
    1b06:	20 91 00 01 	lds	r18, 0x0100
    1b0a:	30 91 01 01 	lds	r19, 0x0101
    1b0e:	21 15       	cp	r18, r1
    1b10:	31 05       	cpc	r19, r1
    1b12:	41 f4       	brne	.+16     	; 0x1b24 <malloc+0xee>
    1b14:	2d b7       	in	r18, 0x3d	; 61
    1b16:	3e b7       	in	r19, 0x3e	; 62
    1b18:	40 91 04 01 	lds	r20, 0x0104
    1b1c:	50 91 05 01 	lds	r21, 0x0105
    1b20:	24 1b       	sub	r18, r20
    1b22:	35 0b       	sbc	r19, r21
    1b24:	e0 91 4f 02 	lds	r30, 0x024F
    1b28:	f0 91 50 02 	lds	r31, 0x0250
    1b2c:	e2 17       	cp	r30, r18
    1b2e:	f3 07       	cpc	r31, r19
    1b30:	a0 f4       	brcc	.+40     	; 0x1b5a <malloc+0x124>
    1b32:	2e 1b       	sub	r18, r30
    1b34:	3f 0b       	sbc	r19, r31
    1b36:	28 17       	cp	r18, r24
    1b38:	39 07       	cpc	r19, r25
    1b3a:	78 f0       	brcs	.+30     	; 0x1b5a <malloc+0x124>
    1b3c:	ac 01       	movw	r20, r24
    1b3e:	4e 5f       	subi	r20, 0xFE	; 254
    1b40:	5f 4f       	sbci	r21, 0xFF	; 255
    1b42:	24 17       	cp	r18, r20
    1b44:	35 07       	cpc	r19, r21
    1b46:	48 f0       	brcs	.+18     	; 0x1b5a <malloc+0x124>
    1b48:	4e 0f       	add	r20, r30
    1b4a:	5f 1f       	adc	r21, r31
    1b4c:	50 93 50 02 	sts	0x0250, r21
    1b50:	40 93 4f 02 	sts	0x024F, r20
    1b54:	81 93       	st	Z+, r24
    1b56:	91 93       	st	Z+, r25
    1b58:	02 c0       	rjmp	.+4      	; 0x1b5e <malloc+0x128>
    1b5a:	e0 e0       	ldi	r30, 0x00	; 0
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	cf 01       	movw	r24, r30
    1b60:	df 91       	pop	r29
    1b62:	cf 91       	pop	r28
    1b64:	08 95       	ret

00001b66 <free>:
    1b66:	cf 93       	push	r28
    1b68:	df 93       	push	r29
    1b6a:	00 97       	sbiw	r24, 0x00	; 0
    1b6c:	09 f4       	brne	.+2      	; 0x1b70 <free+0xa>
    1b6e:	87 c0       	rjmp	.+270    	; 0x1c7e <free+0x118>
    1b70:	fc 01       	movw	r30, r24
    1b72:	32 97       	sbiw	r30, 0x02	; 2
    1b74:	13 82       	std	Z+3, r1	; 0x03
    1b76:	12 82       	std	Z+2, r1	; 0x02
    1b78:	c0 91 51 02 	lds	r28, 0x0251
    1b7c:	d0 91 52 02 	lds	r29, 0x0252
    1b80:	20 97       	sbiw	r28, 0x00	; 0
    1b82:	81 f4       	brne	.+32     	; 0x1ba4 <free+0x3e>
    1b84:	20 81       	ld	r18, Z
    1b86:	31 81       	ldd	r19, Z+1	; 0x01
    1b88:	28 0f       	add	r18, r24
    1b8a:	39 1f       	adc	r19, r25
    1b8c:	80 91 4f 02 	lds	r24, 0x024F
    1b90:	90 91 50 02 	lds	r25, 0x0250
    1b94:	82 17       	cp	r24, r18
    1b96:	93 07       	cpc	r25, r19
    1b98:	79 f5       	brne	.+94     	; 0x1bf8 <free+0x92>
    1b9a:	f0 93 50 02 	sts	0x0250, r31
    1b9e:	e0 93 4f 02 	sts	0x024F, r30
    1ba2:	6d c0       	rjmp	.+218    	; 0x1c7e <free+0x118>
    1ba4:	de 01       	movw	r26, r28
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	ae 17       	cp	r26, r30
    1bac:	bf 07       	cpc	r27, r31
    1bae:	50 f4       	brcc	.+20     	; 0x1bc4 <free+0x5e>
    1bb0:	12 96       	adiw	r26, 0x02	; 2
    1bb2:	4d 91       	ld	r20, X+
    1bb4:	5c 91       	ld	r21, X
    1bb6:	13 97       	sbiw	r26, 0x03	; 3
    1bb8:	9d 01       	movw	r18, r26
    1bba:	41 15       	cp	r20, r1
    1bbc:	51 05       	cpc	r21, r1
    1bbe:	09 f1       	breq	.+66     	; 0x1c02 <free+0x9c>
    1bc0:	da 01       	movw	r26, r20
    1bc2:	f3 cf       	rjmp	.-26     	; 0x1baa <free+0x44>
    1bc4:	b3 83       	std	Z+3, r27	; 0x03
    1bc6:	a2 83       	std	Z+2, r26	; 0x02
    1bc8:	40 81       	ld	r20, Z
    1bca:	51 81       	ldd	r21, Z+1	; 0x01
    1bcc:	84 0f       	add	r24, r20
    1bce:	95 1f       	adc	r25, r21
    1bd0:	8a 17       	cp	r24, r26
    1bd2:	9b 07       	cpc	r25, r27
    1bd4:	71 f4       	brne	.+28     	; 0x1bf2 <free+0x8c>
    1bd6:	8d 91       	ld	r24, X+
    1bd8:	9c 91       	ld	r25, X
    1bda:	11 97       	sbiw	r26, 0x01	; 1
    1bdc:	84 0f       	add	r24, r20
    1bde:	95 1f       	adc	r25, r21
    1be0:	02 96       	adiw	r24, 0x02	; 2
    1be2:	91 83       	std	Z+1, r25	; 0x01
    1be4:	80 83       	st	Z, r24
    1be6:	12 96       	adiw	r26, 0x02	; 2
    1be8:	8d 91       	ld	r24, X+
    1bea:	9c 91       	ld	r25, X
    1bec:	13 97       	sbiw	r26, 0x03	; 3
    1bee:	93 83       	std	Z+3, r25	; 0x03
    1bf0:	82 83       	std	Z+2, r24	; 0x02
    1bf2:	21 15       	cp	r18, r1
    1bf4:	31 05       	cpc	r19, r1
    1bf6:	29 f4       	brne	.+10     	; 0x1c02 <free+0x9c>
    1bf8:	f0 93 52 02 	sts	0x0252, r31
    1bfc:	e0 93 51 02 	sts	0x0251, r30
    1c00:	3e c0       	rjmp	.+124    	; 0x1c7e <free+0x118>
    1c02:	d9 01       	movw	r26, r18
    1c04:	13 96       	adiw	r26, 0x03	; 3
    1c06:	fc 93       	st	X, r31
    1c08:	ee 93       	st	-X, r30
    1c0a:	12 97       	sbiw	r26, 0x02	; 2
    1c0c:	4d 91       	ld	r20, X+
    1c0e:	5d 91       	ld	r21, X+
    1c10:	a4 0f       	add	r26, r20
    1c12:	b5 1f       	adc	r27, r21
    1c14:	ea 17       	cp	r30, r26
    1c16:	fb 07       	cpc	r31, r27
    1c18:	79 f4       	brne	.+30     	; 0x1c38 <free+0xd2>
    1c1a:	80 81       	ld	r24, Z
    1c1c:	91 81       	ldd	r25, Z+1	; 0x01
    1c1e:	84 0f       	add	r24, r20
    1c20:	95 1f       	adc	r25, r21
    1c22:	02 96       	adiw	r24, 0x02	; 2
    1c24:	d9 01       	movw	r26, r18
    1c26:	11 96       	adiw	r26, 0x01	; 1
    1c28:	9c 93       	st	X, r25
    1c2a:	8e 93       	st	-X, r24
    1c2c:	82 81       	ldd	r24, Z+2	; 0x02
    1c2e:	93 81       	ldd	r25, Z+3	; 0x03
    1c30:	13 96       	adiw	r26, 0x03	; 3
    1c32:	9c 93       	st	X, r25
    1c34:	8e 93       	st	-X, r24
    1c36:	12 97       	sbiw	r26, 0x02	; 2
    1c38:	e0 e0       	ldi	r30, 0x00	; 0
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c40:	00 97       	sbiw	r24, 0x00	; 0
    1c42:	19 f0       	breq	.+6      	; 0x1c4a <free+0xe4>
    1c44:	fe 01       	movw	r30, r28
    1c46:	ec 01       	movw	r28, r24
    1c48:	f9 cf       	rjmp	.-14     	; 0x1c3c <free+0xd6>
    1c4a:	ce 01       	movw	r24, r28
    1c4c:	02 96       	adiw	r24, 0x02	; 2
    1c4e:	28 81       	ld	r18, Y
    1c50:	39 81       	ldd	r19, Y+1	; 0x01
    1c52:	82 0f       	add	r24, r18
    1c54:	93 1f       	adc	r25, r19
    1c56:	20 91 4f 02 	lds	r18, 0x024F
    1c5a:	30 91 50 02 	lds	r19, 0x0250
    1c5e:	28 17       	cp	r18, r24
    1c60:	39 07       	cpc	r19, r25
    1c62:	69 f4       	brne	.+26     	; 0x1c7e <free+0x118>
    1c64:	30 97       	sbiw	r30, 0x00	; 0
    1c66:	29 f4       	brne	.+10     	; 0x1c72 <free+0x10c>
    1c68:	10 92 52 02 	sts	0x0252, r1
    1c6c:	10 92 51 02 	sts	0x0251, r1
    1c70:	02 c0       	rjmp	.+4      	; 0x1c76 <free+0x110>
    1c72:	13 82       	std	Z+3, r1	; 0x03
    1c74:	12 82       	std	Z+2, r1	; 0x02
    1c76:	d0 93 50 02 	sts	0x0250, r29
    1c7a:	c0 93 4f 02 	sts	0x024F, r28
    1c7e:	df 91       	pop	r29
    1c80:	cf 91       	pop	r28
    1c82:	08 95       	ret

00001c84 <atol>:
    1c84:	1f 93       	push	r17
    1c86:	fc 01       	movw	r30, r24
    1c88:	99 27       	eor	r25, r25
    1c8a:	88 27       	eor	r24, r24
    1c8c:	bc 01       	movw	r22, r24
    1c8e:	e8 94       	clt
    1c90:	11 91       	ld	r17, Z+
    1c92:	10 32       	cpi	r17, 0x20	; 32
    1c94:	e9 f3       	breq	.-6      	; 0x1c90 <atol+0xc>
    1c96:	19 30       	cpi	r17, 0x09	; 9
    1c98:	10 f0       	brcs	.+4      	; 0x1c9e <atol+0x1a>
    1c9a:	1e 30       	cpi	r17, 0x0E	; 14
    1c9c:	c8 f3       	brcs	.-14     	; 0x1c90 <atol+0xc>
    1c9e:	1b 32       	cpi	r17, 0x2B	; 43
    1ca0:	51 f0       	breq	.+20     	; 0x1cb6 <atol+0x32>
    1ca2:	1d 32       	cpi	r17, 0x2D	; 45
    1ca4:	49 f4       	brne	.+18     	; 0x1cb8 <atol+0x34>
    1ca6:	68 94       	set
    1ca8:	06 c0       	rjmp	.+12     	; 0x1cb6 <atol+0x32>
    1caa:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__mulsi_const_10>
    1cae:	61 0f       	add	r22, r17
    1cb0:	71 1d       	adc	r23, r1
    1cb2:	81 1d       	adc	r24, r1
    1cb4:	91 1d       	adc	r25, r1
    1cb6:	11 91       	ld	r17, Z+
    1cb8:	10 53       	subi	r17, 0x30	; 48
    1cba:	1a 30       	cpi	r17, 0x0A	; 10
    1cbc:	b0 f3       	brcs	.-20     	; 0x1caa <atol+0x26>
    1cbe:	3e f4       	brtc	.+14     	; 0x1cce <atol+0x4a>
    1cc0:	90 95       	com	r25
    1cc2:	80 95       	com	r24
    1cc4:	70 95       	com	r23
    1cc6:	61 95       	neg	r22
    1cc8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cca:	8f 4f       	sbci	r24, 0xFF	; 255
    1ccc:	9f 4f       	sbci	r25, 0xFF	; 255
    1cce:	1f 91       	pop	r17
    1cd0:	08 95       	ret

00001cd2 <__ftoa_engine>:
    1cd2:	28 30       	cpi	r18, 0x08	; 8
    1cd4:	08 f0       	brcs	.+2      	; 0x1cd8 <__ftoa_engine+0x6>
    1cd6:	27 e0       	ldi	r18, 0x07	; 7
    1cd8:	33 27       	eor	r19, r19
    1cda:	da 01       	movw	r26, r20
    1cdc:	99 0f       	add	r25, r25
    1cde:	31 1d       	adc	r19, r1
    1ce0:	87 fd       	sbrc	r24, 7
    1ce2:	91 60       	ori	r25, 0x01	; 1
    1ce4:	00 96       	adiw	r24, 0x00	; 0
    1ce6:	61 05       	cpc	r22, r1
    1ce8:	71 05       	cpc	r23, r1
    1cea:	39 f4       	brne	.+14     	; 0x1cfa <__ftoa_engine+0x28>
    1cec:	32 60       	ori	r19, 0x02	; 2
    1cee:	2e 5f       	subi	r18, 0xFE	; 254
    1cf0:	3d 93       	st	X+, r19
    1cf2:	30 e3       	ldi	r19, 0x30	; 48
    1cf4:	2a 95       	dec	r18
    1cf6:	e1 f7       	brne	.-8      	; 0x1cf0 <__ftoa_engine+0x1e>
    1cf8:	08 95       	ret
    1cfa:	9f 3f       	cpi	r25, 0xFF	; 255
    1cfc:	30 f0       	brcs	.+12     	; 0x1d0a <__ftoa_engine+0x38>
    1cfe:	80 38       	cpi	r24, 0x80	; 128
    1d00:	71 05       	cpc	r23, r1
    1d02:	61 05       	cpc	r22, r1
    1d04:	09 f0       	breq	.+2      	; 0x1d08 <__ftoa_engine+0x36>
    1d06:	3c 5f       	subi	r19, 0xFC	; 252
    1d08:	3c 5f       	subi	r19, 0xFC	; 252
    1d0a:	3d 93       	st	X+, r19
    1d0c:	91 30       	cpi	r25, 0x01	; 1
    1d0e:	08 f0       	brcs	.+2      	; 0x1d12 <__ftoa_engine+0x40>
    1d10:	80 68       	ori	r24, 0x80	; 128
    1d12:	91 1d       	adc	r25, r1
    1d14:	df 93       	push	r29
    1d16:	cf 93       	push	r28
    1d18:	1f 93       	push	r17
    1d1a:	0f 93       	push	r16
    1d1c:	ff 92       	push	r15
    1d1e:	ef 92       	push	r14
    1d20:	19 2f       	mov	r17, r25
    1d22:	98 7f       	andi	r25, 0xF8	; 248
    1d24:	96 95       	lsr	r25
    1d26:	e9 2f       	mov	r30, r25
    1d28:	96 95       	lsr	r25
    1d2a:	96 95       	lsr	r25
    1d2c:	e9 0f       	add	r30, r25
    1d2e:	ff 27       	eor	r31, r31
    1d30:	e4 5e       	subi	r30, 0xE4	; 228
    1d32:	fe 4f       	sbci	r31, 0xFE	; 254
    1d34:	99 27       	eor	r25, r25
    1d36:	33 27       	eor	r19, r19
    1d38:	ee 24       	eor	r14, r14
    1d3a:	ff 24       	eor	r15, r15
    1d3c:	a7 01       	movw	r20, r14
    1d3e:	e7 01       	movw	r28, r14
    1d40:	05 90       	lpm	r0, Z+
    1d42:	08 94       	sec
    1d44:	07 94       	ror	r0
    1d46:	28 f4       	brcc	.+10     	; 0x1d52 <__ftoa_engine+0x80>
    1d48:	36 0f       	add	r19, r22
    1d4a:	e7 1e       	adc	r14, r23
    1d4c:	f8 1e       	adc	r15, r24
    1d4e:	49 1f       	adc	r20, r25
    1d50:	51 1d       	adc	r21, r1
    1d52:	66 0f       	add	r22, r22
    1d54:	77 1f       	adc	r23, r23
    1d56:	88 1f       	adc	r24, r24
    1d58:	99 1f       	adc	r25, r25
    1d5a:	06 94       	lsr	r0
    1d5c:	a1 f7       	brne	.-24     	; 0x1d46 <__ftoa_engine+0x74>
    1d5e:	05 90       	lpm	r0, Z+
    1d60:	07 94       	ror	r0
    1d62:	28 f4       	brcc	.+10     	; 0x1d6e <__ftoa_engine+0x9c>
    1d64:	e7 0e       	add	r14, r23
    1d66:	f8 1e       	adc	r15, r24
    1d68:	49 1f       	adc	r20, r25
    1d6a:	56 1f       	adc	r21, r22
    1d6c:	c1 1d       	adc	r28, r1
    1d6e:	77 0f       	add	r23, r23
    1d70:	88 1f       	adc	r24, r24
    1d72:	99 1f       	adc	r25, r25
    1d74:	66 1f       	adc	r22, r22
    1d76:	06 94       	lsr	r0
    1d78:	a1 f7       	brne	.-24     	; 0x1d62 <__ftoa_engine+0x90>
    1d7a:	05 90       	lpm	r0, Z+
    1d7c:	07 94       	ror	r0
    1d7e:	28 f4       	brcc	.+10     	; 0x1d8a <__ftoa_engine+0xb8>
    1d80:	f8 0e       	add	r15, r24
    1d82:	49 1f       	adc	r20, r25
    1d84:	56 1f       	adc	r21, r22
    1d86:	c7 1f       	adc	r28, r23
    1d88:	d1 1d       	adc	r29, r1
    1d8a:	88 0f       	add	r24, r24
    1d8c:	99 1f       	adc	r25, r25
    1d8e:	66 1f       	adc	r22, r22
    1d90:	77 1f       	adc	r23, r23
    1d92:	06 94       	lsr	r0
    1d94:	a1 f7       	brne	.-24     	; 0x1d7e <__ftoa_engine+0xac>
    1d96:	05 90       	lpm	r0, Z+
    1d98:	07 94       	ror	r0
    1d9a:	20 f4       	brcc	.+8      	; 0x1da4 <__ftoa_engine+0xd2>
    1d9c:	49 0f       	add	r20, r25
    1d9e:	56 1f       	adc	r21, r22
    1da0:	c7 1f       	adc	r28, r23
    1da2:	d8 1f       	adc	r29, r24
    1da4:	99 0f       	add	r25, r25
    1da6:	66 1f       	adc	r22, r22
    1da8:	77 1f       	adc	r23, r23
    1daa:	88 1f       	adc	r24, r24
    1dac:	06 94       	lsr	r0
    1dae:	a9 f7       	brne	.-22     	; 0x1d9a <__ftoa_engine+0xc8>
    1db0:	84 91       	lpm	r24, Z
    1db2:	10 95       	com	r17
    1db4:	17 70       	andi	r17, 0x07	; 7
    1db6:	41 f0       	breq	.+16     	; 0x1dc8 <__ftoa_engine+0xf6>
    1db8:	d6 95       	lsr	r29
    1dba:	c7 95       	ror	r28
    1dbc:	57 95       	ror	r21
    1dbe:	47 95       	ror	r20
    1dc0:	f7 94       	ror	r15
    1dc2:	e7 94       	ror	r14
    1dc4:	1a 95       	dec	r17
    1dc6:	c1 f7       	brne	.-16     	; 0x1db8 <__ftoa_engine+0xe6>
    1dc8:	e2 ec       	ldi	r30, 0xC2	; 194
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	68 94       	set
    1dce:	15 90       	lpm	r1, Z+
    1dd0:	15 91       	lpm	r17, Z+
    1dd2:	35 91       	lpm	r19, Z+
    1dd4:	65 91       	lpm	r22, Z+
    1dd6:	95 91       	lpm	r25, Z+
    1dd8:	05 90       	lpm	r0, Z+
    1dda:	7f e2       	ldi	r23, 0x2F	; 47
    1ddc:	73 95       	inc	r23
    1dde:	e1 18       	sub	r14, r1
    1de0:	f1 0a       	sbc	r15, r17
    1de2:	43 0b       	sbc	r20, r19
    1de4:	56 0b       	sbc	r21, r22
    1de6:	c9 0b       	sbc	r28, r25
    1de8:	d0 09       	sbc	r29, r0
    1dea:	c0 f7       	brcc	.-16     	; 0x1ddc <__ftoa_engine+0x10a>
    1dec:	e1 0c       	add	r14, r1
    1dee:	f1 1e       	adc	r15, r17
    1df0:	43 1f       	adc	r20, r19
    1df2:	56 1f       	adc	r21, r22
    1df4:	c9 1f       	adc	r28, r25
    1df6:	d0 1d       	adc	r29, r0
    1df8:	7e f4       	brtc	.+30     	; 0x1e18 <__ftoa_engine+0x146>
    1dfa:	70 33       	cpi	r23, 0x30	; 48
    1dfc:	11 f4       	brne	.+4      	; 0x1e02 <__ftoa_engine+0x130>
    1dfe:	8a 95       	dec	r24
    1e00:	e6 cf       	rjmp	.-52     	; 0x1dce <__ftoa_engine+0xfc>
    1e02:	e8 94       	clt
    1e04:	01 50       	subi	r16, 0x01	; 1
    1e06:	30 f0       	brcs	.+12     	; 0x1e14 <__ftoa_engine+0x142>
    1e08:	08 0f       	add	r16, r24
    1e0a:	0a f4       	brpl	.+2      	; 0x1e0e <__ftoa_engine+0x13c>
    1e0c:	00 27       	eor	r16, r16
    1e0e:	02 17       	cp	r16, r18
    1e10:	08 f4       	brcc	.+2      	; 0x1e14 <__ftoa_engine+0x142>
    1e12:	20 2f       	mov	r18, r16
    1e14:	23 95       	inc	r18
    1e16:	02 2f       	mov	r16, r18
    1e18:	7a 33       	cpi	r23, 0x3A	; 58
    1e1a:	28 f0       	brcs	.+10     	; 0x1e26 <__ftoa_engine+0x154>
    1e1c:	79 e3       	ldi	r23, 0x39	; 57
    1e1e:	7d 93       	st	X+, r23
    1e20:	2a 95       	dec	r18
    1e22:	e9 f7       	brne	.-6      	; 0x1e1e <__ftoa_engine+0x14c>
    1e24:	10 c0       	rjmp	.+32     	; 0x1e46 <__ftoa_engine+0x174>
    1e26:	7d 93       	st	X+, r23
    1e28:	2a 95       	dec	r18
    1e2a:	89 f6       	brne	.-94     	; 0x1dce <__ftoa_engine+0xfc>
    1e2c:	06 94       	lsr	r0
    1e2e:	97 95       	ror	r25
    1e30:	67 95       	ror	r22
    1e32:	37 95       	ror	r19
    1e34:	17 95       	ror	r17
    1e36:	17 94       	ror	r1
    1e38:	e1 18       	sub	r14, r1
    1e3a:	f1 0a       	sbc	r15, r17
    1e3c:	43 0b       	sbc	r20, r19
    1e3e:	56 0b       	sbc	r21, r22
    1e40:	c9 0b       	sbc	r28, r25
    1e42:	d0 09       	sbc	r29, r0
    1e44:	98 f0       	brcs	.+38     	; 0x1e6c <__ftoa_engine+0x19a>
    1e46:	23 95       	inc	r18
    1e48:	7e 91       	ld	r23, -X
    1e4a:	73 95       	inc	r23
    1e4c:	7a 33       	cpi	r23, 0x3A	; 58
    1e4e:	08 f0       	brcs	.+2      	; 0x1e52 <__ftoa_engine+0x180>
    1e50:	70 e3       	ldi	r23, 0x30	; 48
    1e52:	7c 93       	st	X, r23
    1e54:	20 13       	cpse	r18, r16
    1e56:	b8 f7       	brcc	.-18     	; 0x1e46 <__ftoa_engine+0x174>
    1e58:	7e 91       	ld	r23, -X
    1e5a:	70 61       	ori	r23, 0x10	; 16
    1e5c:	7d 93       	st	X+, r23
    1e5e:	30 f0       	brcs	.+12     	; 0x1e6c <__ftoa_engine+0x19a>
    1e60:	83 95       	inc	r24
    1e62:	71 e3       	ldi	r23, 0x31	; 49
    1e64:	7d 93       	st	X+, r23
    1e66:	70 e3       	ldi	r23, 0x30	; 48
    1e68:	2a 95       	dec	r18
    1e6a:	e1 f7       	brne	.-8      	; 0x1e64 <__ftoa_engine+0x192>
    1e6c:	11 24       	eor	r1, r1
    1e6e:	ef 90       	pop	r14
    1e70:	ff 90       	pop	r15
    1e72:	0f 91       	pop	r16
    1e74:	1f 91       	pop	r17
    1e76:	cf 91       	pop	r28
    1e78:	df 91       	pop	r29
    1e7a:	99 27       	eor	r25, r25
    1e7c:	87 fd       	sbrc	r24, 7
    1e7e:	90 95       	com	r25
    1e80:	08 95       	ret

00001e82 <strnlen_P>:
    1e82:	fc 01       	movw	r30, r24
    1e84:	05 90       	lpm	r0, Z+
    1e86:	61 50       	subi	r22, 0x01	; 1
    1e88:	70 40       	sbci	r23, 0x00	; 0
    1e8a:	01 10       	cpse	r0, r1
    1e8c:	d8 f7       	brcc	.-10     	; 0x1e84 <strnlen_P+0x2>
    1e8e:	80 95       	com	r24
    1e90:	90 95       	com	r25
    1e92:	8e 0f       	add	r24, r30
    1e94:	9f 1f       	adc	r25, r31
    1e96:	08 95       	ret

00001e98 <strcmp>:
    1e98:	fb 01       	movw	r30, r22
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	8d 91       	ld	r24, X+
    1e9e:	01 90       	ld	r0, Z+
    1ea0:	80 19       	sub	r24, r0
    1ea2:	01 10       	cpse	r0, r1
    1ea4:	d9 f3       	breq	.-10     	; 0x1e9c <strcmp+0x4>
    1ea6:	99 0b       	sbc	r25, r25
    1ea8:	08 95       	ret

00001eaa <strcpy>:
    1eaa:	fb 01       	movw	r30, r22
    1eac:	dc 01       	movw	r26, r24
    1eae:	01 90       	ld	r0, Z+
    1eb0:	0d 92       	st	X+, r0
    1eb2:	00 20       	and	r0, r0
    1eb4:	e1 f7       	brne	.-8      	; 0x1eae <strcpy+0x4>
    1eb6:	08 95       	ret

00001eb8 <strncpy>:
    1eb8:	fb 01       	movw	r30, r22
    1eba:	dc 01       	movw	r26, r24
    1ebc:	41 50       	subi	r20, 0x01	; 1
    1ebe:	50 40       	sbci	r21, 0x00	; 0
    1ec0:	48 f0       	brcs	.+18     	; 0x1ed4 <strncpy+0x1c>
    1ec2:	01 90       	ld	r0, Z+
    1ec4:	0d 92       	st	X+, r0
    1ec6:	00 20       	and	r0, r0
    1ec8:	c9 f7       	brne	.-14     	; 0x1ebc <strncpy+0x4>
    1eca:	01 c0       	rjmp	.+2      	; 0x1ece <strncpy+0x16>
    1ecc:	1d 92       	st	X+, r1
    1ece:	41 50       	subi	r20, 0x01	; 1
    1ed0:	50 40       	sbci	r21, 0x00	; 0
    1ed2:	e0 f7       	brcc	.-8      	; 0x1ecc <strncpy+0x14>
    1ed4:	08 95       	ret

00001ed6 <strnlen>:
    1ed6:	fc 01       	movw	r30, r24
    1ed8:	61 50       	subi	r22, 0x01	; 1
    1eda:	70 40       	sbci	r23, 0x00	; 0
    1edc:	01 90       	ld	r0, Z+
    1ede:	01 10       	cpse	r0, r1
    1ee0:	d8 f7       	brcc	.-10     	; 0x1ed8 <strnlen+0x2>
    1ee2:	80 95       	com	r24
    1ee4:	90 95       	com	r25
    1ee6:	8e 0f       	add	r24, r30
    1ee8:	9f 1f       	adc	r25, r31
    1eea:	08 95       	ret

00001eec <__mulsi_const_10>:
    1eec:	59 2f       	mov	r21, r25
    1eee:	48 2f       	mov	r20, r24
    1ef0:	37 2f       	mov	r19, r23
    1ef2:	26 2f       	mov	r18, r22
    1ef4:	66 0f       	add	r22, r22
    1ef6:	77 1f       	adc	r23, r23
    1ef8:	88 1f       	adc	r24, r24
    1efa:	99 1f       	adc	r25, r25
    1efc:	66 0f       	add	r22, r22
    1efe:	77 1f       	adc	r23, r23
    1f00:	88 1f       	adc	r24, r24
    1f02:	99 1f       	adc	r25, r25
    1f04:	62 0f       	add	r22, r18
    1f06:	73 1f       	adc	r23, r19
    1f08:	84 1f       	adc	r24, r20
    1f0a:	95 1f       	adc	r25, r21
    1f0c:	66 0f       	add	r22, r22
    1f0e:	77 1f       	adc	r23, r23
    1f10:	88 1f       	adc	r24, r24
    1f12:	99 1f       	adc	r25, r25
    1f14:	08 95       	ret

00001f16 <fputc>:
    1f16:	0f 93       	push	r16
    1f18:	1f 93       	push	r17
    1f1a:	cf 93       	push	r28
    1f1c:	df 93       	push	r29
    1f1e:	18 2f       	mov	r17, r24
    1f20:	09 2f       	mov	r16, r25
    1f22:	eb 01       	movw	r28, r22
    1f24:	8b 81       	ldd	r24, Y+3	; 0x03
    1f26:	81 fd       	sbrc	r24, 1
    1f28:	03 c0       	rjmp	.+6      	; 0x1f30 <fputc+0x1a>
    1f2a:	8f ef       	ldi	r24, 0xFF	; 255
    1f2c:	9f ef       	ldi	r25, 0xFF	; 255
    1f2e:	20 c0       	rjmp	.+64     	; 0x1f70 <fputc+0x5a>
    1f30:	82 ff       	sbrs	r24, 2
    1f32:	10 c0       	rjmp	.+32     	; 0x1f54 <fputc+0x3e>
    1f34:	4e 81       	ldd	r20, Y+6	; 0x06
    1f36:	5f 81       	ldd	r21, Y+7	; 0x07
    1f38:	2c 81       	ldd	r18, Y+4	; 0x04
    1f3a:	3d 81       	ldd	r19, Y+5	; 0x05
    1f3c:	42 17       	cp	r20, r18
    1f3e:	53 07       	cpc	r21, r19
    1f40:	7c f4       	brge	.+30     	; 0x1f60 <fputc+0x4a>
    1f42:	e8 81       	ld	r30, Y
    1f44:	f9 81       	ldd	r31, Y+1	; 0x01
    1f46:	9f 01       	movw	r18, r30
    1f48:	2f 5f       	subi	r18, 0xFF	; 255
    1f4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f4c:	39 83       	std	Y+1, r19	; 0x01
    1f4e:	28 83       	st	Y, r18
    1f50:	10 83       	st	Z, r17
    1f52:	06 c0       	rjmp	.+12     	; 0x1f60 <fputc+0x4a>
    1f54:	e8 85       	ldd	r30, Y+8	; 0x08
    1f56:	f9 85       	ldd	r31, Y+9	; 0x09
    1f58:	81 2f       	mov	r24, r17
    1f5a:	09 95       	icall
    1f5c:	89 2b       	or	r24, r25
    1f5e:	29 f7       	brne	.-54     	; 0x1f2a <fputc+0x14>
    1f60:	2e 81       	ldd	r18, Y+6	; 0x06
    1f62:	3f 81       	ldd	r19, Y+7	; 0x07
    1f64:	2f 5f       	subi	r18, 0xFF	; 255
    1f66:	3f 4f       	sbci	r19, 0xFF	; 255
    1f68:	3f 83       	std	Y+7, r19	; 0x07
    1f6a:	2e 83       	std	Y+6, r18	; 0x06
    1f6c:	81 2f       	mov	r24, r17
    1f6e:	90 2f       	mov	r25, r16
    1f70:	df 91       	pop	r29
    1f72:	cf 91       	pop	r28
    1f74:	1f 91       	pop	r17
    1f76:	0f 91       	pop	r16
    1f78:	08 95       	ret

00001f7a <sprintf>:
    1f7a:	ae e0       	ldi	r26, 0x0E	; 14
    1f7c:	b0 e0       	ldi	r27, 0x00	; 0
    1f7e:	e3 ec       	ldi	r30, 0xC3	; 195
    1f80:	ff e0       	ldi	r31, 0x0F	; 15
    1f82:	0c 94 e3 0c 	jmp	0x19c6	; 0x19c6 <__prologue_saves__+0x1c>
    1f86:	0d 89       	ldd	r16, Y+21	; 0x15
    1f88:	1e 89       	ldd	r17, Y+22	; 0x16
    1f8a:	86 e0       	ldi	r24, 0x06	; 6
    1f8c:	8c 83       	std	Y+4, r24	; 0x04
    1f8e:	1a 83       	std	Y+2, r17	; 0x02
    1f90:	09 83       	std	Y+1, r16	; 0x01
    1f92:	8f ef       	ldi	r24, 0xFF	; 255
    1f94:	9f e7       	ldi	r25, 0x7F	; 127
    1f96:	9e 83       	std	Y+6, r25	; 0x06
    1f98:	8d 83       	std	Y+5, r24	; 0x05
    1f9a:	ae 01       	movw	r20, r28
    1f9c:	47 5e       	subi	r20, 0xE7	; 231
    1f9e:	5f 4f       	sbci	r21, 0xFF	; 255
    1fa0:	6f 89       	ldd	r22, Y+23	; 0x17
    1fa2:	78 8d       	ldd	r23, Y+24	; 0x18
    1fa4:	ce 01       	movw	r24, r28
    1fa6:	01 96       	adiw	r24, 0x01	; 1
    1fa8:	0e 94 20 04 	call	0x840	; 0x840 <vfprintf>
    1fac:	ef 81       	ldd	r30, Y+7	; 0x07
    1fae:	f8 85       	ldd	r31, Y+8	; 0x08
    1fb0:	e0 0f       	add	r30, r16
    1fb2:	f1 1f       	adc	r31, r17
    1fb4:	10 82       	st	Z, r1
    1fb6:	2e 96       	adiw	r28, 0x0e	; 14
    1fb8:	e4 e0       	ldi	r30, 0x04	; 4
    1fba:	0c 94 ff 0c 	jmp	0x19fe	; 0x19fe <__epilogue_restores__+0x1c>

00001fbe <__ultoa_invert>:
    1fbe:	fa 01       	movw	r30, r20
    1fc0:	aa 27       	eor	r26, r26
    1fc2:	28 30       	cpi	r18, 0x08	; 8
    1fc4:	51 f1       	breq	.+84     	; 0x201a <__ultoa_invert+0x5c>
    1fc6:	20 31       	cpi	r18, 0x10	; 16
    1fc8:	81 f1       	breq	.+96     	; 0x202a <__ultoa_invert+0x6c>
    1fca:	e8 94       	clt
    1fcc:	6f 93       	push	r22
    1fce:	6e 7f       	andi	r22, 0xFE	; 254
    1fd0:	6e 5f       	subi	r22, 0xFE	; 254
    1fd2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd4:	8f 4f       	sbci	r24, 0xFF	; 255
    1fd6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fd8:	af 4f       	sbci	r26, 0xFF	; 255
    1fda:	b1 e0       	ldi	r27, 0x01	; 1
    1fdc:	3e d0       	rcall	.+124    	; 0x205a <__ultoa_invert+0x9c>
    1fde:	b4 e0       	ldi	r27, 0x04	; 4
    1fe0:	3c d0       	rcall	.+120    	; 0x205a <__ultoa_invert+0x9c>
    1fe2:	67 0f       	add	r22, r23
    1fe4:	78 1f       	adc	r23, r24
    1fe6:	89 1f       	adc	r24, r25
    1fe8:	9a 1f       	adc	r25, r26
    1fea:	a1 1d       	adc	r26, r1
    1fec:	68 0f       	add	r22, r24
    1fee:	79 1f       	adc	r23, r25
    1ff0:	8a 1f       	adc	r24, r26
    1ff2:	91 1d       	adc	r25, r1
    1ff4:	a1 1d       	adc	r26, r1
    1ff6:	6a 0f       	add	r22, r26
    1ff8:	71 1d       	adc	r23, r1
    1ffa:	81 1d       	adc	r24, r1
    1ffc:	91 1d       	adc	r25, r1
    1ffe:	a1 1d       	adc	r26, r1
    2000:	20 d0       	rcall	.+64     	; 0x2042 <__ultoa_invert+0x84>
    2002:	09 f4       	brne	.+2      	; 0x2006 <__ultoa_invert+0x48>
    2004:	68 94       	set
    2006:	3f 91       	pop	r19
    2008:	2a e0       	ldi	r18, 0x0A	; 10
    200a:	26 9f       	mul	r18, r22
    200c:	11 24       	eor	r1, r1
    200e:	30 19       	sub	r19, r0
    2010:	30 5d       	subi	r19, 0xD0	; 208
    2012:	31 93       	st	Z+, r19
    2014:	de f6       	brtc	.-74     	; 0x1fcc <__ultoa_invert+0xe>
    2016:	cf 01       	movw	r24, r30
    2018:	08 95       	ret
    201a:	46 2f       	mov	r20, r22
    201c:	47 70       	andi	r20, 0x07	; 7
    201e:	40 5d       	subi	r20, 0xD0	; 208
    2020:	41 93       	st	Z+, r20
    2022:	b3 e0       	ldi	r27, 0x03	; 3
    2024:	0f d0       	rcall	.+30     	; 0x2044 <__ultoa_invert+0x86>
    2026:	c9 f7       	brne	.-14     	; 0x201a <__ultoa_invert+0x5c>
    2028:	f6 cf       	rjmp	.-20     	; 0x2016 <__ultoa_invert+0x58>
    202a:	46 2f       	mov	r20, r22
    202c:	4f 70       	andi	r20, 0x0F	; 15
    202e:	40 5d       	subi	r20, 0xD0	; 208
    2030:	4a 33       	cpi	r20, 0x3A	; 58
    2032:	18 f0       	brcs	.+6      	; 0x203a <__ultoa_invert+0x7c>
    2034:	49 5d       	subi	r20, 0xD9	; 217
    2036:	31 fd       	sbrc	r19, 1
    2038:	40 52       	subi	r20, 0x20	; 32
    203a:	41 93       	st	Z+, r20
    203c:	02 d0       	rcall	.+4      	; 0x2042 <__ultoa_invert+0x84>
    203e:	a9 f7       	brne	.-22     	; 0x202a <__ultoa_invert+0x6c>
    2040:	ea cf       	rjmp	.-44     	; 0x2016 <__ultoa_invert+0x58>
    2042:	b4 e0       	ldi	r27, 0x04	; 4
    2044:	a6 95       	lsr	r26
    2046:	97 95       	ror	r25
    2048:	87 95       	ror	r24
    204a:	77 95       	ror	r23
    204c:	67 95       	ror	r22
    204e:	ba 95       	dec	r27
    2050:	c9 f7       	brne	.-14     	; 0x2044 <__ultoa_invert+0x86>
    2052:	00 97       	sbiw	r24, 0x00	; 0
    2054:	61 05       	cpc	r22, r1
    2056:	71 05       	cpc	r23, r1
    2058:	08 95       	ret
    205a:	9b 01       	movw	r18, r22
    205c:	ac 01       	movw	r20, r24
    205e:	0a 2e       	mov	r0, r26
    2060:	06 94       	lsr	r0
    2062:	57 95       	ror	r21
    2064:	47 95       	ror	r20
    2066:	37 95       	ror	r19
    2068:	27 95       	ror	r18
    206a:	ba 95       	dec	r27
    206c:	c9 f7       	brne	.-14     	; 0x2060 <__ultoa_invert+0xa2>
    206e:	62 0f       	add	r22, r18
    2070:	73 1f       	adc	r23, r19
    2072:	84 1f       	adc	r24, r20
    2074:	95 1f       	adc	r25, r21
    2076:	a0 1d       	adc	r26, r0
    2078:	08 95       	ret

0000207a <_exit>:
    207a:	f8 94       	cli

0000207c <__stop_program>:
    207c:	ff cf       	rjmp	.-2      	; 0x207c <__stop_program>
