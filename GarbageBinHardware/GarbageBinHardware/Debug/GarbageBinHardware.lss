
GarbageBinHardware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  000004aa  0000053e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080013a  0080013a  00000578  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000150  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000016bf  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a2b  00000000  00000000  00001db7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006c9  00000000  00000000  000027e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002ec  00000000  00000000  00002eac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000763  00000000  00000000  00003198  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000066e  00000000  00000000  000038fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000110  00000000  00000000  00003f69  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ea       	ldi	r30, 0xAA	; 170
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 33       	cpi	r26, 0x3A	; 58
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e3       	ldi	r26, 0x3A	; 58
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 33       	cpi	r26, 0x3E	; 62
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a9 00 	call	0x152	; 0x152 <main>
  9e:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_ZN6StringD1Ev>:
class String
{
public:
  String();
  String( const char *cstr );
  virtual ~String() {}
  a6:	2a e0       	ldi	r18, 0x0A	; 10
  a8:	31 e0       	ldi	r19, 0x01	; 1
  aa:	fc 01       	movw	r30, r24
  ac:	31 83       	std	Z+1, r19	; 0x01
  ae:	20 83       	st	Z, r18
  b0:	08 95       	ret

000000b2 <_ZN6StringD0Ev>:
  b2:	2a e0       	ldi	r18, 0x0A	; 10
  b4:	31 e0       	ldi	r19, 0x01	; 1
  b6:	fc 01       	movw	r30, r24
  b8:	31 83       	std	Z+1, r19	; 0x01
  ba:	20 83       	st	Z, r18
  return buf;
}

void operator delete( void *buf )
{
  free( buf );
  bc:	0e 94 02 01 	call	0x204	; 0x204 <_ZdlPv>
  c0:	08 95       	ret

000000c2 <_Z19LCD_PulseEnableLinev>:
  String hexPrefix( "0x" );
  LCD_PrintMessage( hexPrefix );

  // Print the hex data to LCD.
  String hexDataStr( hexDataCStrBuf );
  LCD_PrintMessage( hexDataStr );
  c2:	5b 9a       	sbi	0x0b, 3	; 11
  c4:	85 ed       	ldi	r24, 0xD5	; 213
  c6:	8a 95       	dec	r24
}
  c8:	f1 f7       	brne	.-4      	; 0xc6 <_Z19LCD_PulseEnableLinev+0x4>
  ca:	00 00       	nop
  cc:	5b 98       	cbi	0x0b, 3	; 11
  ce:	08 95       	ret

000000d0 <_Z14LCD_SendNibbleh>:
  d0:	98 b1       	in	r25, 0x08	; 8
  d2:	93 7c       	andi	r25, 0xC3	; 195
  d4:	98 b9       	out	0x08, r25	; 8
  d6:	84 fd       	sbrc	r24, 4
  d8:	42 9a       	sbi	0x08, 2	; 8
  da:	85 fd       	sbrc	r24, 5
  dc:	43 9a       	sbi	0x08, 3	; 8
  de:	86 fd       	sbrc	r24, 6
              ( 1 << DATA_6_PIN ) |
              ( 1 << DATA_7_PIN ) );
  
  if( nibbleData & ( 1 << 4 ) ) { PORTC |= ( 1 << DATA_4_PIN ); }
  if( nibbleData & ( 1 << 5 ) ) { PORTC |= ( 1 << DATA_5_PIN ); }
  if( nibbleData & ( 1 << 6 ) ) { PORTC |= ( 1 << DATA_6_PIN ); }
  e0:	44 9a       	sbi	0x08, 4	; 8
  if( nibbleData & ( 1 << 7 ) ) { PORTC |= ( 1 << DATA_7_PIN ); }
  e2:	88 23       	and	r24, r24
  e4:	0c f4       	brge	.+2      	; 0xe8 <_Z14LCD_SendNibbleh+0x18>
  e6:	45 9a       	sbi	0x08, 5	; 8

  // Clock the 4 bits into the controller.
  LCD_PulseEnableLine();
  e8:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z19LCD_PulseEnableLinev>
  ec:	08 95       	ret

000000ee <_Z12LCD_SendByteh>:
  // Set the LCD ENABLE line to LOW.
  PORTD &= ~( 1 << ENABLE_PIN );
}

void LCD_SendByte( const uint8_t byteData )
{
  ee:	cf 93       	push	r28
  f0:	c8 2f       	mov	r28, r24
  // Set 4 MSB.
  LCD_SendNibble( byteData );
  f2:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z14LCD_SendNibbleh>

  // Set 4 LSB.
  LCD_SendNibble( byteData << 4 );
  f6:	8c 2f       	mov	r24, r28
  f8:	82 95       	swap	r24
  fa:	80 7f       	andi	r24, 0xF0	; 240
  fc:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z14LCD_SendNibbleh>
}
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <_Z12LCD_SendCharh>:

void LCD_SendChar( const uint8_t charData )
{
  // Set LCD REGISTER SELECT line to 1 to send char data.
  PORTD |= ( 1 << REGISTER_SELECT_PIN );
 104:	5a 9a       	sbi	0x0b, 2	; 11

  // Send the char data to the LCD.
  LCD_SendByte( charData );
 106:	0e 94 77 00 	call	0xee	; 0xee <_Z12LCD_SendByteh>
 10a:	08 95       	ret

0000010c <_Z15LCD_SendCommandh>:
}

void LCD_SendCommand( const uint8_t cmdData )
{
  // Set LCD REGISTER SELECT line to 0 to send command data.
  PORTD &= ~( 1 << REGISTER_SELECT_PIN );
 10c:	5a 98       	cbi	0x0b, 2	; 11

  // Send the command data to the LCD.
  LCD_SendByte( cmdData );
 10e:	0e 94 77 00 	call	0xee	; 0xee <_Z12LCD_SendByteh>
 112:	08 95       	ret

00000114 <_Z14LCD_Initializev>:

void LCD_Initialize()
{
  // Set ports PD2 and PD3 as outputs.
  DDRD |= ( 1 << REGISTER_SELECT_PIN ) |
          ( 1 << ENABLE_PIN );
 114:	8a b1       	in	r24, 0x0a	; 10
 116:	8c 60       	ori	r24, 0x0C	; 12
 118:	8a b9       	out	0x0a, r24	; 10

  // Set ports PC4 to PC7 as outputs.
  DDRC |= ( 1 << DATA_4_PIN ) |
          ( 1 << DATA_5_PIN ) |
          ( 1 << DATA_6_PIN ) |
          ( 1 << DATA_7_PIN );
 11a:	87 b1       	in	r24, 0x07	; 7
 11c:	8c 63       	ori	r24, 0x3C	; 60
 11e:	87 b9       	out	0x07, r24	; 7

  // Initialize the controller.
  LCD_SendCommand( CMD_INIT_CONTROLLER );
 120:	83 e3       	ldi	r24, 0x33	; 51
 122:	0e 94 86 00 	call	0x10c	; 0x10c <_Z15LCD_SendCommandh>

  // Set to 4-bit input mode.
  LCD_SendCommand( CMD_SET_4_BIT_MODE );
 126:	82 e3       	ldi	r24, 0x32	; 50
 128:	0e 94 86 00 	call	0x10c	; 0x10c <_Z15LCD_SendCommandh>

  // 2 line, 5 x 7 matrix.
  LCD_SendCommand( CMD_SET_2_LINE_5X7_MATRIX );
 12c:	88 e2       	ldi	r24, 0x28	; 40
 12e:	0e 94 86 00 	call	0x10c	; 0x10c <_Z15LCD_SendCommandh>

  // Turn the cursor off.
  LCD_SendCommand( CMD_TURN_OFF_CURSOR );
 132:	8c e0       	ldi	r24, 0x0C	; 12
 134:	0e 94 86 00 	call	0x10c	; 0x10c <_Z15LCD_SendCommandh>

  // Set the cursor direction to RIGHT.
  LCD_SendCommand( CMD_SET_CURSOR_DIRECTION_TO_RIGHT );
 138:	86 e0       	ldi	r24, 0x06	; 6
 13a:	0e 94 86 00 	call	0x10c	; 0x10c <_Z15LCD_SendCommandh>

  // Start with a clear display.
  LCD_SendCommand( CMD_CLEAR_DISPLAY );
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	0e 94 86 00 	call	0x10c	; 0x10c <_Z15LCD_SendCommandh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 144:	8f ed       	ldi	r24, 0xDF	; 223
 146:	9e e2       	ldi	r25, 0x2E	; 46
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <_Z14LCD_Initializev+0x34>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <_Z14LCD_Initializev+0x3a>
 14e:	00 00       	nop
 150:	08 95       	ret

00000152 <main>:
#include "LCDDriver.h"
#include "String.h"
#include "USARTDriver.h"

int main()
{
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	cd b7       	in	r28, 0x3d	; 61
 158:	de b7       	in	r29, 0x3e	; 62
 15a:	cc 5e       	subi	r28, 0xEC	; 236
 15c:	d3 40       	sbci	r29, 0x03	; 3
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	f8 94       	cli
 162:	de bf       	out	0x3e, r29	; 62
 164:	0f be       	out	0x3f, r0	; 63
 166:	cd bf       	out	0x3d, r28	; 61
  LCD_Initialize();
 168:	0e 94 8a 00 	call	0x114	; 0x114 <_Z14LCD_Initializev>
  String msg( "Hello World!!!" );
 16c:	6e e0       	ldi	r22, 0x0E	; 14
 16e:	71 e0       	ldi	r23, 0x01	; 1
 170:	ce 01       	movw	r24, r28
 172:	01 96       	adiw	r24, 0x01	; 1
 174:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN6StringC1EPKc>
  // LCD_PrintMessage( msg );
  LCD_SendChar( 'a' );
 178:	81 e6       	ldi	r24, 0x61	; 97
 17a:	0e 94 82 00 	call	0x104	; 0x104 <_Z12LCD_SendCharh>
  DDRB = 0xFF;
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	84 b9       	out	0x04, r24	; 4
  PORTB = 0xFF;
 182:	85 b9       	out	0x05, r24	; 5

  USART_Init();
 184:	0e 94 05 01 	call	0x20a	; 0x20a <_Z10USART_Initv>

  while( 1 )
  {
    USART_SendString( "Hello. I am your debugger!\n" );
 188:	8d e1       	ldi	r24, 0x1D	; 29
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	0e 94 1d 01 	call	0x23a	; 0x23a <_Z16USART_SendStringPc>
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	83 ed       	ldi	r24, 0xD3	; 211
 194:	90 e3       	ldi	r25, 0x30	; 48
 196:	21 50       	subi	r18, 0x01	; 1
 198:	80 40       	sbci	r24, 0x00	; 0
 19a:	90 40       	sbci	r25, 0x00	; 0
 19c:	e1 f7       	brne	.-8      	; 0x196 <main+0x44>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <main+0x4e>
 1a0:	00 00       	nop
 1a2:	f2 cf       	rjmp	.-28     	; 0x188 <main+0x36>

000001a4 <_ZN6StringC1EPKc>:
String::String() : m_idx( 0 )
{
  m_buf[ m_idx ] = '\0';
}

String::String( const char *cstr ) : m_idx( 0 )
 1a4:	1f 93       	push	r17
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	2a e0       	ldi	r18, 0x0A	; 10
 1ac:	31 e0       	ldi	r19, 0x01	; 1
 1ae:	fc 01       	movw	r30, r24
 1b0:	31 83       	std	Z+1, r19	; 0x01
 1b2:	20 83       	st	Z, r18
 1b4:	e6 51       	subi	r30, 0x16	; 22
 1b6:	fc 4f       	sbci	r31, 0xFC	; 252
 1b8:	11 82       	std	Z+1, r1	; 0x01
 1ba:	10 82       	st	Z, r1
{
  unsigned idxLimit = MAX_BUFFER_SIZE - 1;

  while( cstr[ m_idx ] && m_idx < idxLimit )
 1bc:	fb 01       	movw	r30, r22
 1be:	10 81       	ld	r17, Z
 1c0:	11 23       	and	r17, r17
 1c2:	b1 f0       	breq	.+44     	; 0x1f0 <_ZN6StringC1EPKc+0x4c>
 1c4:	dc 01       	movw	r26, r24
 1c6:	12 96       	adiw	r26, 0x02	; 2
 1c8:	31 96       	adiw	r30, 0x01	; 1
 1ca:	ac 01       	movw	r20, r24
 1cc:	47 51       	subi	r20, 0x17	; 23
 1ce:	5c 4f       	sbci	r21, 0xFC	; 252
  {
    m_buf[ m_idx ] = cstr[ m_idx ];
    m_idx++;
 1d0:	ec 01       	movw	r28, r24
 1d2:	c6 51       	subi	r28, 0x16	; 22
 1d4:	dc 4f       	sbci	r29, 0xFC	; 252
{
  unsigned idxLimit = MAX_BUFFER_SIZE - 1;

  while( cstr[ m_idx ] && m_idx < idxLimit )
  {
    m_buf[ m_idx ] = cstr[ m_idx ];
 1d6:	1d 93       	st	X+, r17
 1d8:	9f 01       	movw	r18, r30
 1da:	26 1b       	sub	r18, r22
 1dc:	37 0b       	sbc	r19, r23
    m_idx++;
 1de:	39 83       	std	Y+1, r19	; 0x01
 1e0:	28 83       	st	Y, r18

String::String( const char *cstr ) : m_idx( 0 )
{
  unsigned idxLimit = MAX_BUFFER_SIZE - 1;

  while( cstr[ m_idx ] && m_idx < idxLimit )
 1e2:	11 91       	ld	r17, Z+
 1e4:	11 23       	and	r17, r17
 1e6:	31 f0       	breq	.+12     	; 0x1f4 <_ZN6StringC1EPKc+0x50>
 1e8:	a4 17       	cp	r26, r20
 1ea:	b5 07       	cpc	r27, r21
 1ec:	a1 f7       	brne	.-24     	; 0x1d6 <_ZN6StringC1EPKc+0x32>
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <_ZN6StringC1EPKc+0x50>
 1f0:	20 e0       	ldi	r18, 0x00	; 0
 1f2:	30 e0       	ldi	r19, 0x00	; 0
  {
    m_buf[ m_idx ] = cstr[ m_idx ];
    m_idx++;
  }

  m_buf[ m_idx ] = '\0';
 1f4:	fc 01       	movw	r30, r24
 1f6:	e2 0f       	add	r30, r18
 1f8:	f3 1f       	adc	r31, r19
 1fa:	12 82       	std	Z+2, r1	; 0x02
}
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	1f 91       	pop	r17
 202:	08 95       	ret

00000204 <_ZdlPv>:
  return buf;
}

void operator delete( void *buf )
{
  free( buf );
 204:	0e 94 c4 01 	call	0x388	; 0x388 <free>
 208:	08 95       	ret

0000020a <_Z10USART_Initv>:
#define BAUDRATE       9600
#define BAUD_PRESCALER (((F_CPU / (BAUDRATE * 16UL))) - 1)

void USART_Init( void )
{
  UBRR0H = ( BAUD_PRESCALER >> 8 );
 20a:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = ( BAUD_PRESCALER );
 20e:	87 e6       	ldi	r24, 0x67	; 103
 210:	80 93 c4 00 	sts	0x00C4, r24
  UCSR0B |= ( 1 << RXEN0 ) | ( 1 << TXEN0 );
 214:	e1 ec       	ldi	r30, 0xC1	; 193
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	88 61       	ori	r24, 0x18	; 24
 21c:	80 83       	st	Z, r24
  UCSR0C |= ( 1 << UCSZ00 ) | ( 1 << UCSZ01 );
 21e:	e2 ec       	ldi	r30, 0xC2	; 194
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	80 81       	ld	r24, Z
 224:	86 60       	ori	r24, 0x06	; 6
 226:	80 83       	st	Z, r24
 228:	08 95       	ret

0000022a <_Z14USART_SendByteh>:
  return receivedString;
}

void USART_SendByte( unsigned char data )
{
  while( ! ( UCSR0A & ( 1 << UDRE0 ) ) );
 22a:	e0 ec       	ldi	r30, 0xC0	; 192
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	90 81       	ld	r25, Z
 230:	95 ff       	sbrs	r25, 5
 232:	fd cf       	rjmp	.-6      	; 0x22e <_Z14USART_SendByteh+0x4>
  UDR0 = data;
 234:	80 93 c6 00 	sts	0x00C6, r24
 238:	08 95       	ret

0000023a <_Z16USART_SendStringPc>:
}

void USART_SendString( char* stringPtr )
{
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	ec 01       	movw	r28, r24
  while( *stringPtr != 0x00 )
 240:	88 81       	ld	r24, Y
 242:	88 23       	and	r24, r24
 244:	31 f0       	breq	.+12     	; 0x252 <_Z16USART_SendStringPc+0x18>
 246:	21 96       	adiw	r28, 0x01	; 1
  {
    USART_SendByte( *stringPtr++ );
 248:	0e 94 15 01 	call	0x22a	; 0x22a <_Z14USART_SendByteh>
  UDR0 = data;
}

void USART_SendString( char* stringPtr )
{
  while( *stringPtr != 0x00 )
 24c:	89 91       	ld	r24, Y+
 24e:	81 11       	cpse	r24, r1
 250:	fb cf       	rjmp	.-10     	; 0x248 <_Z16USART_SendStringPc+0xe>
  {
    USART_SendByte( *stringPtr++ );
  }
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	08 95       	ret

00000258 <malloc>:
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	82 30       	cpi	r24, 0x02	; 2
 25e:	91 05       	cpc	r25, r1
 260:	10 f4       	brcc	.+4      	; 0x266 <malloc+0xe>
 262:	82 e0       	ldi	r24, 0x02	; 2
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	e0 91 3c 01 	lds	r30, 0x013C
 26a:	f0 91 3d 01 	lds	r31, 0x013D
 26e:	20 e0       	ldi	r18, 0x00	; 0
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	a0 e0       	ldi	r26, 0x00	; 0
 274:	b0 e0       	ldi	r27, 0x00	; 0
 276:	30 97       	sbiw	r30, 0x00	; 0
 278:	39 f1       	breq	.+78     	; 0x2c8 <malloc+0x70>
 27a:	40 81       	ld	r20, Z
 27c:	51 81       	ldd	r21, Z+1	; 0x01
 27e:	48 17       	cp	r20, r24
 280:	59 07       	cpc	r21, r25
 282:	b8 f0       	brcs	.+46     	; 0x2b2 <malloc+0x5a>
 284:	48 17       	cp	r20, r24
 286:	59 07       	cpc	r21, r25
 288:	71 f4       	brne	.+28     	; 0x2a6 <malloc+0x4e>
 28a:	82 81       	ldd	r24, Z+2	; 0x02
 28c:	93 81       	ldd	r25, Z+3	; 0x03
 28e:	10 97       	sbiw	r26, 0x00	; 0
 290:	29 f0       	breq	.+10     	; 0x29c <malloc+0x44>
 292:	13 96       	adiw	r26, 0x03	; 3
 294:	9c 93       	st	X, r25
 296:	8e 93       	st	-X, r24
 298:	12 97       	sbiw	r26, 0x02	; 2
 29a:	2c c0       	rjmp	.+88     	; 0x2f4 <malloc+0x9c>
 29c:	90 93 3d 01 	sts	0x013D, r25
 2a0:	80 93 3c 01 	sts	0x013C, r24
 2a4:	27 c0       	rjmp	.+78     	; 0x2f4 <malloc+0x9c>
 2a6:	21 15       	cp	r18, r1
 2a8:	31 05       	cpc	r19, r1
 2aa:	31 f0       	breq	.+12     	; 0x2b8 <malloc+0x60>
 2ac:	42 17       	cp	r20, r18
 2ae:	53 07       	cpc	r21, r19
 2b0:	18 f0       	brcs	.+6      	; 0x2b8 <malloc+0x60>
 2b2:	a9 01       	movw	r20, r18
 2b4:	db 01       	movw	r26, r22
 2b6:	01 c0       	rjmp	.+2      	; 0x2ba <malloc+0x62>
 2b8:	ef 01       	movw	r28, r30
 2ba:	9a 01       	movw	r18, r20
 2bc:	bd 01       	movw	r22, r26
 2be:	df 01       	movw	r26, r30
 2c0:	02 80       	ldd	r0, Z+2	; 0x02
 2c2:	f3 81       	ldd	r31, Z+3	; 0x03
 2c4:	e0 2d       	mov	r30, r0
 2c6:	d7 cf       	rjmp	.-82     	; 0x276 <malloc+0x1e>
 2c8:	21 15       	cp	r18, r1
 2ca:	31 05       	cpc	r19, r1
 2cc:	f9 f0       	breq	.+62     	; 0x30c <malloc+0xb4>
 2ce:	28 1b       	sub	r18, r24
 2d0:	39 0b       	sbc	r19, r25
 2d2:	24 30       	cpi	r18, 0x04	; 4
 2d4:	31 05       	cpc	r19, r1
 2d6:	80 f4       	brcc	.+32     	; 0x2f8 <malloc+0xa0>
 2d8:	8a 81       	ldd	r24, Y+2	; 0x02
 2da:	9b 81       	ldd	r25, Y+3	; 0x03
 2dc:	61 15       	cp	r22, r1
 2de:	71 05       	cpc	r23, r1
 2e0:	21 f0       	breq	.+8      	; 0x2ea <malloc+0x92>
 2e2:	fb 01       	movw	r30, r22
 2e4:	93 83       	std	Z+3, r25	; 0x03
 2e6:	82 83       	std	Z+2, r24	; 0x02
 2e8:	04 c0       	rjmp	.+8      	; 0x2f2 <malloc+0x9a>
 2ea:	90 93 3d 01 	sts	0x013D, r25
 2ee:	80 93 3c 01 	sts	0x013C, r24
 2f2:	fe 01       	movw	r30, r28
 2f4:	32 96       	adiw	r30, 0x02	; 2
 2f6:	44 c0       	rjmp	.+136    	; 0x380 <malloc+0x128>
 2f8:	fe 01       	movw	r30, r28
 2fa:	e2 0f       	add	r30, r18
 2fc:	f3 1f       	adc	r31, r19
 2fe:	81 93       	st	Z+, r24
 300:	91 93       	st	Z+, r25
 302:	22 50       	subi	r18, 0x02	; 2
 304:	31 09       	sbc	r19, r1
 306:	39 83       	std	Y+1, r19	; 0x01
 308:	28 83       	st	Y, r18
 30a:	3a c0       	rjmp	.+116    	; 0x380 <malloc+0x128>
 30c:	20 91 3a 01 	lds	r18, 0x013A
 310:	30 91 3b 01 	lds	r19, 0x013B
 314:	23 2b       	or	r18, r19
 316:	41 f4       	brne	.+16     	; 0x328 <malloc+0xd0>
 318:	20 91 02 01 	lds	r18, 0x0102
 31c:	30 91 03 01 	lds	r19, 0x0103
 320:	30 93 3b 01 	sts	0x013B, r19
 324:	20 93 3a 01 	sts	0x013A, r18
 328:	20 91 00 01 	lds	r18, 0x0100
 32c:	30 91 01 01 	lds	r19, 0x0101
 330:	21 15       	cp	r18, r1
 332:	31 05       	cpc	r19, r1
 334:	41 f4       	brne	.+16     	; 0x346 <malloc+0xee>
 336:	2d b7       	in	r18, 0x3d	; 61
 338:	3e b7       	in	r19, 0x3e	; 62
 33a:	40 91 04 01 	lds	r20, 0x0104
 33e:	50 91 05 01 	lds	r21, 0x0105
 342:	24 1b       	sub	r18, r20
 344:	35 0b       	sbc	r19, r21
 346:	e0 91 3a 01 	lds	r30, 0x013A
 34a:	f0 91 3b 01 	lds	r31, 0x013B
 34e:	e2 17       	cp	r30, r18
 350:	f3 07       	cpc	r31, r19
 352:	a0 f4       	brcc	.+40     	; 0x37c <malloc+0x124>
 354:	2e 1b       	sub	r18, r30
 356:	3f 0b       	sbc	r19, r31
 358:	28 17       	cp	r18, r24
 35a:	39 07       	cpc	r19, r25
 35c:	78 f0       	brcs	.+30     	; 0x37c <malloc+0x124>
 35e:	ac 01       	movw	r20, r24
 360:	4e 5f       	subi	r20, 0xFE	; 254
 362:	5f 4f       	sbci	r21, 0xFF	; 255
 364:	24 17       	cp	r18, r20
 366:	35 07       	cpc	r19, r21
 368:	48 f0       	brcs	.+18     	; 0x37c <malloc+0x124>
 36a:	4e 0f       	add	r20, r30
 36c:	5f 1f       	adc	r21, r31
 36e:	50 93 3b 01 	sts	0x013B, r21
 372:	40 93 3a 01 	sts	0x013A, r20
 376:	81 93       	st	Z+, r24
 378:	91 93       	st	Z+, r25
 37a:	02 c0       	rjmp	.+4      	; 0x380 <malloc+0x128>
 37c:	e0 e0       	ldi	r30, 0x00	; 0
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	cf 01       	movw	r24, r30
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	08 95       	ret

00000388 <free>:
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	00 97       	sbiw	r24, 0x00	; 0
 38e:	09 f4       	brne	.+2      	; 0x392 <free+0xa>
 390:	87 c0       	rjmp	.+270    	; 0x4a0 <free+0x118>
 392:	fc 01       	movw	r30, r24
 394:	32 97       	sbiw	r30, 0x02	; 2
 396:	13 82       	std	Z+3, r1	; 0x03
 398:	12 82       	std	Z+2, r1	; 0x02
 39a:	c0 91 3c 01 	lds	r28, 0x013C
 39e:	d0 91 3d 01 	lds	r29, 0x013D
 3a2:	20 97       	sbiw	r28, 0x00	; 0
 3a4:	81 f4       	brne	.+32     	; 0x3c6 <free+0x3e>
 3a6:	20 81       	ld	r18, Z
 3a8:	31 81       	ldd	r19, Z+1	; 0x01
 3aa:	28 0f       	add	r18, r24
 3ac:	39 1f       	adc	r19, r25
 3ae:	80 91 3a 01 	lds	r24, 0x013A
 3b2:	90 91 3b 01 	lds	r25, 0x013B
 3b6:	82 17       	cp	r24, r18
 3b8:	93 07       	cpc	r25, r19
 3ba:	79 f5       	brne	.+94     	; 0x41a <free+0x92>
 3bc:	f0 93 3b 01 	sts	0x013B, r31
 3c0:	e0 93 3a 01 	sts	0x013A, r30
 3c4:	6d c0       	rjmp	.+218    	; 0x4a0 <free+0x118>
 3c6:	de 01       	movw	r26, r28
 3c8:	20 e0       	ldi	r18, 0x00	; 0
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	ae 17       	cp	r26, r30
 3ce:	bf 07       	cpc	r27, r31
 3d0:	50 f4       	brcc	.+20     	; 0x3e6 <free+0x5e>
 3d2:	12 96       	adiw	r26, 0x02	; 2
 3d4:	4d 91       	ld	r20, X+
 3d6:	5c 91       	ld	r21, X
 3d8:	13 97       	sbiw	r26, 0x03	; 3
 3da:	9d 01       	movw	r18, r26
 3dc:	41 15       	cp	r20, r1
 3de:	51 05       	cpc	r21, r1
 3e0:	09 f1       	breq	.+66     	; 0x424 <free+0x9c>
 3e2:	da 01       	movw	r26, r20
 3e4:	f3 cf       	rjmp	.-26     	; 0x3cc <free+0x44>
 3e6:	b3 83       	std	Z+3, r27	; 0x03
 3e8:	a2 83       	std	Z+2, r26	; 0x02
 3ea:	40 81       	ld	r20, Z
 3ec:	51 81       	ldd	r21, Z+1	; 0x01
 3ee:	84 0f       	add	r24, r20
 3f0:	95 1f       	adc	r25, r21
 3f2:	8a 17       	cp	r24, r26
 3f4:	9b 07       	cpc	r25, r27
 3f6:	71 f4       	brne	.+28     	; 0x414 <free+0x8c>
 3f8:	8d 91       	ld	r24, X+
 3fa:	9c 91       	ld	r25, X
 3fc:	11 97       	sbiw	r26, 0x01	; 1
 3fe:	84 0f       	add	r24, r20
 400:	95 1f       	adc	r25, r21
 402:	02 96       	adiw	r24, 0x02	; 2
 404:	91 83       	std	Z+1, r25	; 0x01
 406:	80 83       	st	Z, r24
 408:	12 96       	adiw	r26, 0x02	; 2
 40a:	8d 91       	ld	r24, X+
 40c:	9c 91       	ld	r25, X
 40e:	13 97       	sbiw	r26, 0x03	; 3
 410:	93 83       	std	Z+3, r25	; 0x03
 412:	82 83       	std	Z+2, r24	; 0x02
 414:	21 15       	cp	r18, r1
 416:	31 05       	cpc	r19, r1
 418:	29 f4       	brne	.+10     	; 0x424 <free+0x9c>
 41a:	f0 93 3d 01 	sts	0x013D, r31
 41e:	e0 93 3c 01 	sts	0x013C, r30
 422:	3e c0       	rjmp	.+124    	; 0x4a0 <free+0x118>
 424:	d9 01       	movw	r26, r18
 426:	13 96       	adiw	r26, 0x03	; 3
 428:	fc 93       	st	X, r31
 42a:	ee 93       	st	-X, r30
 42c:	12 97       	sbiw	r26, 0x02	; 2
 42e:	4d 91       	ld	r20, X+
 430:	5d 91       	ld	r21, X+
 432:	a4 0f       	add	r26, r20
 434:	b5 1f       	adc	r27, r21
 436:	ea 17       	cp	r30, r26
 438:	fb 07       	cpc	r31, r27
 43a:	79 f4       	brne	.+30     	; 0x45a <free+0xd2>
 43c:	80 81       	ld	r24, Z
 43e:	91 81       	ldd	r25, Z+1	; 0x01
 440:	84 0f       	add	r24, r20
 442:	95 1f       	adc	r25, r21
 444:	02 96       	adiw	r24, 0x02	; 2
 446:	d9 01       	movw	r26, r18
 448:	11 96       	adiw	r26, 0x01	; 1
 44a:	9c 93       	st	X, r25
 44c:	8e 93       	st	-X, r24
 44e:	82 81       	ldd	r24, Z+2	; 0x02
 450:	93 81       	ldd	r25, Z+3	; 0x03
 452:	13 96       	adiw	r26, 0x03	; 3
 454:	9c 93       	st	X, r25
 456:	8e 93       	st	-X, r24
 458:	12 97       	sbiw	r26, 0x02	; 2
 45a:	e0 e0       	ldi	r30, 0x00	; 0
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	8a 81       	ldd	r24, Y+2	; 0x02
 460:	9b 81       	ldd	r25, Y+3	; 0x03
 462:	00 97       	sbiw	r24, 0x00	; 0
 464:	19 f0       	breq	.+6      	; 0x46c <free+0xe4>
 466:	fe 01       	movw	r30, r28
 468:	ec 01       	movw	r28, r24
 46a:	f9 cf       	rjmp	.-14     	; 0x45e <free+0xd6>
 46c:	ce 01       	movw	r24, r28
 46e:	02 96       	adiw	r24, 0x02	; 2
 470:	28 81       	ld	r18, Y
 472:	39 81       	ldd	r19, Y+1	; 0x01
 474:	82 0f       	add	r24, r18
 476:	93 1f       	adc	r25, r19
 478:	20 91 3a 01 	lds	r18, 0x013A
 47c:	30 91 3b 01 	lds	r19, 0x013B
 480:	28 17       	cp	r18, r24
 482:	39 07       	cpc	r19, r25
 484:	69 f4       	brne	.+26     	; 0x4a0 <free+0x118>
 486:	30 97       	sbiw	r30, 0x00	; 0
 488:	29 f4       	brne	.+10     	; 0x494 <free+0x10c>
 48a:	10 92 3d 01 	sts	0x013D, r1
 48e:	10 92 3c 01 	sts	0x013C, r1
 492:	02 c0       	rjmp	.+4      	; 0x498 <free+0x110>
 494:	13 82       	std	Z+3, r1	; 0x03
 496:	12 82       	std	Z+2, r1	; 0x02
 498:	d0 93 3b 01 	sts	0x013B, r29
 49c:	c0 93 3a 01 	sts	0x013A, r28
 4a0:	df 91       	pop	r29
 4a2:	cf 91       	pop	r28
 4a4:	08 95       	ret

000004a6 <_exit>:
 4a6:	f8 94       	cli

000004a8 <__stop_program>:
 4a8:	ff cf       	rjmp	.-2      	; 0x4a8 <__stop_program>
