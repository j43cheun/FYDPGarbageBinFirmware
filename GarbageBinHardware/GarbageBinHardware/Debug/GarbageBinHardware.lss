
GarbageBinHardware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009c  00800100  0000208c  00002120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000208c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b6  0080019c  0080019c  000021bc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000021bc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000358  00000000  00000000  00002218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00006243  00000000  00000000  00002570  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001716  00000000  00000000  000087b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000108d  00000000  00000000  00009ec9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000964  00000000  00000000  0000af58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000017e4  00000000  00000000  0000b8bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002821  00000000  00000000  0000d0a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002f0  00000000  00000000  0000f8c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
{
  while( *text ) { LCD_SendChar( *text++ ); }
}

void LCD_PrintHex( const int data )
{
       0:	0c 94 df 00 	jmp	0x1be	; 0x1be <__ctors_end>
       4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
       8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
       c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      10:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  // Allocate space for result.
  char st[8] = "";
      14:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      18:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      1c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      20:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
      24:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      28:	0c 94 a1 01 	jmp	0x342	; 0x342 <__vector_10>
      2c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  
  // Convert data to ASCII hex.
  itoa( data, st, 16 );
  
  // Prepend "0x" prefix.
  LCD_PrintMessage( "0x" );
      30:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      34:	0c 94 90 01 	jmp	0x320	; 0x320 <__vector_13>
  
  // Print the data to LCD.
  LCD_PrintMessage( st );
      38:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      3c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
}
      40:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      44:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      48:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      4c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      50:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      54:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      58:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      5c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      60:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      64:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      68:	6a 0b       	sbc	r22, r26
      6a:	7b 0b       	sbc	r23, r27
      6c:	84 0b       	sbc	r24, r20
      6e:	8a 0b       	sbc	r24, r26
      70:	93 0b       	sbc	r25, r19
      72:	b2 0b       	sbc	r27, r18
      74:	bb 0b       	sbc	r27, r27
      76:	c4 0b       	sbc	r28, r20
      78:	cd 0b       	sbc	r28, r29
      7a:	d5 0b       	sbc	r29, r21
      7c:	d5 0b       	sbc	r29, r21
      7e:	d5 0b       	sbc	r29, r21
      80:	d5 0b       	sbc	r29, r21
      82:	d5 0b       	sbc	r29, r21
      84:	d5 0b       	sbc	r29, r21
      86:	d5 0b       	sbc	r29, r21
      88:	d5 0b       	sbc	r29, r21
      8a:	d5 0b       	sbc	r29, r21
      8c:	d5 0b       	sbc	r29, r21
      8e:	d5 0b       	sbc	r29, r21
      90:	d5 0b       	sbc	r29, r21
      92:	d5 0b       	sbc	r29, r21
      94:	d5 0b       	sbc	r29, r21
      96:	d5 0b       	sbc	r29, r21
      98:	d5 0b       	sbc	r29, r21
      9a:	d5 0b       	sbc	r29, r21
      9c:	d5 0b       	sbc	r29, r21
      9e:	d5 0b       	sbc	r29, r21
      a0:	d5 0b       	sbc	r29, r21
      a2:	d5 0b       	sbc	r29, r21
      a4:	d5 0b       	sbc	r29, r21
      a6:	d5 0b       	sbc	r29, r21
      a8:	6a 0b       	sbc	r22, r26
      aa:	72 0b       	sbc	r23, r18
      ac:	7b 0b       	sbc	r23, r27
      ae:	84 0b       	sbc	r24, r20
      b0:	8a 0b       	sbc	r24, r26
      b2:	93 0b       	sbc	r25, r19
      b4:	99 0b       	sbc	r25, r25
      b6:	a1 0b       	sbc	r26, r17
      b8:	aa 0b       	sbc	r26, r26

000000ba <__trampolines_end>:
      ba:	6e 61       	ori	r22, 0x1E	; 30
      bc:	6e 00       	.word	0x006e	; ????

000000be <__c.2159>:
      be:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      ce:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      de:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      ee:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      fe:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     10e:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     11e:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     12e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     13e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     14e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     15e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     16e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     17e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     18e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     19e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1ae:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001bc <__ctors_start>:
     1bc:	8b 01       	movw	r16, r22

000001be <__ctors_end>:
     1be:	11 24       	eor	r1, r1
     1c0:	1f be       	out	0x3f, r1	; 63
     1c2:	cf ef       	ldi	r28, 0xFF	; 255
     1c4:	d8 e0       	ldi	r29, 0x08	; 8
     1c6:	de bf       	out	0x3e, r29	; 62
     1c8:	cd bf       	out	0x3d, r28	; 61

000001ca <__do_copy_data>:
     1ca:	11 e0       	ldi	r17, 0x01	; 1
     1cc:	a0 e0       	ldi	r26, 0x00	; 0
     1ce:	b1 e0       	ldi	r27, 0x01	; 1
     1d0:	ec e8       	ldi	r30, 0x8C	; 140
     1d2:	f0 e2       	ldi	r31, 0x20	; 32
     1d4:	02 c0       	rjmp	.+4      	; 0x1da <__do_copy_data+0x10>
     1d6:	05 90       	lpm	r0, Z+
     1d8:	0d 92       	st	X+, r0
     1da:	ac 39       	cpi	r26, 0x9C	; 156
     1dc:	b1 07       	cpc	r27, r17
     1de:	d9 f7       	brne	.-10     	; 0x1d6 <__do_copy_data+0xc>

000001e0 <__do_clear_bss>:
     1e0:	22 e0       	ldi	r18, 0x02	; 2
     1e2:	ac e9       	ldi	r26, 0x9C	; 156
     1e4:	b1 e0       	ldi	r27, 0x01	; 1
     1e6:	01 c0       	rjmp	.+2      	; 0x1ea <.do_clear_bss_start>

000001e8 <.do_clear_bss_loop>:
     1e8:	1d 92       	st	X+, r1

000001ea <.do_clear_bss_start>:
     1ea:	a2 35       	cpi	r26, 0x52	; 82
     1ec:	b2 07       	cpc	r27, r18
     1ee:	e1 f7       	brne	.-8      	; 0x1e8 <.do_clear_bss_loop>

000001f0 <__do_global_ctors>:
     1f0:	11 e0       	ldi	r17, 0x01	; 1
     1f2:	ce eb       	ldi	r28, 0xBE	; 190
     1f4:	d1 e0       	ldi	r29, 0x01	; 1
     1f6:	04 c0       	rjmp	.+8      	; 0x200 <__do_global_ctors+0x10>
     1f8:	22 97       	sbiw	r28, 0x02	; 2
     1fa:	fe 01       	movw	r30, r28
     1fc:	0e 94 c5 0c 	call	0x198a	; 0x198a <__tablejump__>
     200:	cc 3b       	cpi	r28, 0xBC	; 188
     202:	d1 07       	cpc	r29, r17
     204:	c9 f7       	brne	.-14     	; 0x1f8 <__do_global_ctors+0x8>
     206:	0e 94 cc 01 	call	0x398	; 0x398 <main>
     20a:	0c 94 44 10 	jmp	0x2088	; 0x2088 <_exit>

0000020e <__bad_interrupt>:
     20e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000212 <_ZN6StringD1Ev>:
class String
{
public:
  String();
  String( const char *cstr );
  virtual ~String() {}
     212:	2a e0       	ldi	r18, 0x0A	; 10
     214:	31 e0       	ldi	r19, 0x01	; 1
     216:	fc 01       	movw	r30, r24
     218:	31 83       	std	Z+1, r19	; 0x01
     21a:	20 83       	st	Z, r18
     21c:	08 95       	ret

0000021e <_ZN6StringD0Ev>:
     21e:	2a e0       	ldi	r18, 0x0A	; 10
     220:	31 e0       	ldi	r19, 0x01	; 1
     222:	fc 01       	movw	r30, r24
     224:	31 83       	std	Z+1, r19	; 0x01
     226:	20 83       	st	Z, r18
  return buf;
}

void operator delete( void *buf )
{
  free( buf );
     228:	0e 94 54 02 	call	0x4a8	; 0x4a8 <_ZdlPv>
     22c:	08 95       	ret

0000022e <_Z17GPS_GetCoordinatev>:
#include "USARTDriver.h"

TinyGPSPlus GPS_tinyGPS;

GPSCoordinate GPS_GetCoordinate()
{
     22e:	cf 92       	push	r12
     230:	df 92       	push	r13
     232:	ef 92       	push	r14
     234:	ff 92       	push	r15
     236:	0f 93       	push	r16
     238:	1f 93       	push	r17
     23a:	cf 93       	push	r28
     23c:	df 93       	push	r29
     23e:	cd b7       	in	r28, 0x3d	; 61
     240:	de b7       	in	r29, 0x3e	; 62
     242:	c4 5f       	subi	r28, 0xF4	; 244
     244:	d3 40       	sbci	r29, 0x03	; 3
     246:	0f b6       	in	r0, 0x3f	; 63
     248:	f8 94       	cli
     24a:	de bf       	out	0x3e, r29	; 62
     24c:	0f be       	out	0x3f, r0	; 63
     24e:	cd bf       	out	0x3d, r28	; 61
struct TinyGPSLocation
{
  friend class TinyGPSPlus;
  public:
  bool isValid() const    { return valid; }
  bool isUpdated() const  { return updated; }
     250:	0f 2e       	mov	r0, r31
     252:	fd e9       	ldi	r31, 0x9D	; 157
     254:	ef 2e       	mov	r14, r31
     256:	f1 e0       	ldi	r31, 0x01	; 1
     258:	ff 2e       	mov	r15, r31
     25a:	f0 2d       	mov	r31, r0
struct TinyGPSDecimal
{
  friend class TinyGPSPlus;
  public:
  bool isValid() const    { return valid; }
  bool isUpdated() const  { return updated; }
     25c:	0f 2e       	mov	r0, r31
     25e:	f7 ef       	ldi	r31, 0xF7	; 247
     260:	cf 2e       	mov	r12, r31
     262:	f1 e0       	ldi	r31, 0x01	; 1
     264:	df 2e       	mov	r13, r31
     266:	f0 2d       	mov	r31, r0
  struct GPSCoordinate gpsCoordinate;
  bool gpsNotUpdated = true;

  while( gpsNotUpdated )
  {
    const char *recvbuf = USART_ReceiveString( '\n', 5 ).ToCString();
     268:	45 e0       	ldi	r20, 0x05	; 5
     26a:	50 e0       	ldi	r21, 0x00	; 0
     26c:	6a e0       	ldi	r22, 0x0A	; 10
     26e:	ce 01       	movw	r24, r28
     270:	09 96       	adiw	r24, 0x09	; 9
     272:	0e 94 6e 02 	call	0x4dc	; 0x4dc <_Z19USART_ReceiveStringhj>
    unsigned recvbufIdx = 0;

    while( recvbuf[ recvbufIdx ] )
     276:	6b 85       	ldd	r22, Y+11	; 0x0b
     278:	66 23       	and	r22, r22
     27a:	61 f0       	breq	.+24     	; 0x294 <_Z17GPS_GetCoordinatev+0x66>
     27c:	8e 01       	movw	r16, r28
     27e:	04 5f       	subi	r16, 0xF4	; 244
     280:	1f 4f       	sbci	r17, 0xFF	; 255
    {
      GPS_tinyGPS.encode( recvbuf[ recvbufIdx++ ] );
     282:	8c e9       	ldi	r24, 0x9C	; 156
     284:	91 e0       	ldi	r25, 0x01	; 1
     286:	0e 94 16 0c 	call	0x182c	; 0x182c <_ZN11TinyGPSPlus6encodeEc>
  while( gpsNotUpdated )
  {
    const char *recvbuf = USART_ReceiveString( '\n', 5 ).ToCString();
    unsigned recvbufIdx = 0;

    while( recvbuf[ recvbufIdx ] )
     28a:	f8 01       	movw	r30, r16
     28c:	61 91       	ld	r22, Z+
     28e:	8f 01       	movw	r16, r30
     290:	61 11       	cpse	r22, r1
     292:	f7 cf       	rjmp	.-18     	; 0x282 <_Z17GPS_GetCoordinatev+0x54>
    {
      GPS_tinyGPS.encode( recvbuf[ recvbufIdx++ ] );
    }

    if( GPS_tinyGPS.location.isUpdated() || GPS_tinyGPS.altitude.isUpdated() )
     294:	f7 01       	movw	r30, r14
     296:	80 81       	ld	r24, Z
     298:	81 11       	cpse	r24, r1
     29a:	04 c0       	rjmp	.+8      	; 0x2a4 <_Z17GPS_GetCoordinatev+0x76>
     29c:	f6 01       	movw	r30, r12
     29e:	80 81       	ld	r24, Z
     2a0:	88 23       	and	r24, r24
     2a2:	11 f3       	breq	.-60     	; 0x268 <_Z17GPS_GetCoordinatev+0x3a>
    {
      gpsCoordinate.m_latitude = ( float )GPS_tinyGPS.location.lat();
     2a4:	8c e9       	ldi	r24, 0x9C	; 156
     2a6:	91 e0       	ldi	r25, 0x01	; 1
     2a8:	0e 94 65 09 	call	0x12ca	; 0x12ca <_ZN15TinyGPSLocation3latEv>
     2ac:	16 2f       	mov	r17, r22
     2ae:	e7 2e       	mov	r14, r23
     2b0:	f8 2e       	mov	r15, r24
     2b2:	09 2f       	mov	r16, r25
      gpsCoordinate.m_longitude = ( float )GPS_tinyGPS.location.lng();
     2b4:	8c e9       	ldi	r24, 0x9C	; 156
     2b6:	91 e0       	ldi	r25, 0x01	; 1
     2b8:	0e 94 91 09 	call	0x1322	; 0x1322 <_ZN15TinyGPSLocation3lngEv>
     2bc:	e6 2f       	mov	r30, r22
     2be:	27 2f       	mov	r18, r23
      gpsNotUpdated = false;
    }
  }

  return gpsCoordinate;
     2c0:	41 2f       	mov	r20, r17
     2c2:	5e 2d       	mov	r21, r14
     2c4:	6f 2d       	mov	r22, r15
     2c6:	70 2f       	mov	r23, r16
     2c8:	49 83       	std	Y+1, r20	; 0x01
     2ca:	5a 83       	std	Y+2, r21	; 0x02
     2cc:	6b 83       	std	Y+3, r22	; 0x03
     2ce:	7c 83       	std	Y+4, r23	; 0x04
     2d0:	4e 2f       	mov	r20, r30
     2d2:	52 2f       	mov	r21, r18
     2d4:	68 2f       	mov	r22, r24
     2d6:	79 2f       	mov	r23, r25
     2d8:	4d 83       	std	Y+5, r20	; 0x05
     2da:	5e 83       	std	Y+6, r21	; 0x06
     2dc:	6f 83       	std	Y+7, r22	; 0x07
     2de:	78 87       	std	Y+8, r23	; 0x08
     2e0:	21 2f       	mov	r18, r17
     2e2:	3a 81       	ldd	r19, Y+2	; 0x02
     2e4:	4b 81       	ldd	r20, Y+3	; 0x03
     2e6:	5c 81       	ldd	r21, Y+4	; 0x04
     2e8:	6e 2f       	mov	r22, r30
     2ea:	7e 81       	ldd	r23, Y+6	; 0x06
}
     2ec:	8f 81       	ldd	r24, Y+7	; 0x07
     2ee:	98 85       	ldd	r25, Y+8	; 0x08
     2f0:	cc 50       	subi	r28, 0x0C	; 12
     2f2:	dc 4f       	sbci	r29, 0xFC	; 252
     2f4:	0f b6       	in	r0, 0x3f	; 63
     2f6:	f8 94       	cli
     2f8:	de bf       	out	0x3e, r29	; 62
     2fa:	0f be       	out	0x3f, r0	; 63
     2fc:	cd bf       	out	0x3d, r28	; 61
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	1f 91       	pop	r17
     304:	0f 91       	pop	r16
     306:	ff 90       	pop	r15
     308:	ef 90       	pop	r14
     30a:	df 90       	pop	r13
     30c:	cf 90       	pop	r12
     30e:	08 95       	ret

00000310 <_Z8GPS_Initv>:

void GPS_Init()
{
  USART_Init();
     310:	0e 94 57 02 	call	0x4ae	; 0x4ae <_Z10USART_Initv>
     314:	08 95       	ret

00000316 <_GLOBAL__sub_I_GPS_tinyGPS>:
#include "GPSDriver.h"
#include "String.h"
#include "TinyGPS++.h"
#include "USARTDriver.h"

TinyGPSPlus GPS_tinyGPS;
     316:	8c e9       	ldi	r24, 0x9C	; 156
     318:	91 e0       	ldi	r25, 0x01	; 1
     31a:	0e 94 a2 07 	call	0xf44	; 0xf44 <_ZN11TinyGPSPlusC1Ev>
     31e:	08 95       	ret

00000320 <__vector_13>:
volatile uint16_t HCSR04_measuredTransmitToReceiveTime = 0;
volatile bool HCSR04_timerOverflowFlag = false;
volatile bool HCSR04_waitFlag = false;

ISR( TIMER1_OVF_vect )
{
     320:	1f 92       	push	r1
     322:	0f 92       	push	r0
     324:	0f b6       	in	r0, 0x3f	; 63
     326:	0f 92       	push	r0
     328:	11 24       	eor	r1, r1
     32a:	8f 93       	push	r24
  // Indicate that TIMER1 counter has overflowed.
  HCSR04_timerOverflowFlag = true;
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	80 93 4a 02 	sts	0x024A, r24

  // Indicate that the program can stop waiting.
  HCSR04_waitFlag = false;
     332:	10 92 49 02 	sts	0x0249, r1
}
     336:	8f 91       	pop	r24
     338:	0f 90       	pop	r0
     33a:	0f be       	out	0x3f, r0	; 63
     33c:	0f 90       	pop	r0
     33e:	1f 90       	pop	r1
     340:	18 95       	reti

00000342 <__vector_10>:

ISR( TIMER1_CAPT_vect )
{
     342:	1f 92       	push	r1
     344:	0f 92       	push	r0
     346:	0f b6       	in	r0, 0x3f	; 63
     348:	0f 92       	push	r0
     34a:	11 24       	eor	r1, r1
     34c:	8f 93       	push	r24
     34e:	9f 93       	push	r25
     350:	ef 93       	push	r30
     352:	ff 93       	push	r31
  // If input capture was previously on a rising edge trigger...
  if( ( TCCR1B & ( 1 << ICES1 ) ) == ( 1 << ICES1 ) )
     354:	80 91 81 00 	lds	r24, 0x0081
     358:	86 ff       	sbrs	r24, 6
     35a:	0b c0       	rjmp	.+22     	; 0x372 <__vector_10+0x30>
  {
    // Reset input capture to a falling edge trigger.
    TCCR1B ^= ( 1 << ICES1 );
     35c:	e1 e8       	ldi	r30, 0x81	; 129
     35e:	f0 e0       	ldi	r31, 0x00	; 0
     360:	90 81       	ld	r25, Z
     362:	80 e4       	ldi	r24, 0x40	; 64
     364:	89 27       	eor	r24, r25
     366:	80 83       	st	Z, r24

    // Restart TIMER1 counter counting from 0.
    TCNT1 = 0;
     368:	10 92 85 00 	sts	0x0085, r1
     36c:	10 92 84 00 	sts	0x0084, r1
     370:	0a c0       	rjmp	.+20     	; 0x386 <__vector_10+0x44>
  }
  else
  {
    // Set the transmit to receive time.
    HCSR04_measuredTransmitToReceiveTime = TCNT1;
     372:	80 91 84 00 	lds	r24, 0x0084
     376:	90 91 85 00 	lds	r25, 0x0085
     37a:	90 93 4c 02 	sts	0x024C, r25
     37e:	80 93 4b 02 	sts	0x024B, r24

    // Indicate that the program can stop waiting.
    HCSR04_waitFlag = false;
     382:	10 92 49 02 	sts	0x0249, r1
  }
}
     386:	ff 91       	pop	r31
     388:	ef 91       	pop	r30
     38a:	9f 91       	pop	r25
     38c:	8f 91       	pop	r24
     38e:	0f 90       	pop	r0
     390:	0f be       	out	0x3f, r0	; 63
     392:	0f 90       	pop	r0
     394:	1f 90       	pop	r1
     396:	18 95       	reti

00000398 <main>:
  }
  return 0;
}

int main()
{
     398:	cf 93       	push	r28
     39a:	df 93       	push	r29
     39c:	cd b7       	in	r28, 0x3d	; 61
     39e:	de b7       	in	r29, 0x3e	; 62
     3a0:	cc 56       	subi	r28, 0x6C	; 108
     3a2:	d1 09       	sbc	r29, r1
     3a4:	0f b6       	in	r0, 0x3f	; 63
     3a6:	f8 94       	cli
     3a8:	de bf       	out	0x3e, r29	; 62
     3aa:	0f be       	out	0x3f, r0	; 63
     3ac:	cd bf       	out	0x3d, r28	; 61
  GPS_Init();
     3ae:	0e 94 88 01 	call	0x310	; 0x310 <_Z8GPS_Initv>

  while( 1 )
  {
    struct GPSCoordinate gpsCoordinate = GPS_GetCoordinate();
    char buf[100];
    sprintf( buf, "LAT: %f LNG: %f\n", gpsCoordinate.m_latitude, gpsCoordinate.m_longitude );
     3b2:	0f 2e       	mov	r0, r31
     3b4:	fe e0       	ldi	r31, 0x0E	; 14
     3b6:	ef 2e       	mov	r14, r31
     3b8:	f1 e0       	ldi	r31, 0x01	; 1
     3ba:	ff 2e       	mov	r15, r31
     3bc:	f0 2d       	mov	r31, r0
     3be:	8e 01       	movw	r16, r28
     3c0:	0f 5f       	subi	r16, 0xFF	; 255
     3c2:	1f 4f       	sbci	r17, 0xFF	; 255
{
  GPS_Init();

  while( 1 )
  {
    struct GPSCoordinate gpsCoordinate = GPS_GetCoordinate();
     3c4:	0e 94 17 01 	call	0x22e	; 0x22e <_Z17GPS_GetCoordinatev>
     3c8:	a6 96       	adiw	r28, 0x26	; 38
     3ca:	2f af       	std	Y+63, r18	; 0x3f
     3cc:	a6 97       	sbiw	r28, 0x26	; 38
     3ce:	a7 96       	adiw	r28, 0x27	; 39
     3d0:	3f af       	std	Y+63, r19	; 0x3f
     3d2:	a7 97       	sbiw	r28, 0x27	; 39
     3d4:	a8 96       	adiw	r28, 0x28	; 40
     3d6:	4f af       	std	Y+63, r20	; 0x3f
     3d8:	a8 97       	sbiw	r28, 0x28	; 40
     3da:	a9 96       	adiw	r28, 0x29	; 41
     3dc:	5f af       	std	Y+63, r21	; 0x3f
     3de:	a9 97       	sbiw	r28, 0x29	; 41
     3e0:	aa 96       	adiw	r28, 0x2a	; 42
     3e2:	6f af       	std	Y+63, r22	; 0x3f
     3e4:	aa 97       	sbiw	r28, 0x2a	; 42
     3e6:	ab 96       	adiw	r28, 0x2b	; 43
     3e8:	7f af       	std	Y+63, r23	; 0x3f
     3ea:	ab 97       	sbiw	r28, 0x2b	; 43
     3ec:	ac 96       	adiw	r28, 0x2c	; 44
     3ee:	8f af       	std	Y+63, r24	; 0x3f
     3f0:	ac 97       	sbiw	r28, 0x2c	; 44
     3f2:	ad 96       	adiw	r28, 0x2d	; 45
     3f4:	9f af       	std	Y+63, r25	; 0x3f
     3f6:	ad 97       	sbiw	r28, 0x2d	; 45
    char buf[100];
    sprintf( buf, "LAT: %f LNG: %f\n", gpsCoordinate.m_latitude, gpsCoordinate.m_longitude );
     3f8:	9f 93       	push	r25
     3fa:	ac 96       	adiw	r28, 0x2c	; 44
     3fc:	8f ad       	ldd	r24, Y+63	; 0x3f
     3fe:	ac 97       	sbiw	r28, 0x2c	; 44
     400:	8f 93       	push	r24
     402:	ab 96       	adiw	r28, 0x2b	; 43
     404:	8f ad       	ldd	r24, Y+63	; 0x3f
     406:	ab 97       	sbiw	r28, 0x2b	; 43
     408:	8f 93       	push	r24
     40a:	aa 96       	adiw	r28, 0x2a	; 42
     40c:	8f ad       	ldd	r24, Y+63	; 0x3f
     40e:	aa 97       	sbiw	r28, 0x2a	; 42
     410:	8f 93       	push	r24
     412:	a9 96       	adiw	r28, 0x29	; 41
     414:	8f ad       	ldd	r24, Y+63	; 0x3f
     416:	a9 97       	sbiw	r28, 0x29	; 41
     418:	8f 93       	push	r24
     41a:	a8 96       	adiw	r28, 0x28	; 40
     41c:	8f ad       	ldd	r24, Y+63	; 0x3f
     41e:	a8 97       	sbiw	r28, 0x28	; 40
     420:	8f 93       	push	r24
     422:	a7 96       	adiw	r28, 0x27	; 39
     424:	8f ad       	ldd	r24, Y+63	; 0x3f
     426:	a7 97       	sbiw	r28, 0x27	; 39
     428:	8f 93       	push	r24
     42a:	a6 96       	adiw	r28, 0x26	; 38
     42c:	8f ad       	ldd	r24, Y+63	; 0x3f
     42e:	a6 97       	sbiw	r28, 0x26	; 38
     430:	8f 93       	push	r24
     432:	ff 92       	push	r15
     434:	ef 92       	push	r14
     436:	1f 93       	push	r17
     438:	0f 93       	push	r16
     43a:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <sprintf>
    USART_SendString( buf );
     43e:	c8 01       	movw	r24, r16
     440:	0e 94 bd 02 	call	0x57a	; 0x57a <_Z16USART_SendStringPKc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     444:	2f ef       	ldi	r18, 0xFF	; 255
     446:	83 ed       	ldi	r24, 0xD3	; 211
     448:	90 e3       	ldi	r25, 0x30	; 48
     44a:	21 50       	subi	r18, 0x01	; 1
     44c:	80 40       	sbci	r24, 0x00	; 0
     44e:	90 40       	sbci	r25, 0x00	; 0
     450:	e1 f7       	brne	.-8      	; 0x44a <main+0xb2>
     452:	00 c0       	rjmp	.+0      	; 0x454 <main+0xbc>
     454:	00 00       	nop
     456:	0f b6       	in	r0, 0x3f	; 63
     458:	f8 94       	cli
     45a:	de bf       	out	0x3e, r29	; 62
     45c:	0f be       	out	0x3f, r0	; 63
     45e:	cd bf       	out	0x3d, r28	; 61
     460:	b1 cf       	rjmp	.-158    	; 0x3c4 <main+0x2c>

00000462 <_ZN6StringC1Ev>:
 *  Author: Justin
 */ 

#include "String.h"

String::String() : m_idx( 0 )
     462:	2a e0       	ldi	r18, 0x0A	; 10
     464:	31 e0       	ldi	r19, 0x01	; 1
     466:	fc 01       	movw	r30, r24
     468:	31 83       	std	Z+1, r19	; 0x01
     46a:	20 83       	st	Z, r18
     46c:	e6 51       	subi	r30, 0x16	; 22
     46e:	fc 4f       	sbci	r31, 0xFC	; 252
     470:	11 82       	std	Z+1, r1	; 0x01
     472:	10 82       	st	Z, r1
{
  m_buf[ m_idx ] = '\0';
     474:	fc 01       	movw	r30, r24
     476:	12 82       	std	Z+2, r1	; 0x02
     478:	08 95       	ret

0000047a <_ZN6StringpLEh>:
  m_buf[ m_idx ] = '\0';
}

void String::operator+=( const unsigned char charArg )
{
  if( m_idx < MAX_BUFFER_SIZE - 1 )
     47a:	fc 01       	movw	r30, r24
     47c:	e6 51       	subi	r30, 0x16	; 22
     47e:	fc 4f       	sbci	r31, 0xFC	; 252
     480:	20 81       	ld	r18, Z
     482:	31 81       	ldd	r19, Z+1	; 0x01
     484:	27 3e       	cpi	r18, 0xE7	; 231
     486:	43 e0       	ldi	r20, 0x03	; 3
     488:	34 07       	cpc	r19, r20
     48a:	68 f4       	brcc	.+26     	; 0x4a6 <_ZN6StringpLEh+0x2c>
  {
    m_buf[m_idx++] = charArg;
     48c:	a9 01       	movw	r20, r18
     48e:	4f 5f       	subi	r20, 0xFF	; 255
     490:	5f 4f       	sbci	r21, 0xFF	; 255
     492:	51 83       	std	Z+1, r21	; 0x01
     494:	40 83       	st	Z, r20
     496:	fc 01       	movw	r30, r24
     498:	e2 0f       	add	r30, r18
     49a:	f3 1f       	adc	r31, r19
     49c:	62 83       	std	Z+2, r22	; 0x02
    m_buf[m_idx] = '\0';
     49e:	fc 01       	movw	r30, r24
     4a0:	e4 0f       	add	r30, r20
     4a2:	f5 1f       	adc	r31, r21
     4a4:	12 82       	std	Z+2, r1	; 0x02
     4a6:	08 95       	ret

000004a8 <_ZdlPv>:
  return buf;
}

void operator delete( void *buf )
{
  free( buf );
     4a8:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <free>
     4ac:	08 95       	ret

000004ae <_Z10USART_Initv>:

volatile bool USART_initializeFlag = false;

void USART_Init( void )
{
  if( !USART_initializeFlag )
     4ae:	80 91 4d 02 	lds	r24, 0x024D
     4b2:	81 11       	cpse	r24, r1
     4b4:	12 c0       	rjmp	.+36     	; 0x4da <_Z10USART_Initv+0x2c>
  {
    UBRR0H = ( BAUD_PRESCALER >> 8 );
     4b6:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = ( BAUD_PRESCALER );
     4ba:	87 e6       	ldi	r24, 0x67	; 103
     4bc:	80 93 c4 00 	sts	0x00C4, r24
    UCSR0B |= ( 1 << RXEN0 ) | ( 1 << TXEN0 );
     4c0:	e1 ec       	ldi	r30, 0xC1	; 193
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	80 81       	ld	r24, Z
     4c6:	88 61       	ori	r24, 0x18	; 24
     4c8:	80 83       	st	Z, r24
    UCSR0C |= ( 1 << UCSZ00 ) | ( 1 << UCSZ01 );
     4ca:	e2 ec       	ldi	r30, 0xC2	; 194
     4cc:	f0 e0       	ldi	r31, 0x00	; 0
     4ce:	80 81       	ld	r24, Z
     4d0:	86 60       	ori	r24, 0x06	; 6
     4d2:	80 83       	st	Z, r24
    USART_initializeFlag = true;
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	80 93 4d 02 	sts	0x024D, r24
     4da:	08 95       	ret

000004dc <_Z19USART_ReceiveStringhj>:
  while( !( UCSR0A & ( 1 << RXC0 ) ) );
  return UDR0;
}

String USART_ReceiveString( unsigned char terminator, unsigned terminationCount )
{
     4dc:	6f 92       	push	r6
     4de:	7f 92       	push	r7
     4e0:	8f 92       	push	r8
     4e2:	9f 92       	push	r9
     4e4:	af 92       	push	r10
     4e6:	bf 92       	push	r11
     4e8:	cf 92       	push	r12
     4ea:	df 92       	push	r13
     4ec:	ef 92       	push	r14
     4ee:	ff 92       	push	r15
     4f0:	0f 93       	push	r16
     4f2:	1f 93       	push	r17
     4f4:	cf 93       	push	r28
     4f6:	df 93       	push	r29
     4f8:	4c 01       	movw	r8, r24
     4fa:	66 2e       	mov	r6, r22
     4fc:	5a 01       	movw	r10, r20
  String receivedString;
     4fe:	0e 94 31 02 	call	0x462	; 0x462 <_ZN6StringC1Ev>
  unsigned char receivedByte;
  unsigned newlineCount = 0;
     502:	00 e0       	ldi	r16, 0x00	; 0
     504:	10 e0       	ldi	r17, 0x00	; 0
  
  do
  {
    while( !( UCSR0A & ( 1 << RXC0 ) ) );
     506:	c0 ec       	ldi	r28, 0xC0	; 192
     508:	d0 e0       	ldi	r29, 0x00	; 0
    receivedByte = UDR0;
     50a:	0f 2e       	mov	r0, r31
     50c:	f6 ec       	ldi	r31, 0xC6	; 198
     50e:	cf 2e       	mov	r12, r31
     510:	d1 2c       	mov	r13, r1
     512:	f0 2d       	mov	r31, r0

  const bool BufferIsFull() const { return m_idx == MAX_BUFFER_SIZE; }
     514:	74 01       	movw	r14, r8
     516:	26 e1       	ldi	r18, 0x16	; 22
     518:	e2 1a       	sub	r14, r18
     51a:	2c ef       	ldi	r18, 0xFC	; 252
     51c:	f2 0a       	sbc	r15, r18
  unsigned char receivedByte;
  unsigned newlineCount = 0;
  
  do
  {
    while( !( UCSR0A & ( 1 << RXC0 ) ) );
     51e:	88 81       	ld	r24, Y
     520:	88 23       	and	r24, r24
     522:	ec f7       	brge	.-6      	; 0x51e <_Z19USART_ReceiveStringhj+0x42>
    receivedByte = UDR0;
     524:	f6 01       	movw	r30, r12
     526:	70 80       	ld	r7, Z
    receivedString += receivedByte;
     528:	67 2d       	mov	r22, r7
     52a:	c4 01       	movw	r24, r8
     52c:	0e 94 3d 02 	call	0x47a	; 0x47a <_ZN6StringpLEh>
    
    if( receivedByte == terminator )
     530:	76 10       	cpse	r7, r6
     532:	02 c0       	rjmp	.+4      	; 0x538 <_Z19USART_ReceiveStringhj+0x5c>
    {
      newlineCount++;
     534:	0f 5f       	subi	r16, 0xFF	; 255
     536:	1f 4f       	sbci	r17, 0xFF	; 255
    }
    
  } while( !receivedString.BufferIsFull() && newlineCount < terminationCount );
     538:	f7 01       	movw	r30, r14
     53a:	80 81       	ld	r24, Z
     53c:	91 81       	ldd	r25, Z+1	; 0x01
     53e:	88 3e       	cpi	r24, 0xE8	; 232
     540:	93 40       	sbci	r25, 0x03	; 3
     542:	19 f0       	breq	.+6      	; 0x54a <_Z19USART_ReceiveStringhj+0x6e>
     544:	0a 15       	cp	r16, r10
     546:	1b 05       	cpc	r17, r11
     548:	50 f3       	brcs	.-44     	; 0x51e <_Z19USART_ReceiveStringhj+0x42>

  return receivedString;
}
     54a:	c4 01       	movw	r24, r8
     54c:	df 91       	pop	r29
     54e:	cf 91       	pop	r28
     550:	1f 91       	pop	r17
     552:	0f 91       	pop	r16
     554:	ff 90       	pop	r15
     556:	ef 90       	pop	r14
     558:	df 90       	pop	r13
     55a:	cf 90       	pop	r12
     55c:	bf 90       	pop	r11
     55e:	af 90       	pop	r10
     560:	9f 90       	pop	r9
     562:	8f 90       	pop	r8
     564:	7f 90       	pop	r7
     566:	6f 90       	pop	r6
     568:	08 95       	ret

0000056a <_Z14USART_SendByteh>:

void USART_SendByte( unsigned char data )
{
  while( ! ( UCSR0A & ( 1 << UDRE0 ) ) );
     56a:	e0 ec       	ldi	r30, 0xC0	; 192
     56c:	f0 e0       	ldi	r31, 0x00	; 0
     56e:	90 81       	ld	r25, Z
     570:	95 ff       	sbrs	r25, 5
     572:	fd cf       	rjmp	.-6      	; 0x56e <_Z14USART_SendByteh+0x4>
  UDR0 = data;
     574:	80 93 c6 00 	sts	0x00C6, r24
     578:	08 95       	ret

0000057a <_Z16USART_SendStringPKc>:
}

void USART_SendString( const char* stringPtr )
{
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	ec 01       	movw	r28, r24
  while( *stringPtr != 0x00 )
     580:	88 81       	ld	r24, Y
     582:	88 23       	and	r24, r24
     584:	31 f0       	breq	.+12     	; 0x592 <_Z16USART_SendStringPKc+0x18>
     586:	21 96       	adiw	r28, 0x01	; 1
  {
    USART_SendByte( *stringPtr++ );
     588:	0e 94 b5 02 	call	0x56a	; 0x56a <_Z14USART_SendByteh>
  UDR0 = data;
}

void USART_SendString( const char* stringPtr )
{
  while( *stringPtr != 0x00 )
     58c:	89 91       	ld	r24, Y+
     58e:	81 11       	cpse	r24, r1
     590:	fb cf       	rjmp	.-10     	; 0x588 <_Z16USART_SendStringPKc+0xe>
  {
    USART_SendByte( *stringPtr++ );
  }
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	08 95       	ret

00000598 <__subsf3>:
     598:	50 58       	subi	r21, 0x80	; 128

0000059a <__addsf3>:
     59a:	bb 27       	eor	r27, r27
     59c:	aa 27       	eor	r26, r26
     59e:	0e d0       	rcall	.+28     	; 0x5bc <__addsf3x>
     5a0:	1c c1       	rjmp	.+568    	; 0x7da <__fp_round>
     5a2:	0d d1       	rcall	.+538    	; 0x7be <__fp_pscA>
     5a4:	30 f0       	brcs	.+12     	; 0x5b2 <__addsf3+0x18>
     5a6:	12 d1       	rcall	.+548    	; 0x7cc <__fp_pscB>
     5a8:	20 f0       	brcs	.+8      	; 0x5b2 <__addsf3+0x18>
     5aa:	31 f4       	brne	.+12     	; 0x5b8 <__addsf3+0x1e>
     5ac:	9f 3f       	cpi	r25, 0xFF	; 255
     5ae:	11 f4       	brne	.+4      	; 0x5b4 <__addsf3+0x1a>
     5b0:	1e f4       	brtc	.+6      	; 0x5b8 <__addsf3+0x1e>
     5b2:	02 c1       	rjmp	.+516    	; 0x7b8 <__fp_nan>
     5b4:	0e f4       	brtc	.+2      	; 0x5b8 <__addsf3+0x1e>
     5b6:	e0 95       	com	r30
     5b8:	e7 fb       	bst	r30, 7
     5ba:	f8 c0       	rjmp	.+496    	; 0x7ac <__fp_inf>

000005bc <__addsf3x>:
     5bc:	e9 2f       	mov	r30, r25
     5be:	1e d1       	rcall	.+572    	; 0x7fc <__fp_split3>
     5c0:	80 f3       	brcs	.-32     	; 0x5a2 <__addsf3+0x8>
     5c2:	ba 17       	cp	r27, r26
     5c4:	62 07       	cpc	r22, r18
     5c6:	73 07       	cpc	r23, r19
     5c8:	84 07       	cpc	r24, r20
     5ca:	95 07       	cpc	r25, r21
     5cc:	18 f0       	brcs	.+6      	; 0x5d4 <__addsf3x+0x18>
     5ce:	71 f4       	brne	.+28     	; 0x5ec <__addsf3x+0x30>
     5d0:	9e f5       	brtc	.+102    	; 0x638 <__addsf3x+0x7c>
     5d2:	36 c1       	rjmp	.+620    	; 0x840 <__fp_zero>
     5d4:	0e f4       	brtc	.+2      	; 0x5d8 <__addsf3x+0x1c>
     5d6:	e0 95       	com	r30
     5d8:	0b 2e       	mov	r0, r27
     5da:	ba 2f       	mov	r27, r26
     5dc:	a0 2d       	mov	r26, r0
     5de:	0b 01       	movw	r0, r22
     5e0:	b9 01       	movw	r22, r18
     5e2:	90 01       	movw	r18, r0
     5e4:	0c 01       	movw	r0, r24
     5e6:	ca 01       	movw	r24, r20
     5e8:	a0 01       	movw	r20, r0
     5ea:	11 24       	eor	r1, r1
     5ec:	ff 27       	eor	r31, r31
     5ee:	59 1b       	sub	r21, r25
     5f0:	99 f0       	breq	.+38     	; 0x618 <__addsf3x+0x5c>
     5f2:	59 3f       	cpi	r21, 0xF9	; 249
     5f4:	50 f4       	brcc	.+20     	; 0x60a <__addsf3x+0x4e>
     5f6:	50 3e       	cpi	r21, 0xE0	; 224
     5f8:	68 f1       	brcs	.+90     	; 0x654 <__addsf3x+0x98>
     5fa:	1a 16       	cp	r1, r26
     5fc:	f0 40       	sbci	r31, 0x00	; 0
     5fe:	a2 2f       	mov	r26, r18
     600:	23 2f       	mov	r18, r19
     602:	34 2f       	mov	r19, r20
     604:	44 27       	eor	r20, r20
     606:	58 5f       	subi	r21, 0xF8	; 248
     608:	f3 cf       	rjmp	.-26     	; 0x5f0 <__addsf3x+0x34>
     60a:	46 95       	lsr	r20
     60c:	37 95       	ror	r19
     60e:	27 95       	ror	r18
     610:	a7 95       	ror	r26
     612:	f0 40       	sbci	r31, 0x00	; 0
     614:	53 95       	inc	r21
     616:	c9 f7       	brne	.-14     	; 0x60a <__addsf3x+0x4e>
     618:	7e f4       	brtc	.+30     	; 0x638 <__addsf3x+0x7c>
     61a:	1f 16       	cp	r1, r31
     61c:	ba 0b       	sbc	r27, r26
     61e:	62 0b       	sbc	r22, r18
     620:	73 0b       	sbc	r23, r19
     622:	84 0b       	sbc	r24, r20
     624:	ba f0       	brmi	.+46     	; 0x654 <__addsf3x+0x98>
     626:	91 50       	subi	r25, 0x01	; 1
     628:	a1 f0       	breq	.+40     	; 0x652 <__addsf3x+0x96>
     62a:	ff 0f       	add	r31, r31
     62c:	bb 1f       	adc	r27, r27
     62e:	66 1f       	adc	r22, r22
     630:	77 1f       	adc	r23, r23
     632:	88 1f       	adc	r24, r24
     634:	c2 f7       	brpl	.-16     	; 0x626 <__addsf3x+0x6a>
     636:	0e c0       	rjmp	.+28     	; 0x654 <__addsf3x+0x98>
     638:	ba 0f       	add	r27, r26
     63a:	62 1f       	adc	r22, r18
     63c:	73 1f       	adc	r23, r19
     63e:	84 1f       	adc	r24, r20
     640:	48 f4       	brcc	.+18     	; 0x654 <__addsf3x+0x98>
     642:	87 95       	ror	r24
     644:	77 95       	ror	r23
     646:	67 95       	ror	r22
     648:	b7 95       	ror	r27
     64a:	f7 95       	ror	r31
     64c:	9e 3f       	cpi	r25, 0xFE	; 254
     64e:	08 f0       	brcs	.+2      	; 0x652 <__addsf3x+0x96>
     650:	b3 cf       	rjmp	.-154    	; 0x5b8 <__addsf3+0x1e>
     652:	93 95       	inc	r25
     654:	88 0f       	add	r24, r24
     656:	08 f0       	brcs	.+2      	; 0x65a <__addsf3x+0x9e>
     658:	99 27       	eor	r25, r25
     65a:	ee 0f       	add	r30, r30
     65c:	97 95       	ror	r25
     65e:	87 95       	ror	r24
     660:	08 95       	ret

00000662 <__divsf3>:
     662:	0c d0       	rcall	.+24     	; 0x67c <__divsf3x>
     664:	ba c0       	rjmp	.+372    	; 0x7da <__fp_round>
     666:	b2 d0       	rcall	.+356    	; 0x7cc <__fp_pscB>
     668:	40 f0       	brcs	.+16     	; 0x67a <__divsf3+0x18>
     66a:	a9 d0       	rcall	.+338    	; 0x7be <__fp_pscA>
     66c:	30 f0       	brcs	.+12     	; 0x67a <__divsf3+0x18>
     66e:	21 f4       	brne	.+8      	; 0x678 <__divsf3+0x16>
     670:	5f 3f       	cpi	r21, 0xFF	; 255
     672:	19 f0       	breq	.+6      	; 0x67a <__divsf3+0x18>
     674:	9b c0       	rjmp	.+310    	; 0x7ac <__fp_inf>
     676:	51 11       	cpse	r21, r1
     678:	e4 c0       	rjmp	.+456    	; 0x842 <__fp_szero>
     67a:	9e c0       	rjmp	.+316    	; 0x7b8 <__fp_nan>

0000067c <__divsf3x>:
     67c:	bf d0       	rcall	.+382    	; 0x7fc <__fp_split3>
     67e:	98 f3       	brcs	.-26     	; 0x666 <__divsf3+0x4>

00000680 <__divsf3_pse>:
     680:	99 23       	and	r25, r25
     682:	c9 f3       	breq	.-14     	; 0x676 <__divsf3+0x14>
     684:	55 23       	and	r21, r21
     686:	b1 f3       	breq	.-20     	; 0x674 <__divsf3+0x12>
     688:	95 1b       	sub	r25, r21
     68a:	55 0b       	sbc	r21, r21
     68c:	bb 27       	eor	r27, r27
     68e:	aa 27       	eor	r26, r26
     690:	62 17       	cp	r22, r18
     692:	73 07       	cpc	r23, r19
     694:	84 07       	cpc	r24, r20
     696:	38 f0       	brcs	.+14     	; 0x6a6 <__divsf3_pse+0x26>
     698:	9f 5f       	subi	r25, 0xFF	; 255
     69a:	5f 4f       	sbci	r21, 0xFF	; 255
     69c:	22 0f       	add	r18, r18
     69e:	33 1f       	adc	r19, r19
     6a0:	44 1f       	adc	r20, r20
     6a2:	aa 1f       	adc	r26, r26
     6a4:	a9 f3       	breq	.-22     	; 0x690 <__divsf3_pse+0x10>
     6a6:	33 d0       	rcall	.+102    	; 0x70e <__divsf3_pse+0x8e>
     6a8:	0e 2e       	mov	r0, r30
     6aa:	3a f0       	brmi	.+14     	; 0x6ba <__divsf3_pse+0x3a>
     6ac:	e0 e8       	ldi	r30, 0x80	; 128
     6ae:	30 d0       	rcall	.+96     	; 0x710 <__divsf3_pse+0x90>
     6b0:	91 50       	subi	r25, 0x01	; 1
     6b2:	50 40       	sbci	r21, 0x00	; 0
     6b4:	e6 95       	lsr	r30
     6b6:	00 1c       	adc	r0, r0
     6b8:	ca f7       	brpl	.-14     	; 0x6ac <__divsf3_pse+0x2c>
     6ba:	29 d0       	rcall	.+82     	; 0x70e <__divsf3_pse+0x8e>
     6bc:	fe 2f       	mov	r31, r30
     6be:	27 d0       	rcall	.+78     	; 0x70e <__divsf3_pse+0x8e>
     6c0:	66 0f       	add	r22, r22
     6c2:	77 1f       	adc	r23, r23
     6c4:	88 1f       	adc	r24, r24
     6c6:	bb 1f       	adc	r27, r27
     6c8:	26 17       	cp	r18, r22
     6ca:	37 07       	cpc	r19, r23
     6cc:	48 07       	cpc	r20, r24
     6ce:	ab 07       	cpc	r26, r27
     6d0:	b0 e8       	ldi	r27, 0x80	; 128
     6d2:	09 f0       	breq	.+2      	; 0x6d6 <__divsf3_pse+0x56>
     6d4:	bb 0b       	sbc	r27, r27
     6d6:	80 2d       	mov	r24, r0
     6d8:	bf 01       	movw	r22, r30
     6da:	ff 27       	eor	r31, r31
     6dc:	93 58       	subi	r25, 0x83	; 131
     6de:	5f 4f       	sbci	r21, 0xFF	; 255
     6e0:	2a f0       	brmi	.+10     	; 0x6ec <__divsf3_pse+0x6c>
     6e2:	9e 3f       	cpi	r25, 0xFE	; 254
     6e4:	51 05       	cpc	r21, r1
     6e6:	68 f0       	brcs	.+26     	; 0x702 <__divsf3_pse+0x82>
     6e8:	61 c0       	rjmp	.+194    	; 0x7ac <__fp_inf>
     6ea:	ab c0       	rjmp	.+342    	; 0x842 <__fp_szero>
     6ec:	5f 3f       	cpi	r21, 0xFF	; 255
     6ee:	ec f3       	brlt	.-6      	; 0x6ea <__divsf3_pse+0x6a>
     6f0:	98 3e       	cpi	r25, 0xE8	; 232
     6f2:	dc f3       	brlt	.-10     	; 0x6ea <__divsf3_pse+0x6a>
     6f4:	86 95       	lsr	r24
     6f6:	77 95       	ror	r23
     6f8:	67 95       	ror	r22
     6fa:	b7 95       	ror	r27
     6fc:	f7 95       	ror	r31
     6fe:	9f 5f       	subi	r25, 0xFF	; 255
     700:	c9 f7       	brne	.-14     	; 0x6f4 <__divsf3_pse+0x74>
     702:	88 0f       	add	r24, r24
     704:	91 1d       	adc	r25, r1
     706:	96 95       	lsr	r25
     708:	87 95       	ror	r24
     70a:	97 f9       	bld	r25, 7
     70c:	08 95       	ret
     70e:	e1 e0       	ldi	r30, 0x01	; 1
     710:	66 0f       	add	r22, r22
     712:	77 1f       	adc	r23, r23
     714:	88 1f       	adc	r24, r24
     716:	bb 1f       	adc	r27, r27
     718:	62 17       	cp	r22, r18
     71a:	73 07       	cpc	r23, r19
     71c:	84 07       	cpc	r24, r20
     71e:	ba 07       	cpc	r27, r26
     720:	20 f0       	brcs	.+8      	; 0x72a <__divsf3_pse+0xaa>
     722:	62 1b       	sub	r22, r18
     724:	73 0b       	sbc	r23, r19
     726:	84 0b       	sbc	r24, r20
     728:	ba 0b       	sbc	r27, r26
     72a:	ee 1f       	adc	r30, r30
     72c:	88 f7       	brcc	.-30     	; 0x710 <__divsf3_pse+0x90>
     72e:	e0 95       	com	r30
     730:	08 95       	ret

00000732 <__floatunsisf>:
     732:	e8 94       	clt
     734:	09 c0       	rjmp	.+18     	; 0x748 <__floatsisf+0x12>

00000736 <__floatsisf>:
     736:	97 fb       	bst	r25, 7
     738:	3e f4       	brtc	.+14     	; 0x748 <__floatsisf+0x12>
     73a:	90 95       	com	r25
     73c:	80 95       	com	r24
     73e:	70 95       	com	r23
     740:	61 95       	neg	r22
     742:	7f 4f       	sbci	r23, 0xFF	; 255
     744:	8f 4f       	sbci	r24, 0xFF	; 255
     746:	9f 4f       	sbci	r25, 0xFF	; 255
     748:	99 23       	and	r25, r25
     74a:	a9 f0       	breq	.+42     	; 0x776 <__floatsisf+0x40>
     74c:	f9 2f       	mov	r31, r25
     74e:	96 e9       	ldi	r25, 0x96	; 150
     750:	bb 27       	eor	r27, r27
     752:	93 95       	inc	r25
     754:	f6 95       	lsr	r31
     756:	87 95       	ror	r24
     758:	77 95       	ror	r23
     75a:	67 95       	ror	r22
     75c:	b7 95       	ror	r27
     75e:	f1 11       	cpse	r31, r1
     760:	f8 cf       	rjmp	.-16     	; 0x752 <__floatsisf+0x1c>
     762:	fa f4       	brpl	.+62     	; 0x7a2 <__floatsisf+0x6c>
     764:	bb 0f       	add	r27, r27
     766:	11 f4       	brne	.+4      	; 0x76c <__floatsisf+0x36>
     768:	60 ff       	sbrs	r22, 0
     76a:	1b c0       	rjmp	.+54     	; 0x7a2 <__floatsisf+0x6c>
     76c:	6f 5f       	subi	r22, 0xFF	; 255
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	8f 4f       	sbci	r24, 0xFF	; 255
     772:	9f 4f       	sbci	r25, 0xFF	; 255
     774:	16 c0       	rjmp	.+44     	; 0x7a2 <__floatsisf+0x6c>
     776:	88 23       	and	r24, r24
     778:	11 f0       	breq	.+4      	; 0x77e <__floatsisf+0x48>
     77a:	96 e9       	ldi	r25, 0x96	; 150
     77c:	11 c0       	rjmp	.+34     	; 0x7a0 <__floatsisf+0x6a>
     77e:	77 23       	and	r23, r23
     780:	21 f0       	breq	.+8      	; 0x78a <__floatsisf+0x54>
     782:	9e e8       	ldi	r25, 0x8E	; 142
     784:	87 2f       	mov	r24, r23
     786:	76 2f       	mov	r23, r22
     788:	05 c0       	rjmp	.+10     	; 0x794 <__floatsisf+0x5e>
     78a:	66 23       	and	r22, r22
     78c:	71 f0       	breq	.+28     	; 0x7aa <__floatsisf+0x74>
     78e:	96 e8       	ldi	r25, 0x86	; 134
     790:	86 2f       	mov	r24, r22
     792:	70 e0       	ldi	r23, 0x00	; 0
     794:	60 e0       	ldi	r22, 0x00	; 0
     796:	2a f0       	brmi	.+10     	; 0x7a2 <__floatsisf+0x6c>
     798:	9a 95       	dec	r25
     79a:	66 0f       	add	r22, r22
     79c:	77 1f       	adc	r23, r23
     79e:	88 1f       	adc	r24, r24
     7a0:	da f7       	brpl	.-10     	; 0x798 <__floatsisf+0x62>
     7a2:	88 0f       	add	r24, r24
     7a4:	96 95       	lsr	r25
     7a6:	87 95       	ror	r24
     7a8:	97 f9       	bld	r25, 7
     7aa:	08 95       	ret

000007ac <__fp_inf>:
     7ac:	97 f9       	bld	r25, 7
     7ae:	9f 67       	ori	r25, 0x7F	; 127
     7b0:	80 e8       	ldi	r24, 0x80	; 128
     7b2:	70 e0       	ldi	r23, 0x00	; 0
     7b4:	60 e0       	ldi	r22, 0x00	; 0
     7b6:	08 95       	ret

000007b8 <__fp_nan>:
     7b8:	9f ef       	ldi	r25, 0xFF	; 255
     7ba:	80 ec       	ldi	r24, 0xC0	; 192
     7bc:	08 95       	ret

000007be <__fp_pscA>:
     7be:	00 24       	eor	r0, r0
     7c0:	0a 94       	dec	r0
     7c2:	16 16       	cp	r1, r22
     7c4:	17 06       	cpc	r1, r23
     7c6:	18 06       	cpc	r1, r24
     7c8:	09 06       	cpc	r0, r25
     7ca:	08 95       	ret

000007cc <__fp_pscB>:
     7cc:	00 24       	eor	r0, r0
     7ce:	0a 94       	dec	r0
     7d0:	12 16       	cp	r1, r18
     7d2:	13 06       	cpc	r1, r19
     7d4:	14 06       	cpc	r1, r20
     7d6:	05 06       	cpc	r0, r21
     7d8:	08 95       	ret

000007da <__fp_round>:
     7da:	09 2e       	mov	r0, r25
     7dc:	03 94       	inc	r0
     7de:	00 0c       	add	r0, r0
     7e0:	11 f4       	brne	.+4      	; 0x7e6 <__fp_round+0xc>
     7e2:	88 23       	and	r24, r24
     7e4:	52 f0       	brmi	.+20     	; 0x7fa <__fp_round+0x20>
     7e6:	bb 0f       	add	r27, r27
     7e8:	40 f4       	brcc	.+16     	; 0x7fa <__fp_round+0x20>
     7ea:	bf 2b       	or	r27, r31
     7ec:	11 f4       	brne	.+4      	; 0x7f2 <__fp_round+0x18>
     7ee:	60 ff       	sbrs	r22, 0
     7f0:	04 c0       	rjmp	.+8      	; 0x7fa <__fp_round+0x20>
     7f2:	6f 5f       	subi	r22, 0xFF	; 255
     7f4:	7f 4f       	sbci	r23, 0xFF	; 255
     7f6:	8f 4f       	sbci	r24, 0xFF	; 255
     7f8:	9f 4f       	sbci	r25, 0xFF	; 255
     7fa:	08 95       	ret

000007fc <__fp_split3>:
     7fc:	57 fd       	sbrc	r21, 7
     7fe:	90 58       	subi	r25, 0x80	; 128
     800:	44 0f       	add	r20, r20
     802:	55 1f       	adc	r21, r21
     804:	59 f0       	breq	.+22     	; 0x81c <__fp_splitA+0x10>
     806:	5f 3f       	cpi	r21, 0xFF	; 255
     808:	71 f0       	breq	.+28     	; 0x826 <__fp_splitA+0x1a>
     80a:	47 95       	ror	r20

0000080c <__fp_splitA>:
     80c:	88 0f       	add	r24, r24
     80e:	97 fb       	bst	r25, 7
     810:	99 1f       	adc	r25, r25
     812:	61 f0       	breq	.+24     	; 0x82c <__fp_splitA+0x20>
     814:	9f 3f       	cpi	r25, 0xFF	; 255
     816:	79 f0       	breq	.+30     	; 0x836 <__fp_splitA+0x2a>
     818:	87 95       	ror	r24
     81a:	08 95       	ret
     81c:	12 16       	cp	r1, r18
     81e:	13 06       	cpc	r1, r19
     820:	14 06       	cpc	r1, r20
     822:	55 1f       	adc	r21, r21
     824:	f2 cf       	rjmp	.-28     	; 0x80a <__fp_split3+0xe>
     826:	46 95       	lsr	r20
     828:	f1 df       	rcall	.-30     	; 0x80c <__fp_splitA>
     82a:	08 c0       	rjmp	.+16     	; 0x83c <__fp_splitA+0x30>
     82c:	16 16       	cp	r1, r22
     82e:	17 06       	cpc	r1, r23
     830:	18 06       	cpc	r1, r24
     832:	99 1f       	adc	r25, r25
     834:	f1 cf       	rjmp	.-30     	; 0x818 <__fp_splitA+0xc>
     836:	86 95       	lsr	r24
     838:	71 05       	cpc	r23, r1
     83a:	61 05       	cpc	r22, r1
     83c:	08 94       	sec
     83e:	08 95       	ret

00000840 <__fp_zero>:
     840:	e8 94       	clt

00000842 <__fp_szero>:
     842:	bb 27       	eor	r27, r27
     844:	66 27       	eor	r22, r22
     846:	77 27       	eor	r23, r23
     848:	cb 01       	movw	r24, r22
     84a:	97 f9       	bld	r25, 7
     84c:	08 95       	ret

0000084e <vfprintf>:
     84e:	a3 e1       	ldi	r26, 0x13	; 19
     850:	b0 e0       	ldi	r27, 0x00	; 0
     852:	ed e2       	ldi	r30, 0x2D	; 45
     854:	f4 e0       	ldi	r31, 0x04	; 4
     856:	0c 94 dc 0c 	jmp	0x19b8	; 0x19b8 <__prologue_saves__>
     85a:	7c 01       	movw	r14, r24
     85c:	1b 01       	movw	r2, r22
     85e:	6a 01       	movw	r12, r20
     860:	fc 01       	movw	r30, r24
     862:	17 82       	std	Z+7, r1	; 0x07
     864:	16 82       	std	Z+6, r1	; 0x06
     866:	83 81       	ldd	r24, Z+3	; 0x03
     868:	81 ff       	sbrs	r24, 1
     86a:	66 c3       	rjmp	.+1740   	; 0xf38 <__stack+0x639>
     86c:	be 01       	movw	r22, r28
     86e:	6f 5f       	subi	r22, 0xFF	; 255
     870:	7f 4f       	sbci	r23, 0xFF	; 255
     872:	4b 01       	movw	r8, r22
     874:	f7 01       	movw	r30, r14
     876:	93 81       	ldd	r25, Z+3	; 0x03
     878:	f1 01       	movw	r30, r2
     87a:	93 fd       	sbrc	r25, 3
     87c:	85 91       	lpm	r24, Z+
     87e:	93 ff       	sbrs	r25, 3
     880:	81 91       	ld	r24, Z+
     882:	1f 01       	movw	r2, r30
     884:	88 23       	and	r24, r24
     886:	09 f4       	brne	.+2      	; 0x88a <vfprintf+0x3c>
     888:	53 c3       	rjmp	.+1702   	; 0xf30 <__stack+0x631>
     88a:	85 32       	cpi	r24, 0x25	; 37
     88c:	39 f4       	brne	.+14     	; 0x89c <vfprintf+0x4e>
     88e:	93 fd       	sbrc	r25, 3
     890:	85 91       	lpm	r24, Z+
     892:	93 ff       	sbrs	r25, 3
     894:	81 91       	ld	r24, Z+
     896:	1f 01       	movw	r2, r30
     898:	85 32       	cpi	r24, 0x25	; 37
     89a:	39 f4       	brne	.+14     	; 0x8aa <vfprintf+0x5c>
     89c:	b7 01       	movw	r22, r14
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <fputc>
     8a4:	56 01       	movw	r10, r12
     8a6:	65 01       	movw	r12, r10
     8a8:	e5 cf       	rjmp	.-54     	; 0x874 <vfprintf+0x26>
     8aa:	10 e0       	ldi	r17, 0x00	; 0
     8ac:	51 2c       	mov	r5, r1
     8ae:	20 e0       	ldi	r18, 0x00	; 0
     8b0:	20 32       	cpi	r18, 0x20	; 32
     8b2:	a0 f4       	brcc	.+40     	; 0x8dc <vfprintf+0x8e>
     8b4:	8b 32       	cpi	r24, 0x2B	; 43
     8b6:	69 f0       	breq	.+26     	; 0x8d2 <vfprintf+0x84>
     8b8:	30 f4       	brcc	.+12     	; 0x8c6 <vfprintf+0x78>
     8ba:	80 32       	cpi	r24, 0x20	; 32
     8bc:	59 f0       	breq	.+22     	; 0x8d4 <vfprintf+0x86>
     8be:	83 32       	cpi	r24, 0x23	; 35
     8c0:	69 f4       	brne	.+26     	; 0x8dc <vfprintf+0x8e>
     8c2:	20 61       	ori	r18, 0x10	; 16
     8c4:	2c c0       	rjmp	.+88     	; 0x91e <__stack+0x1f>
     8c6:	8d 32       	cpi	r24, 0x2D	; 45
     8c8:	39 f0       	breq	.+14     	; 0x8d8 <vfprintf+0x8a>
     8ca:	80 33       	cpi	r24, 0x30	; 48
     8cc:	39 f4       	brne	.+14     	; 0x8dc <vfprintf+0x8e>
     8ce:	21 60       	ori	r18, 0x01	; 1
     8d0:	26 c0       	rjmp	.+76     	; 0x91e <__stack+0x1f>
     8d2:	22 60       	ori	r18, 0x02	; 2
     8d4:	24 60       	ori	r18, 0x04	; 4
     8d6:	23 c0       	rjmp	.+70     	; 0x91e <__stack+0x1f>
     8d8:	28 60       	ori	r18, 0x08	; 8
     8da:	21 c0       	rjmp	.+66     	; 0x91e <__stack+0x1f>
     8dc:	27 fd       	sbrc	r18, 7
     8de:	27 c0       	rjmp	.+78     	; 0x92e <__stack+0x2f>
     8e0:	30 ed       	ldi	r19, 0xD0	; 208
     8e2:	38 0f       	add	r19, r24
     8e4:	3a 30       	cpi	r19, 0x0A	; 10
     8e6:	78 f4       	brcc	.+30     	; 0x906 <__stack+0x7>
     8e8:	26 ff       	sbrs	r18, 6
     8ea:	06 c0       	rjmp	.+12     	; 0x8f8 <vfprintf+0xaa>
     8ec:	fa e0       	ldi	r31, 0x0A	; 10
     8ee:	1f 9f       	mul	r17, r31
     8f0:	30 0d       	add	r19, r0
     8f2:	11 24       	eor	r1, r1
     8f4:	13 2f       	mov	r17, r19
     8f6:	13 c0       	rjmp	.+38     	; 0x91e <__stack+0x1f>
     8f8:	6a e0       	ldi	r22, 0x0A	; 10
     8fa:	56 9e       	mul	r5, r22
     8fc:	30 0d       	add	r19, r0
     8fe:	11 24       	eor	r1, r1
     900:	53 2e       	mov	r5, r19
     902:	20 62       	ori	r18, 0x20	; 32
     904:	0c c0       	rjmp	.+24     	; 0x91e <__stack+0x1f>
     906:	8e 32       	cpi	r24, 0x2E	; 46
     908:	21 f4       	brne	.+8      	; 0x912 <__stack+0x13>
     90a:	26 fd       	sbrc	r18, 6
     90c:	11 c3       	rjmp	.+1570   	; 0xf30 <__stack+0x631>
     90e:	20 64       	ori	r18, 0x40	; 64
     910:	06 c0       	rjmp	.+12     	; 0x91e <__stack+0x1f>
     912:	8c 36       	cpi	r24, 0x6C	; 108
     914:	11 f4       	brne	.+4      	; 0x91a <__stack+0x1b>
     916:	20 68       	ori	r18, 0x80	; 128
     918:	02 c0       	rjmp	.+4      	; 0x91e <__stack+0x1f>
     91a:	88 36       	cpi	r24, 0x68	; 104
     91c:	41 f4       	brne	.+16     	; 0x92e <__stack+0x2f>
     91e:	f1 01       	movw	r30, r2
     920:	93 fd       	sbrc	r25, 3
     922:	85 91       	lpm	r24, Z+
     924:	93 ff       	sbrs	r25, 3
     926:	81 91       	ld	r24, Z+
     928:	1f 01       	movw	r2, r30
     92a:	81 11       	cpse	r24, r1
     92c:	c1 cf       	rjmp	.-126    	; 0x8b0 <vfprintf+0x62>
     92e:	9b eb       	ldi	r25, 0xBB	; 187
     930:	98 0f       	add	r25, r24
     932:	93 30       	cpi	r25, 0x03	; 3
     934:	18 f4       	brcc	.+6      	; 0x93c <__stack+0x3d>
     936:	20 61       	ori	r18, 0x10	; 16
     938:	80 5e       	subi	r24, 0xE0	; 224
     93a:	06 c0       	rjmp	.+12     	; 0x948 <__stack+0x49>
     93c:	9b e9       	ldi	r25, 0x9B	; 155
     93e:	98 0f       	add	r25, r24
     940:	93 30       	cpi	r25, 0x03	; 3
     942:	08 f0       	brcs	.+2      	; 0x946 <__stack+0x47>
     944:	aa c1       	rjmp	.+852    	; 0xc9a <__stack+0x39b>
     946:	2f 7e       	andi	r18, 0xEF	; 239
     948:	26 ff       	sbrs	r18, 6
     94a:	16 e0       	ldi	r17, 0x06	; 6
     94c:	2f 73       	andi	r18, 0x3F	; 63
     94e:	72 2e       	mov	r7, r18
     950:	85 36       	cpi	r24, 0x65	; 101
     952:	21 f4       	brne	.+8      	; 0x95c <__stack+0x5d>
     954:	f2 2f       	mov	r31, r18
     956:	f0 64       	ori	r31, 0x40	; 64
     958:	7f 2e       	mov	r7, r31
     95a:	08 c0       	rjmp	.+16     	; 0x96c <__stack+0x6d>
     95c:	86 36       	cpi	r24, 0x66	; 102
     95e:	21 f4       	brne	.+8      	; 0x968 <__stack+0x69>
     960:	62 2f       	mov	r22, r18
     962:	60 68       	ori	r22, 0x80	; 128
     964:	76 2e       	mov	r7, r22
     966:	02 c0       	rjmp	.+4      	; 0x96c <__stack+0x6d>
     968:	11 11       	cpse	r17, r1
     96a:	11 50       	subi	r17, 0x01	; 1
     96c:	77 fe       	sbrs	r7, 7
     96e:	07 c0       	rjmp	.+14     	; 0x97e <__stack+0x7f>
     970:	1c 33       	cpi	r17, 0x3C	; 60
     972:	48 f4       	brcc	.+18     	; 0x986 <__stack+0x87>
     974:	44 24       	eor	r4, r4
     976:	43 94       	inc	r4
     978:	41 0e       	add	r4, r17
     97a:	27 e0       	ldi	r18, 0x07	; 7
     97c:	0b c0       	rjmp	.+22     	; 0x994 <__stack+0x95>
     97e:	18 30       	cpi	r17, 0x08	; 8
     980:	30 f4       	brcc	.+12     	; 0x98e <__stack+0x8f>
     982:	21 2f       	mov	r18, r17
     984:	06 c0       	rjmp	.+12     	; 0x992 <__stack+0x93>
     986:	27 e0       	ldi	r18, 0x07	; 7
     988:	4c e3       	ldi	r20, 0x3C	; 60
     98a:	44 2e       	mov	r4, r20
     98c:	03 c0       	rjmp	.+6      	; 0x994 <__stack+0x95>
     98e:	27 e0       	ldi	r18, 0x07	; 7
     990:	17 e0       	ldi	r17, 0x07	; 7
     992:	41 2c       	mov	r4, r1
     994:	56 01       	movw	r10, r12
     996:	74 e0       	ldi	r23, 0x04	; 4
     998:	a7 0e       	add	r10, r23
     99a:	b1 1c       	adc	r11, r1
     99c:	f6 01       	movw	r30, r12
     99e:	60 81       	ld	r22, Z
     9a0:	71 81       	ldd	r23, Z+1	; 0x01
     9a2:	82 81       	ldd	r24, Z+2	; 0x02
     9a4:	93 81       	ldd	r25, Z+3	; 0x03
     9a6:	04 2d       	mov	r16, r4
     9a8:	a4 01       	movw	r20, r8
     9aa:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <__ftoa_engine>
     9ae:	6c 01       	movw	r12, r24
     9b0:	09 81       	ldd	r16, Y+1	; 0x01
     9b2:	00 ff       	sbrs	r16, 0
     9b4:	02 c0       	rjmp	.+4      	; 0x9ba <__stack+0xbb>
     9b6:	03 ff       	sbrs	r16, 3
     9b8:	06 c0       	rjmp	.+12     	; 0x9c6 <__stack+0xc7>
     9ba:	71 fc       	sbrc	r7, 1
     9bc:	07 c0       	rjmp	.+14     	; 0x9cc <__stack+0xcd>
     9be:	72 fc       	sbrc	r7, 2
     9c0:	08 c0       	rjmp	.+16     	; 0x9d2 <__stack+0xd3>
     9c2:	61 2c       	mov	r6, r1
     9c4:	08 c0       	rjmp	.+16     	; 0x9d6 <__stack+0xd7>
     9c6:	3d e2       	ldi	r19, 0x2D	; 45
     9c8:	63 2e       	mov	r6, r19
     9ca:	05 c0       	rjmp	.+10     	; 0x9d6 <__stack+0xd7>
     9cc:	2b e2       	ldi	r18, 0x2B	; 43
     9ce:	62 2e       	mov	r6, r18
     9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <__stack+0xd7>
     9d2:	90 e2       	ldi	r25, 0x20	; 32
     9d4:	69 2e       	mov	r6, r25
     9d6:	80 2f       	mov	r24, r16
     9d8:	8c 70       	andi	r24, 0x0C	; 12
     9da:	99 f1       	breq	.+102    	; 0xa42 <__stack+0x143>
     9dc:	66 20       	and	r6, r6
     9de:	11 f0       	breq	.+4      	; 0x9e4 <__stack+0xe5>
     9e0:	84 e0       	ldi	r24, 0x04	; 4
     9e2:	01 c0       	rjmp	.+2      	; 0x9e6 <__stack+0xe7>
     9e4:	83 e0       	ldi	r24, 0x03	; 3
     9e6:	85 15       	cp	r24, r5
     9e8:	10 f0       	brcs	.+4      	; 0x9ee <__stack+0xef>
     9ea:	51 2c       	mov	r5, r1
     9ec:	0b c0       	rjmp	.+22     	; 0xa04 <__stack+0x105>
     9ee:	58 1a       	sub	r5, r24
     9f0:	73 fc       	sbrc	r7, 3
     9f2:	08 c0       	rjmp	.+16     	; 0xa04 <__stack+0x105>
     9f4:	b7 01       	movw	r22, r14
     9f6:	80 e2       	ldi	r24, 0x20	; 32
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <fputc>
     9fe:	5a 94       	dec	r5
     a00:	c9 f7       	brne	.-14     	; 0x9f4 <__stack+0xf5>
     a02:	f3 cf       	rjmp	.-26     	; 0x9ea <__stack+0xeb>
     a04:	66 20       	and	r6, r6
     a06:	29 f0       	breq	.+10     	; 0xa12 <__stack+0x113>
     a08:	b7 01       	movw	r22, r14
     a0a:	86 2d       	mov	r24, r6
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <fputc>
     a12:	03 fd       	sbrc	r16, 3
     a14:	03 c0       	rjmp	.+6      	; 0xa1c <__stack+0x11d>
     a16:	0e eb       	ldi	r16, 0xBE	; 190
     a18:	10 e0       	ldi	r17, 0x00	; 0
     a1a:	02 c0       	rjmp	.+4      	; 0xa20 <__stack+0x121>
     a1c:	0a eb       	ldi	r16, 0xBA	; 186
     a1e:	10 e0       	ldi	r17, 0x00	; 0
     a20:	f7 2d       	mov	r31, r7
     a22:	f0 71       	andi	r31, 0x10	; 16
     a24:	7f 2e       	mov	r7, r31
     a26:	f8 01       	movw	r30, r16
     a28:	84 91       	lpm	r24, Z
     a2a:	88 23       	and	r24, r24
     a2c:	09 f4       	brne	.+2      	; 0xa30 <__stack+0x131>
     a2e:	76 c2       	rjmp	.+1260   	; 0xf1c <__stack+0x61d>
     a30:	71 10       	cpse	r7, r1
     a32:	80 52       	subi	r24, 0x20	; 32
     a34:	b7 01       	movw	r22, r14
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <fputc>
     a3c:	0f 5f       	subi	r16, 0xFF	; 255
     a3e:	1f 4f       	sbci	r17, 0xFF	; 255
     a40:	f2 cf       	rjmp	.-28     	; 0xa26 <__stack+0x127>
     a42:	77 fe       	sbrs	r7, 7
     a44:	0f c0       	rjmp	.+30     	; 0xa64 <__stack+0x165>
     a46:	4c 0c       	add	r4, r12
     a48:	04 ff       	sbrs	r16, 4
     a4a:	04 c0       	rjmp	.+8      	; 0xa54 <__stack+0x155>
     a4c:	8a 81       	ldd	r24, Y+2	; 0x02
     a4e:	81 33       	cpi	r24, 0x31	; 49
     a50:	09 f4       	brne	.+2      	; 0xa54 <__stack+0x155>
     a52:	4a 94       	dec	r4
     a54:	14 14       	cp	r1, r4
     a56:	74 f5       	brge	.+92     	; 0xab4 <__stack+0x1b5>
     a58:	f8 e0       	ldi	r31, 0x08	; 8
     a5a:	f4 15       	cp	r31, r4
     a5c:	78 f5       	brcc	.+94     	; 0xabc <__stack+0x1bd>
     a5e:	88 e0       	ldi	r24, 0x08	; 8
     a60:	48 2e       	mov	r4, r24
     a62:	2c c0       	rjmp	.+88     	; 0xabc <__stack+0x1bd>
     a64:	76 fc       	sbrc	r7, 6
     a66:	2a c0       	rjmp	.+84     	; 0xabc <__stack+0x1bd>
     a68:	81 2f       	mov	r24, r17
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	8c 15       	cp	r24, r12
     a6e:	9d 05       	cpc	r25, r13
     a70:	9c f0       	brlt	.+38     	; 0xa98 <__stack+0x199>
     a72:	6c ef       	ldi	r22, 0xFC	; 252
     a74:	c6 16       	cp	r12, r22
     a76:	6f ef       	ldi	r22, 0xFF	; 255
     a78:	d6 06       	cpc	r13, r22
     a7a:	74 f0       	brlt	.+28     	; 0xa98 <__stack+0x199>
     a7c:	77 2d       	mov	r23, r7
     a7e:	70 68       	ori	r23, 0x80	; 128
     a80:	77 2e       	mov	r7, r23
     a82:	0a c0       	rjmp	.+20     	; 0xa98 <__stack+0x199>
     a84:	e2 e0       	ldi	r30, 0x02	; 2
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	ec 0f       	add	r30, r28
     a8a:	fd 1f       	adc	r31, r29
     a8c:	e1 0f       	add	r30, r17
     a8e:	f1 1d       	adc	r31, r1
     a90:	80 81       	ld	r24, Z
     a92:	80 33       	cpi	r24, 0x30	; 48
     a94:	19 f4       	brne	.+6      	; 0xa9c <__stack+0x19d>
     a96:	11 50       	subi	r17, 0x01	; 1
     a98:	11 11       	cpse	r17, r1
     a9a:	f4 cf       	rjmp	.-24     	; 0xa84 <__stack+0x185>
     a9c:	77 fe       	sbrs	r7, 7
     a9e:	0e c0       	rjmp	.+28     	; 0xabc <__stack+0x1bd>
     aa0:	44 24       	eor	r4, r4
     aa2:	43 94       	inc	r4
     aa4:	41 0e       	add	r4, r17
     aa6:	81 2f       	mov	r24, r17
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	c8 16       	cp	r12, r24
     aac:	d9 06       	cpc	r13, r25
     aae:	2c f4       	brge	.+10     	; 0xaba <__stack+0x1bb>
     ab0:	1c 19       	sub	r17, r12
     ab2:	04 c0       	rjmp	.+8      	; 0xabc <__stack+0x1bd>
     ab4:	44 24       	eor	r4, r4
     ab6:	43 94       	inc	r4
     ab8:	01 c0       	rjmp	.+2      	; 0xabc <__stack+0x1bd>
     aba:	10 e0       	ldi	r17, 0x00	; 0
     abc:	77 fe       	sbrs	r7, 7
     abe:	07 c0       	rjmp	.+14     	; 0xace <__stack+0x1cf>
     ac0:	1c 14       	cp	r1, r12
     ac2:	1d 04       	cpc	r1, r13
     ac4:	3c f4       	brge	.+14     	; 0xad4 <__stack+0x1d5>
     ac6:	96 01       	movw	r18, r12
     ac8:	2f 5f       	subi	r18, 0xFF	; 255
     aca:	3f 4f       	sbci	r19, 0xFF	; 255
     acc:	05 c0       	rjmp	.+10     	; 0xad8 <__stack+0x1d9>
     ace:	25 e0       	ldi	r18, 0x05	; 5
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	02 c0       	rjmp	.+4      	; 0xad8 <__stack+0x1d9>
     ad4:	21 e0       	ldi	r18, 0x01	; 1
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	66 20       	and	r6, r6
     ada:	11 f0       	breq	.+4      	; 0xae0 <__stack+0x1e1>
     adc:	2f 5f       	subi	r18, 0xFF	; 255
     ade:	3f 4f       	sbci	r19, 0xFF	; 255
     ae0:	11 23       	and	r17, r17
     ae2:	31 f0       	breq	.+12     	; 0xaf0 <__stack+0x1f1>
     ae4:	41 2f       	mov	r20, r17
     ae6:	50 e0       	ldi	r21, 0x00	; 0
     ae8:	4f 5f       	subi	r20, 0xFF	; 255
     aea:	5f 4f       	sbci	r21, 0xFF	; 255
     aec:	24 0f       	add	r18, r20
     aee:	35 1f       	adc	r19, r21
     af0:	45 2d       	mov	r20, r5
     af2:	50 e0       	ldi	r21, 0x00	; 0
     af4:	24 17       	cp	r18, r20
     af6:	35 07       	cpc	r19, r21
     af8:	14 f4       	brge	.+4      	; 0xafe <__stack+0x1ff>
     afa:	52 1a       	sub	r5, r18
     afc:	01 c0       	rjmp	.+2      	; 0xb00 <__stack+0x201>
     afe:	51 2c       	mov	r5, r1
     b00:	87 2d       	mov	r24, r7
     b02:	89 70       	andi	r24, 0x09	; 9
     b04:	49 f4       	brne	.+18     	; 0xb18 <__stack+0x219>
     b06:	55 20       	and	r5, r5
     b08:	39 f0       	breq	.+14     	; 0xb18 <__stack+0x219>
     b0a:	b7 01       	movw	r22, r14
     b0c:	80 e2       	ldi	r24, 0x20	; 32
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <fputc>
     b14:	5a 94       	dec	r5
     b16:	f7 cf       	rjmp	.-18     	; 0xb06 <__stack+0x207>
     b18:	66 20       	and	r6, r6
     b1a:	29 f0       	breq	.+10     	; 0xb26 <__stack+0x227>
     b1c:	b7 01       	movw	r22, r14
     b1e:	86 2d       	mov	r24, r6
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <fputc>
     b26:	73 fc       	sbrc	r7, 3
     b28:	09 c0       	rjmp	.+18     	; 0xb3c <__stack+0x23d>
     b2a:	55 20       	and	r5, r5
     b2c:	39 f0       	breq	.+14     	; 0xb3c <__stack+0x23d>
     b2e:	b7 01       	movw	r22, r14
     b30:	80 e3       	ldi	r24, 0x30	; 48
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <fputc>
     b38:	5a 94       	dec	r5
     b3a:	f7 cf       	rjmp	.-18     	; 0xb2a <__stack+0x22b>
     b3c:	77 fe       	sbrs	r7, 7
     b3e:	5f c0       	rjmp	.+190    	; 0xbfe <__stack+0x2ff>
     b40:	9c 2d       	mov	r25, r12
     b42:	8d 2d       	mov	r24, r13
     b44:	d7 fe       	sbrs	r13, 7
     b46:	02 c0       	rjmp	.+4      	; 0xb4c <__stack+0x24d>
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	69 2e       	mov	r6, r25
     b4e:	78 2e       	mov	r7, r24
     b50:	40 e0       	ldi	r20, 0x00	; 0
     b52:	50 e0       	ldi	r21, 0x00	; 0
     b54:	c6 01       	movw	r24, r12
     b56:	84 19       	sub	r24, r4
     b58:	91 09       	sbc	r25, r1
     b5a:	9d 87       	std	Y+13, r25	; 0x0d
     b5c:	8c 87       	std	Y+12, r24	; 0x0c
     b5e:	96 01       	movw	r18, r12
     b60:	26 19       	sub	r18, r6
     b62:	37 09       	sbc	r19, r7
     b64:	28 0d       	add	r18, r8
     b66:	39 1d       	adc	r19, r9
     b68:	81 2f       	mov	r24, r17
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	ee 27       	eor	r30, r30
     b6e:	ff 27       	eor	r31, r31
     b70:	e8 1b       	sub	r30, r24
     b72:	f9 0b       	sbc	r31, r25
     b74:	ff 87       	std	Y+15, r31	; 0x0f
     b76:	ee 87       	std	Y+14, r30	; 0x0e
     b78:	ff ef       	ldi	r31, 0xFF	; 255
     b7a:	6f 16       	cp	r6, r31
     b7c:	7f 06       	cpc	r7, r31
     b7e:	69 f4       	brne	.+26     	; 0xb9a <__stack+0x29b>
     b80:	b7 01       	movw	r22, r14
     b82:	8e e2       	ldi	r24, 0x2E	; 46
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	2b 8b       	std	Y+19, r18	; 0x13
     b88:	3a 8b       	std	Y+18, r19	; 0x12
     b8a:	48 8b       	std	Y+16, r20	; 0x10
     b8c:	59 8b       	std	Y+17, r21	; 0x11
     b8e:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <fputc>
     b92:	59 89       	ldd	r21, Y+17	; 0x11
     b94:	48 89       	ldd	r20, Y+16	; 0x10
     b96:	3a 89       	ldd	r19, Y+18	; 0x12
     b98:	2b 89       	ldd	r18, Y+19	; 0x13
     b9a:	c6 14       	cp	r12, r6
     b9c:	d7 04       	cpc	r13, r7
     b9e:	54 f0       	brlt	.+20     	; 0xbb4 <__stack+0x2b5>
     ba0:	6c 85       	ldd	r22, Y+12	; 0x0c
     ba2:	7d 85       	ldd	r23, Y+13	; 0x0d
     ba4:	66 15       	cp	r22, r6
     ba6:	77 05       	cpc	r23, r7
     ba8:	2c f4       	brge	.+10     	; 0xbb4 <__stack+0x2b5>
     baa:	f9 01       	movw	r30, r18
     bac:	e4 0f       	add	r30, r20
     bae:	f5 1f       	adc	r31, r21
     bb0:	81 81       	ldd	r24, Z+1	; 0x01
     bb2:	01 c0       	rjmp	.+2      	; 0xbb6 <__stack+0x2b7>
     bb4:	80 e3       	ldi	r24, 0x30	; 48
     bb6:	71 e0       	ldi	r23, 0x01	; 1
     bb8:	67 1a       	sub	r6, r23
     bba:	71 08       	sbc	r7, r1
     bbc:	4f 5f       	subi	r20, 0xFF	; 255
     bbe:	5f 4f       	sbci	r21, 0xFF	; 255
     bc0:	ee 85       	ldd	r30, Y+14	; 0x0e
     bc2:	ff 85       	ldd	r31, Y+15	; 0x0f
     bc4:	6e 16       	cp	r6, r30
     bc6:	7f 06       	cpc	r7, r31
     bc8:	6c f0       	brlt	.+26     	; 0xbe4 <__stack+0x2e5>
     bca:	b7 01       	movw	r22, r14
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	2b 8b       	std	Y+19, r18	; 0x13
     bd0:	3a 8b       	std	Y+18, r19	; 0x12
     bd2:	48 8b       	std	Y+16, r20	; 0x10
     bd4:	59 8b       	std	Y+17, r21	; 0x11
     bd6:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <fputc>
     bda:	2b 89       	ldd	r18, Y+19	; 0x13
     bdc:	3a 89       	ldd	r19, Y+18	; 0x12
     bde:	48 89       	ldd	r20, Y+16	; 0x10
     be0:	59 89       	ldd	r21, Y+17	; 0x11
     be2:	ca cf       	rjmp	.-108    	; 0xb78 <__stack+0x279>
     be4:	6c 14       	cp	r6, r12
     be6:	7d 04       	cpc	r7, r13
     be8:	39 f4       	brne	.+14     	; 0xbf8 <__stack+0x2f9>
     bea:	9a 81       	ldd	r25, Y+2	; 0x02
     bec:	96 33       	cpi	r25, 0x36	; 54
     bee:	18 f4       	brcc	.+6      	; 0xbf6 <__stack+0x2f7>
     bf0:	95 33       	cpi	r25, 0x35	; 53
     bf2:	11 f4       	brne	.+4      	; 0xbf8 <__stack+0x2f9>
     bf4:	04 ff       	sbrs	r16, 4
     bf6:	81 e3       	ldi	r24, 0x31	; 49
     bf8:	b7 01       	movw	r22, r14
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	4b c0       	rjmp	.+150    	; 0xc94 <__stack+0x395>
     bfe:	8a 81       	ldd	r24, Y+2	; 0x02
     c00:	81 33       	cpi	r24, 0x31	; 49
     c02:	09 f0       	breq	.+2      	; 0xc06 <__stack+0x307>
     c04:	0f 7e       	andi	r16, 0xEF	; 239
     c06:	b7 01       	movw	r22, r14
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <fputc>
     c0e:	11 11       	cpse	r17, r1
     c10:	05 c0       	rjmp	.+10     	; 0xc1c <__stack+0x31d>
     c12:	74 fe       	sbrs	r7, 4
     c14:	18 c0       	rjmp	.+48     	; 0xc46 <__stack+0x347>
     c16:	85 e4       	ldi	r24, 0x45	; 69
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	17 c0       	rjmp	.+46     	; 0xc4a <__stack+0x34b>
     c1c:	b7 01       	movw	r22, r14
     c1e:	8e e2       	ldi	r24, 0x2E	; 46
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <fputc>
     c26:	82 e0       	ldi	r24, 0x02	; 2
     c28:	66 24       	eor	r6, r6
     c2a:	63 94       	inc	r6
     c2c:	68 0e       	add	r6, r24
     c2e:	f4 01       	movw	r30, r8
     c30:	e8 0f       	add	r30, r24
     c32:	f1 1d       	adc	r31, r1
     c34:	80 81       	ld	r24, Z
     c36:	b7 01       	movw	r22, r14
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <fputc>
     c3e:	11 50       	subi	r17, 0x01	; 1
     c40:	41 f3       	breq	.-48     	; 0xc12 <__stack+0x313>
     c42:	86 2d       	mov	r24, r6
     c44:	f1 cf       	rjmp	.-30     	; 0xc28 <__stack+0x329>
     c46:	85 e6       	ldi	r24, 0x65	; 101
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	b7 01       	movw	r22, r14
     c4c:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <fputc>
     c50:	d7 fc       	sbrc	r13, 7
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__stack+0x35f>
     c54:	c1 14       	cp	r12, r1
     c56:	d1 04       	cpc	r13, r1
     c58:	39 f4       	brne	.+14     	; 0xc68 <__stack+0x369>
     c5a:	04 ff       	sbrs	r16, 4
     c5c:	05 c0       	rjmp	.+10     	; 0xc68 <__stack+0x369>
     c5e:	d1 94       	neg	r13
     c60:	c1 94       	neg	r12
     c62:	d1 08       	sbc	r13, r1
     c64:	8d e2       	ldi	r24, 0x2D	; 45
     c66:	01 c0       	rjmp	.+2      	; 0xc6a <__stack+0x36b>
     c68:	8b e2       	ldi	r24, 0x2B	; 43
     c6a:	b7 01       	movw	r22, r14
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <fputc>
     c72:	80 e3       	ldi	r24, 0x30	; 48
     c74:	6a e0       	ldi	r22, 0x0A	; 10
     c76:	c6 16       	cp	r12, r22
     c78:	d1 04       	cpc	r13, r1
     c7a:	2c f0       	brlt	.+10     	; 0xc86 <__stack+0x387>
     c7c:	8f 5f       	subi	r24, 0xFF	; 255
     c7e:	fa e0       	ldi	r31, 0x0A	; 10
     c80:	cf 1a       	sub	r12, r31
     c82:	d1 08       	sbc	r13, r1
     c84:	f7 cf       	rjmp	.-18     	; 0xc74 <__stack+0x375>
     c86:	b7 01       	movw	r22, r14
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <fputc>
     c8e:	b7 01       	movw	r22, r14
     c90:	c6 01       	movw	r24, r12
     c92:	c0 96       	adiw	r24, 0x30	; 48
     c94:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <fputc>
     c98:	41 c1       	rjmp	.+642    	; 0xf1c <__stack+0x61d>
     c9a:	83 36       	cpi	r24, 0x63	; 99
     c9c:	31 f0       	breq	.+12     	; 0xcaa <__stack+0x3ab>
     c9e:	83 37       	cpi	r24, 0x73	; 115
     ca0:	79 f0       	breq	.+30     	; 0xcc0 <__stack+0x3c1>
     ca2:	83 35       	cpi	r24, 0x53	; 83
     ca4:	09 f0       	breq	.+2      	; 0xca8 <__stack+0x3a9>
     ca6:	58 c0       	rjmp	.+176    	; 0xd58 <__stack+0x459>
     ca8:	21 c0       	rjmp	.+66     	; 0xcec <__stack+0x3ed>
     caa:	56 01       	movw	r10, r12
     cac:	72 e0       	ldi	r23, 0x02	; 2
     cae:	a7 0e       	add	r10, r23
     cb0:	b1 1c       	adc	r11, r1
     cb2:	f6 01       	movw	r30, r12
     cb4:	80 81       	ld	r24, Z
     cb6:	89 83       	std	Y+1, r24	; 0x01
     cb8:	01 e0       	ldi	r16, 0x01	; 1
     cba:	10 e0       	ldi	r17, 0x00	; 0
     cbc:	64 01       	movw	r12, r8
     cbe:	14 c0       	rjmp	.+40     	; 0xce8 <__stack+0x3e9>
     cc0:	56 01       	movw	r10, r12
     cc2:	f2 e0       	ldi	r31, 0x02	; 2
     cc4:	af 0e       	add	r10, r31
     cc6:	b1 1c       	adc	r11, r1
     cc8:	f6 01       	movw	r30, r12
     cca:	c0 80       	ld	r12, Z
     ccc:	d1 80       	ldd	r13, Z+1	; 0x01
     cce:	26 ff       	sbrs	r18, 6
     cd0:	03 c0       	rjmp	.+6      	; 0xcd8 <__stack+0x3d9>
     cd2:	61 2f       	mov	r22, r17
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <__stack+0x3dd>
     cd8:	6f ef       	ldi	r22, 0xFF	; 255
     cda:	7f ef       	ldi	r23, 0xFF	; 255
     cdc:	c6 01       	movw	r24, r12
     cde:	2b 8b       	std	Y+19, r18	; 0x13
     ce0:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <strnlen>
     ce4:	8c 01       	movw	r16, r24
     ce6:	2b 89       	ldd	r18, Y+19	; 0x13
     ce8:	2f 77       	andi	r18, 0x7F	; 127
     cea:	15 c0       	rjmp	.+42     	; 0xd16 <__stack+0x417>
     cec:	56 01       	movw	r10, r12
     cee:	f2 e0       	ldi	r31, 0x02	; 2
     cf0:	af 0e       	add	r10, r31
     cf2:	b1 1c       	adc	r11, r1
     cf4:	f6 01       	movw	r30, r12
     cf6:	c0 80       	ld	r12, Z
     cf8:	d1 80       	ldd	r13, Z+1	; 0x01
     cfa:	26 ff       	sbrs	r18, 6
     cfc:	03 c0       	rjmp	.+6      	; 0xd04 <__stack+0x405>
     cfe:	61 2f       	mov	r22, r17
     d00:	70 e0       	ldi	r23, 0x00	; 0
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <__stack+0x409>
     d04:	6f ef       	ldi	r22, 0xFF	; 255
     d06:	7f ef       	ldi	r23, 0xFF	; 255
     d08:	c6 01       	movw	r24, r12
     d0a:	2b 8b       	std	Y+19, r18	; 0x13
     d0c:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <strnlen_P>
     d10:	8c 01       	movw	r16, r24
     d12:	2b 89       	ldd	r18, Y+19	; 0x13
     d14:	20 68       	ori	r18, 0x80	; 128
     d16:	72 2e       	mov	r7, r18
     d18:	23 fd       	sbrc	r18, 3
     d1a:	1a c0       	rjmp	.+52     	; 0xd50 <__stack+0x451>
     d1c:	85 2d       	mov	r24, r5
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	08 17       	cp	r16, r24
     d22:	19 07       	cpc	r17, r25
     d24:	a8 f4       	brcc	.+42     	; 0xd50 <__stack+0x451>
     d26:	b7 01       	movw	r22, r14
     d28:	80 e2       	ldi	r24, 0x20	; 32
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <fputc>
     d30:	5a 94       	dec	r5
     d32:	f4 cf       	rjmp	.-24     	; 0xd1c <__stack+0x41d>
     d34:	f6 01       	movw	r30, r12
     d36:	77 fc       	sbrc	r7, 7
     d38:	85 91       	lpm	r24, Z+
     d3a:	77 fe       	sbrs	r7, 7
     d3c:	81 91       	ld	r24, Z+
     d3e:	6f 01       	movw	r12, r30
     d40:	b7 01       	movw	r22, r14
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <fputc>
     d48:	51 10       	cpse	r5, r1
     d4a:	5a 94       	dec	r5
     d4c:	01 50       	subi	r16, 0x01	; 1
     d4e:	11 09       	sbc	r17, r1
     d50:	01 15       	cp	r16, r1
     d52:	11 05       	cpc	r17, r1
     d54:	79 f7       	brne	.-34     	; 0xd34 <__stack+0x435>
     d56:	e2 c0       	rjmp	.+452    	; 0xf1c <__stack+0x61d>
     d58:	84 36       	cpi	r24, 0x64	; 100
     d5a:	11 f0       	breq	.+4      	; 0xd60 <__stack+0x461>
     d5c:	89 36       	cpi	r24, 0x69	; 105
     d5e:	51 f5       	brne	.+84     	; 0xdb4 <__stack+0x4b5>
     d60:	56 01       	movw	r10, r12
     d62:	27 ff       	sbrs	r18, 7
     d64:	09 c0       	rjmp	.+18     	; 0xd78 <__stack+0x479>
     d66:	f4 e0       	ldi	r31, 0x04	; 4
     d68:	af 0e       	add	r10, r31
     d6a:	b1 1c       	adc	r11, r1
     d6c:	f6 01       	movw	r30, r12
     d6e:	60 81       	ld	r22, Z
     d70:	71 81       	ldd	r23, Z+1	; 0x01
     d72:	82 81       	ldd	r24, Z+2	; 0x02
     d74:	93 81       	ldd	r25, Z+3	; 0x03
     d76:	0a c0       	rjmp	.+20     	; 0xd8c <__stack+0x48d>
     d78:	f2 e0       	ldi	r31, 0x02	; 2
     d7a:	af 0e       	add	r10, r31
     d7c:	b1 1c       	adc	r11, r1
     d7e:	f6 01       	movw	r30, r12
     d80:	60 81       	ld	r22, Z
     d82:	71 81       	ldd	r23, Z+1	; 0x01
     d84:	88 27       	eor	r24, r24
     d86:	77 fd       	sbrc	r23, 7
     d88:	80 95       	com	r24
     d8a:	98 2f       	mov	r25, r24
     d8c:	02 2f       	mov	r16, r18
     d8e:	0f 76       	andi	r16, 0x6F	; 111
     d90:	97 ff       	sbrs	r25, 7
     d92:	08 c0       	rjmp	.+16     	; 0xda4 <__stack+0x4a5>
     d94:	90 95       	com	r25
     d96:	80 95       	com	r24
     d98:	70 95       	com	r23
     d9a:	61 95       	neg	r22
     d9c:	7f 4f       	sbci	r23, 0xFF	; 255
     d9e:	8f 4f       	sbci	r24, 0xFF	; 255
     da0:	9f 4f       	sbci	r25, 0xFF	; 255
     da2:	00 68       	ori	r16, 0x80	; 128
     da4:	2a e0       	ldi	r18, 0x0A	; 10
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	a4 01       	movw	r20, r8
     daa:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__ultoa_invert>
     dae:	c8 2e       	mov	r12, r24
     db0:	c8 18       	sub	r12, r8
     db2:	3e c0       	rjmp	.+124    	; 0xe30 <__stack+0x531>
     db4:	02 2f       	mov	r16, r18
     db6:	85 37       	cpi	r24, 0x75	; 117
     db8:	21 f4       	brne	.+8      	; 0xdc2 <__stack+0x4c3>
     dba:	0f 7e       	andi	r16, 0xEF	; 239
     dbc:	2a e0       	ldi	r18, 0x0A	; 10
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	1d c0       	rjmp	.+58     	; 0xdfc <__stack+0x4fd>
     dc2:	09 7f       	andi	r16, 0xF9	; 249
     dc4:	8f 36       	cpi	r24, 0x6F	; 111
     dc6:	91 f0       	breq	.+36     	; 0xdec <__stack+0x4ed>
     dc8:	18 f4       	brcc	.+6      	; 0xdd0 <__stack+0x4d1>
     dca:	88 35       	cpi	r24, 0x58	; 88
     dcc:	59 f0       	breq	.+22     	; 0xde4 <__stack+0x4e5>
     dce:	b0 c0       	rjmp	.+352    	; 0xf30 <__stack+0x631>
     dd0:	80 37       	cpi	r24, 0x70	; 112
     dd2:	19 f0       	breq	.+6      	; 0xdda <__stack+0x4db>
     dd4:	88 37       	cpi	r24, 0x78	; 120
     dd6:	11 f0       	breq	.+4      	; 0xddc <__stack+0x4dd>
     dd8:	ab c0       	rjmp	.+342    	; 0xf30 <__stack+0x631>
     dda:	00 61       	ori	r16, 0x10	; 16
     ddc:	04 ff       	sbrs	r16, 4
     dde:	09 c0       	rjmp	.+18     	; 0xdf2 <__stack+0x4f3>
     de0:	04 60       	ori	r16, 0x04	; 4
     de2:	07 c0       	rjmp	.+14     	; 0xdf2 <__stack+0x4f3>
     de4:	24 ff       	sbrs	r18, 4
     de6:	08 c0       	rjmp	.+16     	; 0xdf8 <__stack+0x4f9>
     de8:	06 60       	ori	r16, 0x06	; 6
     dea:	06 c0       	rjmp	.+12     	; 0xdf8 <__stack+0x4f9>
     dec:	28 e0       	ldi	r18, 0x08	; 8
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	05 c0       	rjmp	.+10     	; 0xdfc <__stack+0x4fd>
     df2:	20 e1       	ldi	r18, 0x10	; 16
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <__stack+0x4fd>
     df8:	20 e1       	ldi	r18, 0x10	; 16
     dfa:	32 e0       	ldi	r19, 0x02	; 2
     dfc:	56 01       	movw	r10, r12
     dfe:	07 ff       	sbrs	r16, 7
     e00:	09 c0       	rjmp	.+18     	; 0xe14 <__stack+0x515>
     e02:	f4 e0       	ldi	r31, 0x04	; 4
     e04:	af 0e       	add	r10, r31
     e06:	b1 1c       	adc	r11, r1
     e08:	f6 01       	movw	r30, r12
     e0a:	60 81       	ld	r22, Z
     e0c:	71 81       	ldd	r23, Z+1	; 0x01
     e0e:	82 81       	ldd	r24, Z+2	; 0x02
     e10:	93 81       	ldd	r25, Z+3	; 0x03
     e12:	08 c0       	rjmp	.+16     	; 0xe24 <__stack+0x525>
     e14:	f2 e0       	ldi	r31, 0x02	; 2
     e16:	af 0e       	add	r10, r31
     e18:	b1 1c       	adc	r11, r1
     e1a:	f6 01       	movw	r30, r12
     e1c:	60 81       	ld	r22, Z
     e1e:	71 81       	ldd	r23, Z+1	; 0x01
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	a4 01       	movw	r20, r8
     e26:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__ultoa_invert>
     e2a:	c8 2e       	mov	r12, r24
     e2c:	c8 18       	sub	r12, r8
     e2e:	0f 77       	andi	r16, 0x7F	; 127
     e30:	06 ff       	sbrs	r16, 6
     e32:	0b c0       	rjmp	.+22     	; 0xe4a <__stack+0x54b>
     e34:	20 2f       	mov	r18, r16
     e36:	2e 7f       	andi	r18, 0xFE	; 254
     e38:	c1 16       	cp	r12, r17
     e3a:	50 f4       	brcc	.+20     	; 0xe50 <__stack+0x551>
     e3c:	04 ff       	sbrs	r16, 4
     e3e:	0a c0       	rjmp	.+20     	; 0xe54 <__stack+0x555>
     e40:	02 fd       	sbrc	r16, 2
     e42:	08 c0       	rjmp	.+16     	; 0xe54 <__stack+0x555>
     e44:	20 2f       	mov	r18, r16
     e46:	2e 7e       	andi	r18, 0xEE	; 238
     e48:	05 c0       	rjmp	.+10     	; 0xe54 <__stack+0x555>
     e4a:	dc 2c       	mov	r13, r12
     e4c:	20 2f       	mov	r18, r16
     e4e:	03 c0       	rjmp	.+6      	; 0xe56 <__stack+0x557>
     e50:	dc 2c       	mov	r13, r12
     e52:	01 c0       	rjmp	.+2      	; 0xe56 <__stack+0x557>
     e54:	d1 2e       	mov	r13, r17
     e56:	24 ff       	sbrs	r18, 4
     e58:	0d c0       	rjmp	.+26     	; 0xe74 <__stack+0x575>
     e5a:	fe 01       	movw	r30, r28
     e5c:	ec 0d       	add	r30, r12
     e5e:	f1 1d       	adc	r31, r1
     e60:	80 81       	ld	r24, Z
     e62:	80 33       	cpi	r24, 0x30	; 48
     e64:	11 f4       	brne	.+4      	; 0xe6a <__stack+0x56b>
     e66:	29 7e       	andi	r18, 0xE9	; 233
     e68:	09 c0       	rjmp	.+18     	; 0xe7c <__stack+0x57d>
     e6a:	22 ff       	sbrs	r18, 2
     e6c:	06 c0       	rjmp	.+12     	; 0xe7a <__stack+0x57b>
     e6e:	d3 94       	inc	r13
     e70:	d3 94       	inc	r13
     e72:	04 c0       	rjmp	.+8      	; 0xe7c <__stack+0x57d>
     e74:	82 2f       	mov	r24, r18
     e76:	86 78       	andi	r24, 0x86	; 134
     e78:	09 f0       	breq	.+2      	; 0xe7c <__stack+0x57d>
     e7a:	d3 94       	inc	r13
     e7c:	23 fd       	sbrc	r18, 3
     e7e:	13 c0       	rjmp	.+38     	; 0xea6 <__stack+0x5a7>
     e80:	20 ff       	sbrs	r18, 0
     e82:	06 c0       	rjmp	.+12     	; 0xe90 <__stack+0x591>
     e84:	1c 2d       	mov	r17, r12
     e86:	d5 14       	cp	r13, r5
     e88:	18 f4       	brcc	.+6      	; 0xe90 <__stack+0x591>
     e8a:	15 0d       	add	r17, r5
     e8c:	1d 19       	sub	r17, r13
     e8e:	d5 2c       	mov	r13, r5
     e90:	d5 14       	cp	r13, r5
     e92:	68 f4       	brcc	.+26     	; 0xeae <__stack+0x5af>
     e94:	b7 01       	movw	r22, r14
     e96:	80 e2       	ldi	r24, 0x20	; 32
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	2b 8b       	std	Y+19, r18	; 0x13
     e9c:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <fputc>
     ea0:	d3 94       	inc	r13
     ea2:	2b 89       	ldd	r18, Y+19	; 0x13
     ea4:	f5 cf       	rjmp	.-22     	; 0xe90 <__stack+0x591>
     ea6:	d5 14       	cp	r13, r5
     ea8:	10 f4       	brcc	.+4      	; 0xeae <__stack+0x5af>
     eaa:	5d 18       	sub	r5, r13
     eac:	01 c0       	rjmp	.+2      	; 0xeb0 <__stack+0x5b1>
     eae:	51 2c       	mov	r5, r1
     eb0:	24 ff       	sbrs	r18, 4
     eb2:	12 c0       	rjmp	.+36     	; 0xed8 <__stack+0x5d9>
     eb4:	b7 01       	movw	r22, r14
     eb6:	80 e3       	ldi	r24, 0x30	; 48
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	2b 8b       	std	Y+19, r18	; 0x13
     ebc:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <fputc>
     ec0:	2b 89       	ldd	r18, Y+19	; 0x13
     ec2:	22 ff       	sbrs	r18, 2
     ec4:	17 c0       	rjmp	.+46     	; 0xef4 <__stack+0x5f5>
     ec6:	21 ff       	sbrs	r18, 1
     ec8:	03 c0       	rjmp	.+6      	; 0xed0 <__stack+0x5d1>
     eca:	88 e5       	ldi	r24, 0x58	; 88
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <__stack+0x5d5>
     ed0:	88 e7       	ldi	r24, 0x78	; 120
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	b7 01       	movw	r22, r14
     ed6:	0c c0       	rjmp	.+24     	; 0xef0 <__stack+0x5f1>
     ed8:	82 2f       	mov	r24, r18
     eda:	86 78       	andi	r24, 0x86	; 134
     edc:	59 f0       	breq	.+22     	; 0xef4 <__stack+0x5f5>
     ede:	21 fd       	sbrc	r18, 1
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <__stack+0x5e7>
     ee2:	80 e2       	ldi	r24, 0x20	; 32
     ee4:	01 c0       	rjmp	.+2      	; 0xee8 <__stack+0x5e9>
     ee6:	8b e2       	ldi	r24, 0x2B	; 43
     ee8:	27 fd       	sbrc	r18, 7
     eea:	8d e2       	ldi	r24, 0x2D	; 45
     eec:	b7 01       	movw	r22, r14
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <fputc>
     ef4:	c1 16       	cp	r12, r17
     ef6:	38 f4       	brcc	.+14     	; 0xf06 <__stack+0x607>
     ef8:	b7 01       	movw	r22, r14
     efa:	80 e3       	ldi	r24, 0x30	; 48
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <fputc>
     f02:	11 50       	subi	r17, 0x01	; 1
     f04:	f7 cf       	rjmp	.-18     	; 0xef4 <__stack+0x5f5>
     f06:	ca 94       	dec	r12
     f08:	f4 01       	movw	r30, r8
     f0a:	ec 0d       	add	r30, r12
     f0c:	f1 1d       	adc	r31, r1
     f0e:	80 81       	ld	r24, Z
     f10:	b7 01       	movw	r22, r14
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <fputc>
     f18:	c1 10       	cpse	r12, r1
     f1a:	f5 cf       	rjmp	.-22     	; 0xf06 <__stack+0x607>
     f1c:	55 20       	and	r5, r5
     f1e:	09 f4       	brne	.+2      	; 0xf22 <__stack+0x623>
     f20:	c2 cc       	rjmp	.-1660   	; 0x8a6 <vfprintf+0x58>
     f22:	b7 01       	movw	r22, r14
     f24:	80 e2       	ldi	r24, 0x20	; 32
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <fputc>
     f2c:	5a 94       	dec	r5
     f2e:	f6 cf       	rjmp	.-20     	; 0xf1c <__stack+0x61d>
     f30:	f7 01       	movw	r30, r14
     f32:	86 81       	ldd	r24, Z+6	; 0x06
     f34:	97 81       	ldd	r25, Z+7	; 0x07
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <__stack+0x63d>
     f38:	8f ef       	ldi	r24, 0xFF	; 255
     f3a:	9f ef       	ldi	r25, 0xFF	; 255
     f3c:	63 96       	adiw	r28, 0x13	; 19
     f3e:	e2 e1       	ldi	r30, 0x12	; 18
     f40:	0c 94 f8 0c 	jmp	0x19f0	; 0x19f0 <__epilogue_restores__>

00000f44 <_ZN11TinyGPSPlusC1Ev>:
double radians(double degrees)
{
  return degrees * PI / (double)180;
}

TinyGPSPlus::TinyGPSPlus()
     f44:	fc 01       	movw	r30, r24
  const RawDegrees &rawLat()     { updated = false; return rawLatData; }
  const RawDegrees &rawLng()     { updated = false; return rawLngData; }
  double lat();
  double lng();

  TinyGPSLocation() : valid(false), updated(false)
     f46:	10 82       	st	Z, r1
     f48:	11 82       	std	Z+1, r1	; 0x01
{
  uint16_t deg;
  uint32_t billionths;
  bool negative;
  public:
  RawDegrees() : deg(0), billionths(0), negative(false)
     f4a:	13 82       	std	Z+3, r1	; 0x03
     f4c:	12 82       	std	Z+2, r1	; 0x02
     f4e:	14 82       	std	Z+4, r1	; 0x04
     f50:	15 82       	std	Z+5, r1	; 0x05
     f52:	16 82       	std	Z+6, r1	; 0x06
     f54:	17 82       	std	Z+7, r1	; 0x07
     f56:	10 86       	std	Z+8, r1	; 0x08
     f58:	12 86       	std	Z+10, r1	; 0x0a
     f5a:	11 86       	std	Z+9, r1	; 0x09
     f5c:	13 86       	std	Z+11, r1	; 0x0b
     f5e:	14 86       	std	Z+12, r1	; 0x0c
     f60:	15 86       	std	Z+13, r1	; 0x0d
     f62:	16 86       	std	Z+14, r1	; 0x0e
     f64:	17 86       	std	Z+15, r1	; 0x0f
     f66:	11 8a       	std	Z+17, r1	; 0x11
     f68:	10 8a       	std	Z+16, r1	; 0x10
     f6a:	12 8a       	std	Z+18, r1	; 0x12
     f6c:	13 8a       	std	Z+19, r1	; 0x13
     f6e:	14 8a       	std	Z+20, r1	; 0x14
     f70:	15 8a       	std	Z+21, r1	; 0x15
     f72:	16 8a       	std	Z+22, r1	; 0x16
     f74:	10 8e       	std	Z+24, r1	; 0x18
     f76:	17 8a       	std	Z+23, r1	; 0x17
     f78:	11 8e       	std	Z+25, r1	; 0x19
     f7a:	12 8e       	std	Z+26, r1	; 0x1a
     f7c:	13 8e       	std	Z+27, r1	; 0x1b
     f7e:	14 8e       	std	Z+28, r1	; 0x1c
     f80:	15 8e       	std	Z+29, r1	; 0x1d
  uint32_t value()           { updated = false; return date; }
  uint16_t year();
  uint8_t month();
  uint8_t day();

  TinyGPSDate() : valid(false), updated(false), date(0)
     f82:	12 a2       	std	Z+34, r1	; 0x22
     f84:	13 a2       	std	Z+35, r1	; 0x23
     f86:	14 a2       	std	Z+36, r1	; 0x24
     f88:	15 a2       	std	Z+37, r1	; 0x25
     f8a:	16 a2       	std	Z+38, r1	; 0x26
     f8c:	17 a2       	std	Z+39, r1	; 0x27
  uint8_t hour();
  uint8_t minute();
  uint8_t second();
  uint8_t centisecond();

  TinyGPSTime() : valid(false), updated(false), time(0)
     f8e:	10 aa       	std	Z+48, r1	; 0x30
     f90:	11 aa       	std	Z+49, r1	; 0x31
     f92:	12 aa       	std	Z+50, r1	; 0x32
     f94:	13 aa       	std	Z+51, r1	; 0x33
     f96:	14 aa       	std	Z+52, r1	; 0x34
     f98:	15 aa       	std	Z+53, r1	; 0x35
  bool isValid() const    { return valid; }
  bool isUpdated() const  { return updated; }
  // uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
  int32_t value()         { updated = false; return val; }

  TinyGPSDecimal() : valid(false), updated(false), val(0)
     f9a:	16 ae       	std	Z+62, r1	; 0x3e
     f9c:	17 ae       	std	Z+63, r1	; 0x3f
     f9e:	dc 01       	movw	r26, r24
     fa0:	ac 5b       	subi	r26, 0xBC	; 188
     fa2:	bf 4f       	sbci	r27, 0xFF	; 255
     fa4:	1d 92       	st	X+, r1
     fa6:	1d 92       	st	X+, r1
     fa8:	1d 92       	st	X+, r1
     faa:	1c 92       	st	X, r1
     fac:	13 97       	sbiw	r26, 0x03	; 3
     fae:	18 96       	adiw	r26, 0x08	; 8
     fb0:	1c 92       	st	X, r1
     fb2:	11 96       	adiw	r26, 0x01	; 1
     fb4:	1c 92       	st	X, r1
     fb6:	11 97       	sbiw	r26, 0x01	; 1
     fb8:	16 96       	adiw	r26, 0x06	; 6
     fba:	1d 92       	st	X+, r1
     fbc:	1d 92       	st	X+, r1
     fbe:	1d 92       	st	X+, r1
     fc0:	1c 92       	st	X, r1
     fc2:	19 97       	sbiw	r26, 0x09	; 9
     fc4:	1e 96       	adiw	r26, 0x0e	; 14
     fc6:	1c 92       	st	X, r1
     fc8:	11 96       	adiw	r26, 0x01	; 1
     fca:	1c 92       	st	X, r1
     fcc:	11 97       	sbiw	r26, 0x01	; 1
     fce:	16 96       	adiw	r26, 0x06	; 6
     fd0:	1d 92       	st	X+, r1
     fd2:	1d 92       	st	X+, r1
     fd4:	1d 92       	st	X+, r1
     fd6:	1c 92       	st	X, r1
     fd8:	19 97       	sbiw	r26, 0x09	; 9
  bool isValid() const    { return valid; }
  bool isUpdated() const  { return updated; }
  // uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
  uint32_t value()        { updated = false; return val; }

  TinyGPSInteger() : valid(false), updated(false), val(0)
     fda:	1e 96       	adiw	r26, 0x0e	; 14
     fdc:	1c 92       	st	X, r1
     fde:	11 96       	adiw	r26, 0x01	; 1
     fe0:	1c 92       	st	X, r1
     fe2:	11 97       	sbiw	r26, 0x01	; 1
     fe4:	16 96       	adiw	r26, 0x06	; 6
     fe6:	1d 92       	st	X+, r1
     fe8:	1d 92       	st	X+, r1
     fea:	1d 92       	st	X+, r1
     fec:	1c 92       	st	X, r1
     fee:	19 97       	sbiw	r26, 0x09	; 9
  bool isValid() const    { return valid; }
  bool isUpdated() const  { return updated; }
  // uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
  int32_t value()         { updated = false; return val; }

  TinyGPSDecimal() : valid(false), updated(false), val(0)
     ff0:	1e 96       	adiw	r26, 0x0e	; 14
     ff2:	1c 92       	st	X, r1
     ff4:	11 96       	adiw	r26, 0x01	; 1
     ff6:	1c 92       	st	X, r1
     ff8:	11 97       	sbiw	r26, 0x01	; 1
     ffa:	16 96       	adiw	r26, 0x06	; 6
     ffc:	1d 92       	st	X+, r1
     ffe:	1d 92       	st	X+, r1
    1000:	1d 92       	st	X+, r1
    1002:	1c 92       	st	X, r1
    1004:	19 97       	sbiw	r26, 0x09	; 9
,  customElts(0)
,  customCandidates(0)
,  encodedCharCount(0)
,  sentencesWithFixCount(0)
,  failedChecksumCount(0)
,  passedChecksumCount(0)
    1006:	1e 96       	adiw	r26, 0x0e	; 14
    1008:	1c 92       	st	X, r1
    100a:	11 96       	adiw	r26, 0x01	; 1
    100c:	1c 92       	st	X, r1
    100e:	50 96       	adiw	r26, 0x10	; 16
    1010:	82 e0       	ldi	r24, 0x02	; 2
    1012:	8c 93       	st	X, r24
    1014:	11 96       	adiw	r26, 0x01	; 1
    1016:	1c 92       	st	X, r1
    1018:	11 96       	adiw	r26, 0x01	; 1
    101a:	1c 92       	st	X, r1
    101c:	11 96       	adiw	r26, 0x01	; 1
    101e:	1c 92       	st	X, r1
    1020:	11 96       	adiw	r26, 0x01	; 1
    1022:	11 96       	adiw	r26, 0x01	; 1
    1024:	1c 92       	st	X, r1
    1026:	1e 92       	st	-X, r1
    1028:	12 96       	adiw	r26, 0x02	; 2
    102a:	11 96       	adiw	r26, 0x01	; 1
    102c:	1c 92       	st	X, r1
    102e:	1e 92       	st	-X, r1
    1030:	12 96       	adiw	r26, 0x02	; 2
    1032:	1d 92       	st	X+, r1
    1034:	1d 92       	st	X+, r1
    1036:	1d 92       	st	X+, r1
    1038:	1c 92       	st	X, r1
    103a:	13 97       	sbiw	r26, 0x03	; 3
    103c:	14 96       	adiw	r26, 0x04	; 4
    103e:	1d 92       	st	X+, r1
    1040:	1d 92       	st	X+, r1
    1042:	1d 92       	st	X+, r1
    1044:	1c 92       	st	X, r1
    1046:	13 97       	sbiw	r26, 0x03	; 3
    1048:	14 96       	adiw	r26, 0x04	; 4
    104a:	1d 92       	st	X+, r1
    104c:	1d 92       	st	X+, r1
    104e:	1d 92       	st	X+, r1
    1050:	1c 92       	st	X, r1
    1052:	13 97       	sbiw	r26, 0x03	; 3
    1054:	14 96       	adiw	r26, 0x04	; 4
    1056:	1d 92       	st	X+, r1
    1058:	1d 92       	st	X+, r1
    105a:	1d 92       	st	X+, r1
    105c:	1c 92       	st	X, r1
    105e:	13 97       	sbiw	r26, 0x03	; 3
{
  term[0] = '\0';
    1060:	ea 57       	subi	r30, 0x7A	; 122
    1062:	ff 4f       	sbci	r31, 0xFF	; 255
    1064:	10 82       	st	Z, r1
    1066:	08 95       	ret

00001068 <_ZN11TinyGPSPlus7fromHexEc>:
//
// internal utilities
//
int TinyGPSPlus::fromHex(char a)
{
  if (a >= 'A' && a <= 'F')
    1068:	8f eb       	ldi	r24, 0xBF	; 191
    106a:	86 0f       	add	r24, r22
    106c:	86 30       	cpi	r24, 0x06	; 6
    106e:	20 f4       	brcc	.+8      	; 0x1078 <_ZN11TinyGPSPlus7fromHexEc+0x10>
  return a - 'A' + 10;
    1070:	86 2f       	mov	r24, r22
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	c7 97       	sbiw	r24, 0x37	; 55
    1076:	08 95       	ret
  else if (a >= 'a' && a <= 'f')
    1078:	8f e9       	ldi	r24, 0x9F	; 159
    107a:	86 0f       	add	r24, r22
    107c:	86 30       	cpi	r24, 0x06	; 6
    107e:	28 f4       	brcc	.+10     	; 0x108a <_ZN11TinyGPSPlus7fromHexEc+0x22>
  return a - 'a' + 10;
    1080:	86 2f       	mov	r24, r22
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	87 55       	subi	r24, 0x57	; 87
    1086:	91 09       	sbc	r25, r1
    1088:	08 95       	ret
  else
  return a - '0';
    108a:	86 2f       	mov	r24, r22
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	c0 97       	sbiw	r24, 0x30	; 48
}
    1090:	08 95       	ret

00001092 <_ZN11TinyGPSPlus12parseDecimalEPKc>:

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
    1092:	ff 92       	push	r15
    1094:	0f 93       	push	r16
    1096:	1f 93       	push	r17
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	ec 01       	movw	r28, r24
  bool negative = *term == '-';
    109e:	ff 24       	eor	r15, r15
    10a0:	f3 94       	inc	r15
    10a2:	88 81       	ld	r24, Y
    10a4:	8d 32       	cpi	r24, 0x2D	; 45
    10a6:	09 f0       	breq	.+2      	; 0x10aa <_ZN11TinyGPSPlus12parseDecimalEPKc+0x18>
    10a8:	f1 2c       	mov	r15, r1
  if (negative) ++term;
    10aa:	f1 10       	cpse	r15, r1
    10ac:	21 96       	adiw	r28, 0x01	; 1
  int32_t ret = 100 * (int32_t)atol(term);
    10ae:	ce 01       	movw	r24, r28
    10b0:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <atol>
    10b4:	9b 01       	movw	r18, r22
    10b6:	ac 01       	movw	r20, r24
    10b8:	a4 e6       	ldi	r26, 0x64	; 100
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	0e 94 c9 0c 	call	0x1992	; 0x1992 <__muluhisi3>
  while (isdigit(*term)) ++term;
    10c0:	48 81       	ld	r20, Y
    10c2:	24 2f       	mov	r18, r20
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	20 53       	subi	r18, 0x30	; 48
    10c8:	31 09       	sbc	r19, r1
    10ca:	2a 30       	cpi	r18, 0x0A	; 10
    10cc:	31 05       	cpc	r19, r1
    10ce:	58 f4       	brcc	.+22     	; 0x10e6 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x54>
    10d0:	fe 01       	movw	r30, r28
    10d2:	31 96       	adiw	r30, 0x01	; 1
    10d4:	ef 01       	movw	r28, r30
    10d6:	41 91       	ld	r20, Z+
    10d8:	24 2f       	mov	r18, r20
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	20 53       	subi	r18, 0x30	; 48
    10de:	31 09       	sbc	r19, r1
    10e0:	2a 30       	cpi	r18, 0x0A	; 10
    10e2:	31 05       	cpc	r19, r1
    10e4:	b8 f3       	brcs	.-18     	; 0x10d4 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x42>
  if (*term == '.' && isdigit(term[1]))
    10e6:	4e 32       	cpi	r20, 0x2E	; 46
    10e8:	81 f5       	brne	.+96     	; 0x114a <_ZN11TinyGPSPlus12parseDecimalEPKc+0xb8>
    10ea:	49 81       	ldd	r20, Y+1	; 0x01
    10ec:	24 2f       	mov	r18, r20
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	20 53       	subi	r18, 0x30	; 48
    10f2:	31 09       	sbc	r19, r1
    10f4:	2a 30       	cpi	r18, 0x0A	; 10
    10f6:	31 05       	cpc	r19, r1
    10f8:	40 f5       	brcc	.+80     	; 0x114a <_ZN11TinyGPSPlus12parseDecimalEPKc+0xb8>
  {
    ret += 10 * (term[1] - '0');
    10fa:	24 2f       	mov	r18, r20
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	20 53       	subi	r18, 0x30	; 48
    1100:	31 09       	sbc	r19, r1
    1102:	89 01       	movw	r16, r18
    1104:	00 0f       	add	r16, r16
    1106:	11 1f       	adc	r17, r17
    1108:	22 0f       	add	r18, r18
    110a:	33 1f       	adc	r19, r19
    110c:	22 0f       	add	r18, r18
    110e:	33 1f       	adc	r19, r19
    1110:	22 0f       	add	r18, r18
    1112:	33 1f       	adc	r19, r19
    1114:	02 0f       	add	r16, r18
    1116:	13 1f       	adc	r17, r19
    1118:	22 27       	eor	r18, r18
    111a:	17 fd       	sbrc	r17, 7
    111c:	20 95       	com	r18
    111e:	32 2f       	mov	r19, r18
    1120:	60 0f       	add	r22, r16
    1122:	71 1f       	adc	r23, r17
    1124:	82 1f       	adc	r24, r18
    1126:	93 1f       	adc	r25, r19
    if (isdigit(term[2]))
    1128:	0a 81       	ldd	r16, Y+2	; 0x02
    112a:	20 2f       	mov	r18, r16
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	20 53       	subi	r18, 0x30	; 48
    1130:	31 09       	sbc	r19, r1
    1132:	2a 30       	cpi	r18, 0x0A	; 10
    1134:	31 05       	cpc	r19, r1
    1136:	48 f4       	brcc	.+18     	; 0x114a <_ZN11TinyGPSPlus12parseDecimalEPKc+0xb8>
    ret += term[2] - '0';
    1138:	89 01       	movw	r16, r18
    113a:	22 27       	eor	r18, r18
    113c:	17 fd       	sbrc	r17, 7
    113e:	20 95       	com	r18
    1140:	32 2f       	mov	r19, r18
    1142:	60 0f       	add	r22, r16
    1144:	71 1f       	adc	r23, r17
    1146:	82 1f       	adc	r24, r18
    1148:	93 1f       	adc	r25, r19
  }
  return negative ? -ret : ret;
    114a:	ff 20       	and	r15, r15
    114c:	39 f0       	breq	.+14     	; 0x115c <_ZN11TinyGPSPlus12parseDecimalEPKc+0xca>
    114e:	90 95       	com	r25
    1150:	80 95       	com	r24
    1152:	70 95       	com	r23
    1154:	61 95       	neg	r22
    1156:	7f 4f       	sbci	r23, 0xFF	; 255
    1158:	8f 4f       	sbci	r24, 0xFF	; 255
    115a:	9f 4f       	sbci	r25, 0xFF	; 255
}
    115c:	df 91       	pop	r29
    115e:	cf 91       	pop	r28
    1160:	1f 91       	pop	r17
    1162:	0f 91       	pop	r16
    1164:	ff 90       	pop	r15
    1166:	08 95       	ret

00001168 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>:

// static
// Parse degrees in that funny NMEA format DDMM.MMMM
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
    1168:	4f 92       	push	r4
    116a:	5f 92       	push	r5
    116c:	7f 92       	push	r7
    116e:	8f 92       	push	r8
    1170:	9f 92       	push	r9
    1172:	af 92       	push	r10
    1174:	bf 92       	push	r11
    1176:	cf 92       	push	r12
    1178:	df 92       	push	r13
    117a:	ef 92       	push	r14
    117c:	ff 92       	push	r15
    117e:	0f 93       	push	r16
    1180:	1f 93       	push	r17
    1182:	cf 93       	push	r28
    1184:	df 93       	push	r29
    1186:	ec 01       	movw	r28, r24
    1188:	2b 01       	movw	r4, r22
  uint32_t leftOfDecimal = (uint32_t)atol(term);
    118a:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <atol>
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
    118e:	24 e6       	ldi	r18, 0x64	; 100
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	40 e0       	ldi	r20, 0x00	; 0
    1194:	50 e0       	ldi	r21, 0x00	; 0
    1196:	0e 94 a1 0c 	call	0x1942	; 0x1942 <__udivmodsi4>
    119a:	49 01       	movw	r8, r18
    119c:	5a 01       	movw	r10, r20
    119e:	9b 01       	movw	r18, r22
    11a0:	ac 01       	movw	r20, r24
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
    11a2:	60 e8       	ldi	r22, 0x80	; 128
    11a4:	76 e9       	ldi	r23, 0x96	; 150
    11a6:	88 e9       	ldi	r24, 0x98	; 152
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	0e 94 91 0c 	call	0x1922	; 0x1922 <__mulsi3>
    11ae:	6b 01       	movw	r12, r22
    11b0:	7c 01       	movw	r14, r24

  deg.deg = (int16_t)(leftOfDecimal / 100);
    11b2:	f2 01       	movw	r30, r4
    11b4:	91 82       	std	Z+1, r9	; 0x01
    11b6:	80 82       	st	Z, r8

  while (isdigit(*term))
    11b8:	28 81       	ld	r18, Y
    11ba:	82 2f       	mov	r24, r18
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	c0 97       	sbiw	r24, 0x30	; 48
    11c0:	0a 97       	sbiw	r24, 0x0a	; 10
    11c2:	48 f4       	brcc	.+18     	; 0x11d6 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x6e>
    11c4:	fe 01       	movw	r30, r28
    11c6:	31 96       	adiw	r30, 0x01	; 1
  ++term;
    11c8:	ef 01       	movw	r28, r30
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;

  deg.deg = (int16_t)(leftOfDecimal / 100);

  while (isdigit(*term))
    11ca:	21 91       	ld	r18, Z+
    11cc:	82 2f       	mov	r24, r18
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	c0 97       	sbiw	r24, 0x30	; 48
    11d2:	0a 97       	sbiw	r24, 0x0a	; 10
    11d4:	c8 f3       	brcs	.-14     	; 0x11c8 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x60>
  ++term;

  if (*term == '.')
    11d6:	2e 32       	cpi	r18, 0x2E	; 46
    11d8:	89 f5       	brne	.+98     	; 0x123c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0xd4>
  while (isdigit(*++term))
    11da:	19 81       	ldd	r17, Y+1	; 0x01
    11dc:	81 2f       	mov	r24, r17
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	c0 97       	sbiw	r24, 0x30	; 48
    11e2:	0a 97       	sbiw	r24, 0x0a	; 10
    11e4:	58 f5       	brcc	.+86     	; 0x123c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0xd4>
    11e6:	22 96       	adiw	r28, 0x02	; 2
    11e8:	68 94       	set
    11ea:	77 24       	eor	r7, r7
    11ec:	77 f8       	bld	r7, 7
    11ee:	06 e9       	ldi	r16, 0x96	; 150
    11f0:	f8 e9       	ldi	r31, 0x98	; 152
    11f2:	e0 e0       	ldi	r30, 0x00	; 0
  {
    multiplier /= 10;
    11f4:	0f 2e       	mov	r0, r31
    11f6:	fa e0       	ldi	r31, 0x0A	; 10
    11f8:	8f 2e       	mov	r8, r31
    11fa:	91 2c       	mov	r9, r1
    11fc:	a1 2c       	mov	r10, r1
    11fe:	b1 2c       	mov	r11, r1
    1200:	f0 2d       	mov	r31, r0
    1202:	67 2d       	mov	r22, r7
    1204:	70 2f       	mov	r23, r16
    1206:	8f 2f       	mov	r24, r31
    1208:	9e 2f       	mov	r25, r30
    120a:	a5 01       	movw	r20, r10
    120c:	94 01       	movw	r18, r8
    120e:	0e 94 a1 0c 	call	0x1942	; 0x1942 <__udivmodsi4>
    1212:	72 2e       	mov	r7, r18
    1214:	03 2f       	mov	r16, r19
    1216:	f4 2f       	mov	r31, r20
    1218:	e5 2f       	mov	r30, r21
    tenMillionthsOfMinutes += (*term - '0') * multiplier;
    121a:	a1 2f       	mov	r26, r17
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	d0 97       	sbiw	r26, 0x30	; 48
    1220:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__mulshisi3>
    1224:	c6 0e       	add	r12, r22
    1226:	d7 1e       	adc	r13, r23
    1228:	e8 1e       	adc	r14, r24
    122a:	f9 1e       	adc	r15, r25

  while (isdigit(*term))
  ++term;

  if (*term == '.')
  while (isdigit(*++term))
    122c:	19 91       	ld	r17, Y+
    122e:	21 2f       	mov	r18, r17
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	20 53       	subi	r18, 0x30	; 48
    1234:	31 09       	sbc	r19, r1
    1236:	2a 30       	cpi	r18, 0x0A	; 10
    1238:	31 05       	cpc	r19, r1
    123a:	18 f3       	brcs	.-58     	; 0x1202 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x9a>
  {
    multiplier /= 10;
    tenMillionthsOfMinutes += (*term - '0') * multiplier;
  }

  deg.billionths = (5 * tenMillionthsOfMinutes + 1) / 3;
    123c:	d7 01       	movw	r26, r14
    123e:	c6 01       	movw	r24, r12
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	aa 1f       	adc	r26, r26
    1246:	bb 1f       	adc	r27, r27
    1248:	88 0f       	add	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	aa 1f       	adc	r26, r26
    124e:	bb 1f       	adc	r27, r27
    1250:	c8 0e       	add	r12, r24
    1252:	d9 1e       	adc	r13, r25
    1254:	ea 1e       	adc	r14, r26
    1256:	fb 1e       	adc	r15, r27
    1258:	c7 01       	movw	r24, r14
    125a:	b6 01       	movw	r22, r12
    125c:	6f 5f       	subi	r22, 0xFF	; 255
    125e:	7f 4f       	sbci	r23, 0xFF	; 255
    1260:	8f 4f       	sbci	r24, 0xFF	; 255
    1262:	9f 4f       	sbci	r25, 0xFF	; 255
    1264:	23 e0       	ldi	r18, 0x03	; 3
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	40 e0       	ldi	r20, 0x00	; 0
    126a:	50 e0       	ldi	r21, 0x00	; 0
    126c:	0e 94 a1 0c 	call	0x1942	; 0x1942 <__udivmodsi4>
    1270:	f2 01       	movw	r30, r4
    1272:	22 83       	std	Z+2, r18	; 0x02
    1274:	33 83       	std	Z+3, r19	; 0x03
    1276:	44 83       	std	Z+4, r20	; 0x04
    1278:	55 83       	std	Z+5, r21	; 0x05
  deg.negative = false;
    127a:	16 82       	std	Z+6, r1	; 0x06
}
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	1f 91       	pop	r17
    1282:	0f 91       	pop	r16
    1284:	ff 90       	pop	r15
    1286:	ef 90       	pop	r14
    1288:	df 90       	pop	r13
    128a:	cf 90       	pop	r12
    128c:	bf 90       	pop	r11
    128e:	af 90       	pop	r10
    1290:	9f 90       	pop	r9
    1292:	8f 90       	pop	r8
    1294:	7f 90       	pop	r7
    1296:	5f 90       	pop	r5
    1298:	4f 90       	pop	r4
    129a:	08 95       	ret

0000129c <_ZN15TinyGPSLocation6commitEv>:
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
  rawLatData = rawNewLatData;
    129c:	27 e0       	ldi	r18, 0x07	; 7
    129e:	fc 01       	movw	r30, r24
    12a0:	70 96       	adiw	r30, 0x10	; 16
    12a2:	dc 01       	movw	r26, r24
    12a4:	12 96       	adiw	r26, 0x02	; 2
    12a6:	01 90       	ld	r0, Z+
    12a8:	0d 92       	st	X+, r0
    12aa:	2a 95       	dec	r18
    12ac:	e1 f7       	brne	.-8      	; 0x12a6 <_ZN15TinyGPSLocation6commitEv+0xa>
  rawLngData = rawNewLngData;
    12ae:	27 e0       	ldi	r18, 0x07	; 7
    12b0:	fc 01       	movw	r30, r24
    12b2:	77 96       	adiw	r30, 0x17	; 23
    12b4:	dc 01       	movw	r26, r24
    12b6:	19 96       	adiw	r26, 0x09	; 9
    12b8:	01 90       	ld	r0, Z+
    12ba:	0d 92       	st	X+, r0
    12bc:	2a 95       	dec	r18
    12be:	e1 f7       	brne	.-8      	; 0x12b8 <_ZN15TinyGPSLocation6commitEv+0x1c>
  // lastCommitTime = millis();
  valid = updated = true;
    12c0:	21 e0       	ldi	r18, 0x01	; 1
    12c2:	fc 01       	movw	r30, r24
    12c4:	21 83       	std	Z+1, r18	; 0x01
    12c6:	20 83       	st	Z, r18
    12c8:	08 95       	ret

000012ca <_ZN15TinyGPSLocation3latEv>:
{
  TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
    12ca:	cf 92       	push	r12
    12cc:	df 92       	push	r13
    12ce:	ef 92       	push	r14
    12d0:	ff 92       	push	r15
    12d2:	cf 93       	push	r28
    12d4:	df 93       	push	r29
    12d6:	ec 01       	movw	r28, r24
  updated = false;
    12d8:	19 82       	std	Y+1, r1	; 0x01
  double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
    12da:	6a 81       	ldd	r22, Y+2	; 0x02
    12dc:	7b 81       	ldd	r23, Y+3	; 0x03
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	0e 94 99 03 	call	0x732	; 0x732 <__floatunsisf>
    12e6:	6b 01       	movw	r12, r22
    12e8:	7c 01       	movw	r14, r24
    12ea:	6c 81       	ldd	r22, Y+4	; 0x04
    12ec:	7d 81       	ldd	r23, Y+5	; 0x05
    12ee:	8e 81       	ldd	r24, Y+6	; 0x06
    12f0:	9f 81       	ldd	r25, Y+7	; 0x07
    12f2:	0e 94 99 03 	call	0x732	; 0x732 <__floatunsisf>
    12f6:	28 e2       	ldi	r18, 0x28	; 40
    12f8:	3b e6       	ldi	r19, 0x6B	; 107
    12fa:	4e e6       	ldi	r20, 0x6E	; 110
    12fc:	5e e4       	ldi	r21, 0x4E	; 78
    12fe:	0e 94 31 03 	call	0x662	; 0x662 <__divsf3>
    1302:	9b 01       	movw	r18, r22
    1304:	ac 01       	movw	r20, r24
    1306:	c7 01       	movw	r24, r14
    1308:	b6 01       	movw	r22, r12
    130a:	0e 94 cd 02 	call	0x59a	; 0x59a <__addsf3>
  return rawLatData.negative ? -ret : ret;
    130e:	28 85       	ldd	r18, Y+8	; 0x08
    1310:	21 11       	cpse	r18, r1
    1312:	90 58       	subi	r25, 0x80	; 128
}
    1314:	df 91       	pop	r29
    1316:	cf 91       	pop	r28
    1318:	ff 90       	pop	r15
    131a:	ef 90       	pop	r14
    131c:	df 90       	pop	r13
    131e:	cf 90       	pop	r12
    1320:	08 95       	ret

00001322 <_ZN15TinyGPSLocation3lngEv>:

double TinyGPSLocation::lng()
{
    1322:	cf 92       	push	r12
    1324:	df 92       	push	r13
    1326:	ef 92       	push	r14
    1328:	ff 92       	push	r15
    132a:	cf 93       	push	r28
    132c:	df 93       	push	r29
    132e:	ec 01       	movw	r28, r24
  updated = false;
    1330:	19 82       	std	Y+1, r1	; 0x01
  double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
    1332:	69 85       	ldd	r22, Y+9	; 0x09
    1334:	7a 85       	ldd	r23, Y+10	; 0x0a
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	0e 94 99 03 	call	0x732	; 0x732 <__floatunsisf>
    133e:	6b 01       	movw	r12, r22
    1340:	7c 01       	movw	r14, r24
    1342:	6b 85       	ldd	r22, Y+11	; 0x0b
    1344:	7c 85       	ldd	r23, Y+12	; 0x0c
    1346:	8d 85       	ldd	r24, Y+13	; 0x0d
    1348:	9e 85       	ldd	r25, Y+14	; 0x0e
    134a:	0e 94 99 03 	call	0x732	; 0x732 <__floatunsisf>
    134e:	28 e2       	ldi	r18, 0x28	; 40
    1350:	3b e6       	ldi	r19, 0x6B	; 107
    1352:	4e e6       	ldi	r20, 0x6E	; 110
    1354:	5e e4       	ldi	r21, 0x4E	; 78
    1356:	0e 94 31 03 	call	0x662	; 0x662 <__divsf3>
    135a:	9b 01       	movw	r18, r22
    135c:	ac 01       	movw	r20, r24
    135e:	c7 01       	movw	r24, r14
    1360:	b6 01       	movw	r22, r12
    1362:	0e 94 cd 02 	call	0x59a	; 0x59a <__addsf3>
  return rawLngData.negative ? -ret : ret;
    1366:	2f 85       	ldd	r18, Y+15	; 0x0f
    1368:	21 11       	cpse	r18, r1
    136a:	90 58       	subi	r25, 0x80	; 128
}
    136c:	df 91       	pop	r29
    136e:	cf 91       	pop	r28
    1370:	ff 90       	pop	r15
    1372:	ef 90       	pop	r14
    1374:	df 90       	pop	r13
    1376:	cf 90       	pop	r12
    1378:	08 95       	ret

0000137a <_ZN11TinyGPSTime7setTimeEPKc>:
  // lastCommitTime = millis();
  valid = updated = true;
}

void TinyGPSTime::setTime(const char *term)
{
    137a:	cf 93       	push	r28
    137c:	df 93       	push	r29
    137e:	ec 01       	movw	r28, r24
    1380:	cb 01       	movw	r24, r22
  newTime = (uint32_t)TinyGPSPlus::parseDecimal(term);
    1382:	0e 94 49 08 	call	0x1092	; 0x1092 <_ZN11TinyGPSPlus12parseDecimalEPKc>
    1386:	6e 83       	std	Y+6, r22	; 0x06
    1388:	7f 83       	std	Y+7, r23	; 0x07
    138a:	88 87       	std	Y+8, r24	; 0x08
    138c:	99 87       	std	Y+9, r25	; 0x09
}
    138e:	df 91       	pop	r29
    1390:	cf 91       	pop	r28
    1392:	08 95       	ret

00001394 <_ZN11TinyGPSDate7setDateEPKc>:

void TinyGPSDate::setDate(const char *term)
{
    1394:	cf 93       	push	r28
    1396:	df 93       	push	r29
    1398:	ec 01       	movw	r28, r24
    139a:	cb 01       	movw	r24, r22
  newDate = atol(term);
    139c:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <atol>
    13a0:	6e 83       	std	Y+6, r22	; 0x06
    13a2:	7f 83       	std	Y+7, r23	; 0x07
    13a4:	88 87       	std	Y+8, r24	; 0x08
    13a6:	99 87       	std	Y+9, r25	; 0x09
}
    13a8:	df 91       	pop	r29
    13aa:	cf 91       	pop	r28
    13ac:	08 95       	ret

000013ae <_ZN14TinyGPSDecimal3setEPKc>:
  // lastCommitTime = millis();
  valid = updated = true;
}

void TinyGPSDecimal::set(const char *term)
{
    13ae:	cf 93       	push	r28
    13b0:	df 93       	push	r29
    13b2:	ec 01       	movw	r28, r24
    13b4:	cb 01       	movw	r24, r22
  newval = TinyGPSPlus::parseDecimal(term);
    13b6:	0e 94 49 08 	call	0x1092	; 0x1092 <_ZN11TinyGPSPlus12parseDecimalEPKc>
    13ba:	6a 87       	std	Y+10, r22	; 0x0a
    13bc:	7b 87       	std	Y+11, r23	; 0x0b
    13be:	8c 87       	std	Y+12, r24	; 0x0c
    13c0:	9d 87       	std	Y+13, r25	; 0x0d
}
    13c2:	df 91       	pop	r29
    13c4:	cf 91       	pop	r28
    13c6:	08 95       	ret

000013c8 <_ZN14TinyGPSInteger3setEPKc>:
  // lastCommitTime = millis();
  valid = updated = true;
}

void TinyGPSInteger::set(const char *term)
{
    13c8:	cf 93       	push	r28
    13ca:	df 93       	push	r29
    13cc:	ec 01       	movw	r28, r24
    13ce:	cb 01       	movw	r24, r22
  newval = atol(term);
    13d0:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <atol>
    13d4:	6a 87       	std	Y+10, r22	; 0x0a
    13d6:	7b 87       	std	Y+11, r23	; 0x0b
    13d8:	8c 87       	std	Y+12, r24	; 0x0c
    13da:	9d 87       	std	Y+13, r25	; 0x0d
}
    13dc:	df 91       	pop	r29
    13de:	cf 91       	pop	r28
    13e0:	08 95       	ret

000013e2 <_ZN13TinyGPSCustom6commitEv>:
  // Insert this item into the GPS tree
  gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
    13e2:	cf 93       	push	r28
    13e4:	df 93       	push	r29
    13e6:	ec 01       	movw	r28, r24
  strcpy(this->buffer, this->stagingBuffer);
    13e8:	bc 01       	movw	r22, r24
    13ea:	40 96       	adiw	r24, 0x10	; 16
    13ec:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <strcpy>
  // lastCommitTime = millis();
  valid = updated = true;
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	8d a3       	std	Y+37, r24	; 0x25
    13f4:	8c a3       	std	Y+36, r24	; 0x24
}
    13f6:	df 91       	pop	r29
    13f8:	cf 91       	pop	r28
    13fa:	08 95       	ret

000013fc <_ZN13TinyGPSCustom3setEPKc>:

void TinyGPSCustom::set(const char *term)
{
  strncpy(this->stagingBuffer, term, sizeof(this->stagingBuffer));
    13fc:	40 e1       	ldi	r20, 0x10	; 16
    13fe:	50 e0       	ldi	r21, 0x00	; 0
    1400:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <strncpy>
    1404:	08 95       	ret

00001406 <_ZN11TinyGPSPlus16endOfTermHandlerEv>:
#define COMBINE(sentence_type, term_number) (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPSPlus::endOfTermHandler()
{
    1406:	af 92       	push	r10
    1408:	bf 92       	push	r11
    140a:	cf 92       	push	r12
    140c:	df 92       	push	r13
    140e:	ef 92       	push	r14
    1410:	ff 92       	push	r15
    1412:	1f 93       	push	r17
    1414:	cf 93       	push	r28
    1416:	df 93       	push	r29
    1418:	ec 01       	movw	r28, r24
  // If it's the checksum term, and the checksum checks out, commit
  if (isChecksumTerm)
    141a:	fc 01       	movw	r30, r24
    141c:	eb 57       	subi	r30, 0x7B	; 123
    141e:	ff 4f       	sbci	r31, 0xFF	; 255
    1420:	10 81       	ld	r17, Z
    1422:	11 23       	and	r17, r17
    1424:	09 f4       	brne	.+2      	; 0x1428 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x22>
    1426:	dd c0       	rjmp	.+442    	; 0x15e2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1dc>
  {
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
    1428:	31 96       	adiw	r30, 0x01	; 1
    142a:	60 81       	ld	r22, Z
    142c:	0e 94 34 08 	call	0x1068	; 0x1068 <_ZN11TinyGPSPlus7fromHexEc>
    1430:	f8 2e       	mov	r15, r24
    1432:	fe 01       	movw	r30, r28
    1434:	e9 57       	subi	r30, 0x79	; 121
    1436:	ff 4f       	sbci	r31, 0xFF	; 255
    1438:	60 81       	ld	r22, Z
    143a:	ce 01       	movw	r24, r28
    143c:	0e 94 34 08 	call	0x1068	; 0x1068 <_ZN11TinyGPSPlus7fromHexEc>
    1440:	30 e1       	ldi	r19, 0x10	; 16
    1442:	f3 9e       	mul	r15, r19
    1444:	80 0d       	add	r24, r0
    1446:	11 24       	eor	r1, r1
    if (checksum == parity)
    1448:	fe 01       	movw	r30, r28
    144a:	ec 57       	subi	r30, 0x7C	; 124
    144c:	ff 4f       	sbci	r31, 0xFF	; 255
    144e:	90 81       	ld	r25, Z
    1450:	98 13       	cpse	r25, r24
    1452:	b7 c0       	rjmp	.+366    	; 0x15c2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1bc>
    {
      passedChecksumCount++;
    1454:	b5 96       	adiw	r30, 0x25	; 37
    1456:	40 81       	ld	r20, Z
    1458:	51 81       	ldd	r21, Z+1	; 0x01
    145a:	62 81       	ldd	r22, Z+2	; 0x02
    145c:	73 81       	ldd	r23, Z+3	; 0x03
    145e:	4f 5f       	subi	r20, 0xFF	; 255
    1460:	5f 4f       	sbci	r21, 0xFF	; 255
    1462:	6f 4f       	sbci	r22, 0xFF	; 255
    1464:	7f 4f       	sbci	r23, 0xFF	; 255
    1466:	40 83       	st	Z, r20
    1468:	51 83       	std	Z+1, r21	; 0x01
    146a:	62 83       	std	Z+2, r22	; 0x02
    146c:	73 83       	std	Z+3, r23	; 0x03
      if (sentenceHasFix)
    146e:	71 97       	sbiw	r30, 0x11	; 17
    1470:	20 81       	ld	r18, Z
    1472:	22 23       	and	r18, r18
    1474:	69 f0       	breq	.+26     	; 0x1490 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x8a>
      ++sentencesWithFixCount;
    1476:	39 96       	adiw	r30, 0x09	; 9
    1478:	40 81       	ld	r20, Z
    147a:	51 81       	ldd	r21, Z+1	; 0x01
    147c:	62 81       	ldd	r22, Z+2	; 0x02
    147e:	73 81       	ldd	r23, Z+3	; 0x03
    1480:	4f 5f       	subi	r20, 0xFF	; 255
    1482:	5f 4f       	sbci	r21, 0xFF	; 255
    1484:	6f 4f       	sbci	r22, 0xFF	; 255
    1486:	7f 4f       	sbci	r23, 0xFF	; 255
    1488:	40 83       	st	Z, r20
    148a:	51 83       	std	Z+1, r21	; 0x01
    148c:	62 83       	std	Z+2, r22	; 0x02
    148e:	73 83       	std	Z+3, r23	; 0x03

      switch(curSentenceType)
    1490:	fe 01       	movw	r30, r28
    1492:	eb 56       	subi	r30, 0x6B	; 107
    1494:	ff 4f       	sbci	r31, 0xFF	; 255
    1496:	80 81       	ld	r24, Z
    1498:	88 23       	and	r24, r24
    149a:	c9 f1       	breq	.+114    	; 0x150e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x108>
    149c:	81 30       	cpi	r24, 0x01	; 1
    149e:	09 f0       	breq	.+2      	; 0x14a2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x9c>
    14a0:	6d c0       	rjmp	.+218    	; 0x157c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x176>
  return rawLngData.negative ? -ret : ret;
}

void TinyGPSDate::commit()
{
  date = newDate;
    14a2:	88 a5       	ldd	r24, Y+40	; 0x28
    14a4:	99 a5       	ldd	r25, Y+41	; 0x29
    14a6:	aa a5       	ldd	r26, Y+42	; 0x2a
    14a8:	bb a5       	ldd	r27, Y+43	; 0x2b
    14aa:	8c a3       	std	Y+36, r24	; 0x24
    14ac:	9d a3       	std	Y+37, r25	; 0x25
    14ae:	ae a3       	std	Y+38, r26	; 0x26
    14b0:	bf a3       	std	Y+39, r27	; 0x27
  // lastCommitTime = millis();
  valid = updated = true;
    14b2:	31 e0       	ldi	r19, 0x01	; 1
    14b4:	3b a3       	std	Y+35, r19	; 0x23
    14b6:	3a a3       	std	Y+34, r19	; 0x22
}

void TinyGPSTime::commit()
{
  time = newTime;
    14b8:	8e a9       	ldd	r24, Y+54	; 0x36
    14ba:	9f a9       	ldd	r25, Y+55	; 0x37
    14bc:	a8 ad       	ldd	r26, Y+56	; 0x38
    14be:	b9 ad       	ldd	r27, Y+57	; 0x39
    14c0:	8a ab       	std	Y+50, r24	; 0x32
    14c2:	9b ab       	std	Y+51, r25	; 0x33
    14c4:	ac ab       	std	Y+52, r26	; 0x34
    14c6:	bd ab       	std	Y+53, r27	; 0x35
  // lastCommitTime = millis();
  valid = updated = true;
    14c8:	39 ab       	std	Y+49, r19	; 0x31
    14ca:	38 ab       	std	Y+48, r19	; 0x30
      switch(curSentenceType)
      {
        case GPS_SENTENCE_GPRMC:
        date.commit();
        time.commit();
        if (sentenceHasFix)
    14cc:	22 23       	and	r18, r18
    14ce:	09 f4       	brne	.+2      	; 0x14d2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xcc>
    14d0:	55 c0       	rjmp	.+170    	; 0x157c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x176>
        {
          location.commit();
    14d2:	ce 01       	movw	r24, r28
    14d4:	0e 94 4e 09 	call	0x129c	; 0x129c <_ZN15TinyGPSLocation6commitEv>
  return time % 100;
}

void TinyGPSDecimal::commit()
{
  val = newval;
    14d8:	fe 01       	movw	r30, r28
    14da:	e8 5b       	subi	r30, 0xB8	; 184
    14dc:	ff 4f       	sbci	r31, 0xFF	; 255
    14de:	80 81       	ld	r24, Z
    14e0:	91 81       	ldd	r25, Z+1	; 0x01
    14e2:	a2 81       	ldd	r26, Z+2	; 0x02
    14e4:	b3 81       	ldd	r27, Z+3	; 0x03
    14e6:	34 97       	sbiw	r30, 0x04	; 4
    14e8:	80 83       	st	Z, r24
    14ea:	91 83       	std	Z+1, r25	; 0x01
    14ec:	a2 83       	std	Z+2, r26	; 0x02
    14ee:	b3 83       	std	Z+3, r27	; 0x03
  // lastCommitTime = millis();
  valid = updated = true;
    14f0:	21 e0       	ldi	r18, 0x01	; 1
    14f2:	2f af       	std	Y+63, r18	; 0x3f
    14f4:	2e af       	std	Y+62, r18	; 0x3e
  return time % 100;
}

void TinyGPSDecimal::commit()
{
  val = newval;
    14f6:	38 96       	adiw	r30, 0x08	; 8
    14f8:	82 85       	ldd	r24, Z+10	; 0x0a
    14fa:	93 85       	ldd	r25, Z+11	; 0x0b
    14fc:	a4 85       	ldd	r26, Z+12	; 0x0c
    14fe:	b5 85       	ldd	r27, Z+13	; 0x0d
    1500:	86 83       	std	Z+6, r24	; 0x06
    1502:	97 83       	std	Z+7, r25	; 0x07
    1504:	a0 87       	std	Z+8, r26	; 0x08
    1506:	b1 87       	std	Z+9, r27	; 0x09
  // lastCommitTime = millis();
  valid = updated = true;
    1508:	21 83       	std	Z+1, r18	; 0x01
    150a:	20 83       	st	Z, r18
    150c:	37 c0       	rjmp	.+110    	; 0x157c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x176>
  valid = updated = true;
}

void TinyGPSTime::commit()
{
  time = newTime;
    150e:	8e a9       	ldd	r24, Y+54	; 0x36
    1510:	9f a9       	ldd	r25, Y+55	; 0x37
    1512:	a8 ad       	ldd	r26, Y+56	; 0x38
    1514:	b9 ad       	ldd	r27, Y+57	; 0x39
    1516:	8a ab       	std	Y+50, r24	; 0x32
    1518:	9b ab       	std	Y+51, r25	; 0x33
    151a:	ac ab       	std	Y+52, r26	; 0x34
    151c:	bd ab       	std	Y+53, r27	; 0x35
  // lastCommitTime = millis();
  valid = updated = true;
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	89 ab       	std	Y+49, r24	; 0x31
    1522:	88 ab       	std	Y+48, r24	; 0x30
          course.commit();
        }
        break;
        case GPS_SENTENCE_GPGGA:
        time.commit();
        if (sentenceHasFix)
    1524:	22 23       	and	r18, r18
    1526:	89 f0       	breq	.+34     	; 0x154a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x144>
        {
          location.commit();
    1528:	ce 01       	movw	r24, r28
    152a:	0e 94 4e 09 	call	0x129c	; 0x129c <_ZN15TinyGPSLocation6commitEv>
  return time % 100;
}

void TinyGPSDecimal::commit()
{
  val = newval;
    152e:	fe 01       	movw	r30, r28
    1530:	e6 5a       	subi	r30, 0xA6	; 166
    1532:	ff 4f       	sbci	r31, 0xFF	; 255
    1534:	82 85       	ldd	r24, Z+10	; 0x0a
    1536:	93 85       	ldd	r25, Z+11	; 0x0b
    1538:	a4 85       	ldd	r26, Z+12	; 0x0c
    153a:	b5 85       	ldd	r27, Z+13	; 0x0d
    153c:	86 83       	std	Z+6, r24	; 0x06
    153e:	97 83       	std	Z+7, r25	; 0x07
    1540:	a0 87       	std	Z+8, r26	; 0x08
    1542:	b1 87       	std	Z+9, r27	; 0x09
  // lastCommitTime = millis();
  valid = updated = true;
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	81 83       	std	Z+1, r24	; 0x01
    1548:	80 83       	st	Z, r24
  newval = TinyGPSPlus::parseDecimal(term);
}

void TinyGPSInteger::commit()
{
  val = newval;
    154a:	fe 01       	movw	r30, r28
    154c:	e8 59       	subi	r30, 0x98	; 152
    154e:	ff 4f       	sbci	r31, 0xFF	; 255
    1550:	82 85       	ldd	r24, Z+10	; 0x0a
    1552:	93 85       	ldd	r25, Z+11	; 0x0b
    1554:	a4 85       	ldd	r26, Z+12	; 0x0c
    1556:	b5 85       	ldd	r27, Z+13	; 0x0d
    1558:	86 83       	std	Z+6, r24	; 0x06
    155a:	97 83       	std	Z+7, r25	; 0x07
    155c:	a0 87       	std	Z+8, r26	; 0x08
    155e:	b1 87       	std	Z+9, r27	; 0x09
  // lastCommitTime = millis();
  valid = updated = true;
    1560:	21 e0       	ldi	r18, 0x01	; 1
    1562:	21 83       	std	Z+1, r18	; 0x01
    1564:	20 83       	st	Z, r18
  return time % 100;
}

void TinyGPSDecimal::commit()
{
  val = newval;
    1566:	3e 96       	adiw	r30, 0x0e	; 14
    1568:	82 85       	ldd	r24, Z+10	; 0x0a
    156a:	93 85       	ldd	r25, Z+11	; 0x0b
    156c:	a4 85       	ldd	r26, Z+12	; 0x0c
    156e:	b5 85       	ldd	r27, Z+13	; 0x0d
    1570:	86 83       	std	Z+6, r24	; 0x06
    1572:	97 83       	std	Z+7, r25	; 0x07
    1574:	a0 87       	std	Z+8, r26	; 0x08
    1576:	b1 87       	std	Z+9, r27	; 0x09
  // lastCommitTime = millis();
  valid = updated = true;
    1578:	21 83       	std	Z+1, r18	; 0x01
    157a:	20 83       	st	Z, r18
        hdop.commit();
        break;
      }

      // Commit all custom listeners of this sentence type
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
    157c:	fe 01       	movw	r30, r28
    157e:	e5 56       	subi	r30, 0x65	; 101
    1580:	ff 4f       	sbci	r31, 0xFF	; 255
    1582:	e0 80       	ld	r14, Z
    1584:	f1 80       	ldd	r15, Z+1	; 0x01
    1586:	e1 14       	cp	r14, r1
    1588:	f1 04       	cpc	r15, r1
    158a:	09 f4       	brne	.+2      	; 0x158e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
    158c:	44 c1       	rjmp	.+648    	; 0x1816 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x410>
    158e:	ef 01       	movw	r28, r30
    1590:	0c c0       	rjmp	.+24     	; 0x15aa <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1a4>
      p->commit();
    1592:	c7 01       	movw	r24, r14
    1594:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <_ZN13TinyGPSCustom6commitEv>
        hdop.commit();
        break;
      }

      // Commit all custom listeners of this sentence type
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
    1598:	d7 01       	movw	r26, r14
    159a:	9a 96       	adiw	r26, 0x2a	; 42
    159c:	ed 90       	ld	r14, X+
    159e:	fc 90       	ld	r15, X
    15a0:	9b 97       	sbiw	r26, 0x2b	; 43
    15a2:	e1 14       	cp	r14, r1
    15a4:	f1 04       	cpc	r15, r1
    15a6:	09 f4       	brne	.+2      	; 0x15aa <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1a4>
    15a8:	36 c1       	rjmp	.+620    	; 0x1816 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x410>
    15aa:	e8 81       	ld	r30, Y
    15ac:	f9 81       	ldd	r31, Y+1	; 0x01
    15ae:	66 a1       	ldd	r22, Z+38	; 0x26
    15b0:	77 a1       	ldd	r23, Z+39	; 0x27
    15b2:	f7 01       	movw	r30, r14
    15b4:	86 a1       	ldd	r24, Z+38	; 0x26
    15b6:	97 a1       	ldd	r25, Z+39	; 0x27
    15b8:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <strcmp>
    15bc:	89 2b       	or	r24, r25
    15be:	49 f3       	breq	.-46     	; 0x1592 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x18c>
    15c0:	2a c1       	rjmp	.+596    	; 0x1816 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x410>
      return true;
    }

    else
    {
      ++failedChecksumCount;
    15c2:	cb 55       	subi	r28, 0x5B	; 91
    15c4:	df 4f       	sbci	r29, 0xFF	; 255
    15c6:	48 81       	ld	r20, Y
    15c8:	59 81       	ldd	r21, Y+1	; 0x01
    15ca:	6a 81       	ldd	r22, Y+2	; 0x02
    15cc:	7b 81       	ldd	r23, Y+3	; 0x03
    15ce:	4f 5f       	subi	r20, 0xFF	; 255
    15d0:	5f 4f       	sbci	r21, 0xFF	; 255
    15d2:	6f 4f       	sbci	r22, 0xFF	; 255
    15d4:	7f 4f       	sbci	r23, 0xFF	; 255
    15d6:	48 83       	st	Y, r20
    15d8:	59 83       	std	Y+1, r21	; 0x01
    15da:	6a 83       	std	Y+2, r22	; 0x02
    15dc:	7b 83       	std	Y+3, r23	; 0x03
    }

    return false;
    15de:	10 e0       	ldi	r17, 0x00	; 0
    15e0:	1a c1       	rjmp	.+564    	; 0x1816 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x410>
  }

  // the first term determines the sentence type
  if (curTermNumber == 0)
    15e2:	fc 01       	movw	r30, r24
    15e4:	ea 56       	subi	r30, 0x6A	; 106
    15e6:	ff 4f       	sbci	r31, 0xFF	; 255
    15e8:	80 81       	ld	r24, Z
    15ea:	81 11       	cpse	r24, r1
    15ec:	59 c0       	rjmp	.+178    	; 0x16a0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x29a>
  {
    if (!strcmp(term, _GPRMCterm))
    15ee:	6e 01       	movw	r12, r28
    15f0:	f6 e8       	ldi	r31, 0x86	; 134
    15f2:	cf 0e       	add	r12, r31
    15f4:	d1 1c       	adc	r13, r1
    15f6:	6b e6       	ldi	r22, 0x6B	; 107
    15f8:	71 e0       	ldi	r23, 0x01	; 1
    15fa:	c6 01       	movw	r24, r12
    15fc:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <strcmp>
    1600:	89 2b       	or	r24, r25
    1602:	31 f4       	brne	.+12     	; 0x1610 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x20a>
    curSentenceType = GPS_SENTENCE_GPRMC;
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	fe 01       	movw	r30, r28
    1608:	eb 56       	subi	r30, 0x6B	; 107
    160a:	ff 4f       	sbci	r31, 0xFF	; 255
    160c:	80 83       	st	Z, r24
    160e:	11 c0       	rjmp	.+34     	; 0x1632 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x22c>
    else if (!strcmp(term, _GPGGAterm))
    1610:	61 e7       	ldi	r22, 0x71	; 113
    1612:	71 e0       	ldi	r23, 0x01	; 1
    1614:	c6 01       	movw	r24, r12
    1616:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <strcmp>
    161a:	89 2b       	or	r24, r25
    161c:	29 f4       	brne	.+10     	; 0x1628 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x222>
    curSentenceType = GPS_SENTENCE_GPGGA;
    161e:	fe 01       	movw	r30, r28
    1620:	eb 56       	subi	r30, 0x6B	; 107
    1622:	ff 4f       	sbci	r31, 0xFF	; 255
    1624:	10 82       	st	Z, r1
    1626:	05 c0       	rjmp	.+10     	; 0x1632 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x22c>
    else
    curSentenceType = GPS_SENTENCE_OTHER;
    1628:	82 e0       	ldi	r24, 0x02	; 2
    162a:	fe 01       	movw	r30, r28
    162c:	eb 56       	subi	r30, 0x6B	; 107
    162e:	ff 4f       	sbci	r31, 0xFF	; 255
    1630:	80 83       	st	Z, r24

    // Any custom candidates of this sentence type?
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
    1632:	fe 01       	movw	r30, r28
    1634:	e7 56       	subi	r30, 0x67	; 103
    1636:	ff 4f       	sbci	r31, 0xFF	; 255
    1638:	e0 80       	ld	r14, Z
    163a:	f1 80       	ldd	r15, Z+1	; 0x01
    163c:	32 96       	adiw	r30, 0x02	; 2
    163e:	f1 82       	std	Z+1, r15	; 0x01
    1640:	e0 82       	st	Z, r14
    1642:	e1 14       	cp	r14, r1
    1644:	f1 04       	cpc	r15, r1
    1646:	09 f4       	brne	.+2      	; 0x164a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x244>
    1648:	e6 c0       	rjmp	.+460    	; 0x1816 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x410>
    164a:	5f 01       	movw	r10, r30
    164c:	0c c0       	rjmp	.+24     	; 0x1666 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x260>
    164e:	d7 01       	movw	r26, r14
    1650:	9a 96       	adiw	r26, 0x2a	; 42
    1652:	ed 90       	ld	r14, X+
    1654:	fc 90       	ld	r15, X
    1656:	9b 97       	sbiw	r26, 0x2b	; 43
    1658:	f5 01       	movw	r30, r10
    165a:	f1 82       	std	Z+1, r15	; 0x01
    165c:	e0 82       	st	Z, r14
    165e:	e1 14       	cp	r14, r1
    1660:	f1 04       	cpc	r15, r1
    1662:	09 f4       	brne	.+2      	; 0x1666 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x260>
    1664:	d8 c0       	rjmp	.+432    	; 0x1816 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x410>
    1666:	b6 01       	movw	r22, r12
    1668:	d7 01       	movw	r26, r14
    166a:	96 96       	adiw	r26, 0x26	; 38
    166c:	8d 91       	ld	r24, X+
    166e:	9c 91       	ld	r25, X
    1670:	97 97       	sbiw	r26, 0x27	; 39
    1672:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <strcmp>
    1676:	99 23       	and	r25, r25
    1678:	54 f3       	brlt	.-44     	; 0x164e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x248>
    if (customCandidates != NULL && strcmp(customCandidates->sentenceName, term) > 0)
    167a:	e1 14       	cp	r14, r1
    167c:	f1 04       	cpc	r15, r1
    167e:	09 f4       	brne	.+2      	; 0x1682 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x27c>
    1680:	ca c0       	rjmp	.+404    	; 0x1816 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x410>
    1682:	b6 01       	movw	r22, r12
    1684:	f7 01       	movw	r30, r14
    1686:	86 a1       	ldd	r24, Z+38	; 0x26
    1688:	97 a1       	ldd	r25, Z+39	; 0x27
    168a:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <strcmp>
    168e:	18 16       	cp	r1, r24
    1690:	19 06       	cpc	r1, r25
    1692:	0c f0       	brlt	.+2      	; 0x1696 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x290>
    1694:	c0 c0       	rjmp	.+384    	; 0x1816 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x410>
    customCandidates = NULL;
    1696:	c5 56       	subi	r28, 0x65	; 101
    1698:	df 4f       	sbci	r29, 0xFF	; 255
    169a:	19 82       	std	Y+1, r1	; 0x01
    169c:	18 82       	st	Y, r1
    169e:	bb c0       	rjmp	.+374    	; 0x1816 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x410>

    return false;
  }

  if (curSentenceType != GPS_SENTENCE_OTHER && term[0])
    16a0:	fe 01       	movw	r30, r28
    16a2:	eb 56       	subi	r30, 0x6B	; 107
    16a4:	ff 4f       	sbci	r31, 0xFF	; 255
    16a6:	90 81       	ld	r25, Z
    16a8:	92 30       	cpi	r25, 0x02	; 2
    16aa:	09 f4       	brne	.+2      	; 0x16ae <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2a8>
    16ac:	7e c0       	rjmp	.+252    	; 0x17aa <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3a4>
    16ae:	3f 97       	sbiw	r30, 0x0f	; 15
    16b0:	20 81       	ld	r18, Z
    16b2:	22 23       	and	r18, r18
    16b4:	09 f4       	brne	.+2      	; 0x16b8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2b2>
    16b6:	79 c0       	rjmp	.+242    	; 0x17aa <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3a4>
  switch(COMBINE(curSentenceType, curTermNumber))
    16b8:	30 e2       	ldi	r19, 0x20	; 32
    16ba:	93 9f       	mul	r25, r19
    16bc:	f0 01       	movw	r30, r0
    16be:	11 24       	eor	r1, r1
    16c0:	e8 2b       	or	r30, r24
    16c2:	31 97       	sbiw	r30, 0x01	; 1
    16c4:	e9 32       	cpi	r30, 0x29	; 41
    16c6:	f1 05       	cpc	r31, r1
    16c8:	08 f0       	brcs	.+2      	; 0x16cc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2c6>
    16ca:	6f c0       	rjmp	.+222    	; 0x17aa <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3a4>
    16cc:	ec 5c       	subi	r30, 0xCC	; 204
    16ce:	ff 4f       	sbci	r31, 0xFF	; 255
    16d0:	0c 94 c3 0c 	jmp	0x1986	; 0x1986 <__tablejump2__>
  {
    case COMBINE(GPS_SENTENCE_GPRMC, 1): // Time in both sentences
    case COMBINE(GPS_SENTENCE_GPGGA, 1):
    time.setTime(term);
    16d4:	be 01       	movw	r22, r28
    16d6:	6a 57       	subi	r22, 0x7A	; 122
    16d8:	7f 4f       	sbci	r23, 0xFF	; 255
    16da:	ce 01       	movw	r24, r28
    16dc:	c0 96       	adiw	r24, 0x30	; 48
    16de:	0e 94 bd 09 	call	0x137a	; 0x137a <_ZN11TinyGPSTime7setTimeEPKc>
    break;
    16e2:	63 c0       	rjmp	.+198    	; 0x17aa <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3a4>
    case COMBINE(GPS_SENTENCE_GPRMC, 2): // GPRMC validity
    sentenceHasFix = term[0] == 'A';
    16e4:	fe 01       	movw	r30, r28
    16e6:	e8 56       	subi	r30, 0x68	; 104
    16e8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	21 34       	cpi	r18, 0x41	; 65
    16ee:	09 f0       	breq	.+2      	; 0x16f2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ec>
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	80 83       	st	Z, r24
    break;
    16f4:	5a c0       	rjmp	.+180    	; 0x17aa <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3a4>
  valid = updated = true;
}

void TinyGPSLocation::setLatitude(const char *term)
{
  TinyGPSPlus::parseDegrees(term, rawNewLatData);
    16f6:	be 01       	movw	r22, r28
    16f8:	60 5f       	subi	r22, 0xF0	; 240
    16fa:	7f 4f       	sbci	r23, 0xFF	; 255
    16fc:	ce 01       	movw	r24, r28
    16fe:	8a 57       	subi	r24, 0x7A	; 122
    1700:	9f 4f       	sbci	r25, 0xFF	; 255
    1702:	0e 94 b4 08 	call	0x1168	; 0x1168 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
    1706:	51 c0       	rjmp	.+162    	; 0x17aa <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3a4>
    case COMBINE(GPS_SENTENCE_GPGGA, 2):
    location.setLatitude(term);
    break;
    case COMBINE(GPS_SENTENCE_GPRMC, 4): // N/S
    case COMBINE(GPS_SENTENCE_GPGGA, 3):
    location.rawNewLatData.negative = term[0] == 'S';
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	23 35       	cpi	r18, 0x53	; 83
    170c:	09 f0       	breq	.+2      	; 0x1710 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x30a>
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	8e 8b       	std	Y+22, r24	; 0x16
    break;
    1712:	4b c0       	rjmp	.+150    	; 0x17aa <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3a4>
  TinyGPSPlus::parseDegrees(term, rawNewLatData);
}

void TinyGPSLocation::setLongitude(const char *term)
{
  TinyGPSPlus::parseDegrees(term, rawNewLngData);
    1714:	be 01       	movw	r22, r28
    1716:	69 5e       	subi	r22, 0xE9	; 233
    1718:	7f 4f       	sbci	r23, 0xFF	; 255
    171a:	ce 01       	movw	r24, r28
    171c:	8a 57       	subi	r24, 0x7A	; 122
    171e:	9f 4f       	sbci	r25, 0xFF	; 255
    1720:	0e 94 b4 08 	call	0x1168	; 0x1168 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
    1724:	42 c0       	rjmp	.+132    	; 0x17aa <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3a4>
    case COMBINE(GPS_SENTENCE_GPGGA, 4):
    location.setLongitude(term);
    break;
    case COMBINE(GPS_SENTENCE_GPRMC, 6): // E/W
    case COMBINE(GPS_SENTENCE_GPGGA, 5):
    location.rawNewLngData.negative = term[0] == 'W';
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	27 35       	cpi	r18, 0x57	; 87
    172a:	09 f0       	breq	.+2      	; 0x172e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x328>
    172c:	80 e0       	ldi	r24, 0x00	; 0
    172e:	8d 8f       	std	Y+29, r24	; 0x1d
    break;
    1730:	3c c0       	rjmp	.+120    	; 0x17aa <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3a4>
    case COMBINE(GPS_SENTENCE_GPRMC, 7): // Speed (GPRMC)
    speed.set(term);
    1732:	be 01       	movw	r22, r28
    1734:	6a 57       	subi	r22, 0x7A	; 122
    1736:	7f 4f       	sbci	r23, 0xFF	; 255
    1738:	ce 01       	movw	r24, r28
    173a:	ce 96       	adiw	r24, 0x3e	; 62
    173c:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_ZN14TinyGPSDecimal3setEPKc>
    break;
    1740:	34 c0       	rjmp	.+104    	; 0x17aa <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3a4>
    case COMBINE(GPS_SENTENCE_GPRMC, 8): // Course (GPRMC)
    course.set(term);
    1742:	be 01       	movw	r22, r28
    1744:	6a 57       	subi	r22, 0x7A	; 122
    1746:	7f 4f       	sbci	r23, 0xFF	; 255
    1748:	ce 01       	movw	r24, r28
    174a:	84 5b       	subi	r24, 0xB4	; 180
    174c:	9f 4f       	sbci	r25, 0xFF	; 255
    174e:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_ZN14TinyGPSDecimal3setEPKc>
    break;
    1752:	2b c0       	rjmp	.+86     	; 0x17aa <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3a4>
    case COMBINE(GPS_SENTENCE_GPRMC, 9): // Date (GPRMC)
    date.setDate(term);
    1754:	be 01       	movw	r22, r28
    1756:	6a 57       	subi	r22, 0x7A	; 122
    1758:	7f 4f       	sbci	r23, 0xFF	; 255
    175a:	ce 01       	movw	r24, r28
    175c:	82 96       	adiw	r24, 0x22	; 34
    175e:	0e 94 ca 09 	call	0x1394	; 0x1394 <_ZN11TinyGPSDate7setDateEPKc>
    break;
    1762:	23 c0       	rjmp	.+70     	; 0x17aa <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3a4>
    case COMBINE(GPS_SENTENCE_GPGGA, 6): // Fix data (GPGGA)
    sentenceHasFix = term[0] > '0';
    1764:	fe 01       	movw	r30, r28
    1766:	e8 56       	subi	r30, 0x68	; 104
    1768:	ff 4f       	sbci	r31, 0xFF	; 255
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	21 33       	cpi	r18, 0x31	; 49
    176e:	08 f4       	brcc	.+2      	; 0x1772 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    1770:	80 e0       	ldi	r24, 0x00	; 0
    1772:	80 83       	st	Z, r24
    break;
    1774:	1a c0       	rjmp	.+52     	; 0x17aa <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3a4>
    case COMBINE(GPS_SENTENCE_GPGGA, 7): // Satellites used (GPGGA)
    satellites.set(term);
    1776:	be 01       	movw	r22, r28
    1778:	6a 57       	subi	r22, 0x7A	; 122
    177a:	7f 4f       	sbci	r23, 0xFF	; 255
    177c:	ce 01       	movw	r24, r28
    177e:	88 59       	subi	r24, 0x98	; 152
    1780:	9f 4f       	sbci	r25, 0xFF	; 255
    1782:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <_ZN14TinyGPSInteger3setEPKc>
    break;
    1786:	11 c0       	rjmp	.+34     	; 0x17aa <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3a4>
    case COMBINE(GPS_SENTENCE_GPGGA, 8): // HDOP
    hdop.set(term);
    1788:	be 01       	movw	r22, r28
    178a:	6a 57       	subi	r22, 0x7A	; 122
    178c:	7f 4f       	sbci	r23, 0xFF	; 255
    178e:	ce 01       	movw	r24, r28
    1790:	8a 58       	subi	r24, 0x8A	; 138
    1792:	9f 4f       	sbci	r25, 0xFF	; 255
    1794:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_ZN14TinyGPSDecimal3setEPKc>
    break;
    1798:	08 c0       	rjmp	.+16     	; 0x17aa <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3a4>
    case COMBINE(GPS_SENTENCE_GPGGA, 9): // Altitude (GPGGA)
    altitude.set(term);
    179a:	be 01       	movw	r22, r28
    179c:	6a 57       	subi	r22, 0x7A	; 122
    179e:	7f 4f       	sbci	r23, 0xFF	; 255
    17a0:	ce 01       	movw	r24, r28
    17a2:	86 5a       	subi	r24, 0xA6	; 166
    17a4:	9f 4f       	sbci	r25, 0xFF	; 255
    17a6:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_ZN14TinyGPSDecimal3setEPKc>
    break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
    17aa:	fe 01       	movw	r30, r28
    17ac:	e5 56       	subi	r30, 0x65	; 101
    17ae:	ff 4f       	sbci	r31, 0xFF	; 255
    17b0:	e0 80       	ld	r14, Z
    17b2:	f1 80       	ldd	r15, Z+1	; 0x01
    17b4:	e1 14       	cp	r14, r1
    17b6:	f1 04       	cpc	r15, r1
    17b8:	71 f1       	breq	.+92     	; 0x1816 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x410>
    17ba:	6f 01       	movw	r12, r30
    17bc:	5e 01       	movw	r10, r28
    17be:	96 e9       	ldi	r25, 0x96	; 150
    17c0:	a9 0e       	add	r10, r25
    17c2:	b1 1c       	adc	r11, r1
  if (p->termNumber == curTermNumber)
  p->set(term);
    17c4:	ca 57       	subi	r28, 0x7A	; 122
    17c6:	df 4f       	sbci	r29, 0xFF	; 255
    17c8:	0f c0       	rjmp	.+30     	; 0x17e8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3e2>
    break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
  if (p->termNumber == curTermNumber)
    17ca:	28 17       	cp	r18, r24
    17cc:	39 07       	cpc	r19, r25
    17ce:	21 f4       	brne	.+8      	; 0x17d8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3d2>
  p->set(term);
    17d0:	be 01       	movw	r22, r28
    17d2:	c7 01       	movw	r24, r14
    17d4:	0e 94 fe 09 	call	0x13fc	; 0x13fc <_ZN13TinyGPSCustom3setEPKc>
    altitude.set(term);
    break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
    17d8:	d7 01       	movw	r26, r14
    17da:	9a 96       	adiw	r26, 0x2a	; 42
    17dc:	ed 90       	ld	r14, X+
    17de:	fc 90       	ld	r15, X
    17e0:	9b 97       	sbiw	r26, 0x2b	; 43
    17e2:	e1 14       	cp	r14, r1
    17e4:	f1 04       	cpc	r15, r1
    17e6:	b9 f0       	breq	.+46     	; 0x1816 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x410>
    17e8:	d6 01       	movw	r26, r12
    17ea:	ed 91       	ld	r30, X+
    17ec:	fc 91       	ld	r31, X
    17ee:	66 a1       	ldd	r22, Z+38	; 0x26
    17f0:	77 a1       	ldd	r23, Z+39	; 0x27
    17f2:	f7 01       	movw	r30, r14
    17f4:	86 a1       	ldd	r24, Z+38	; 0x26
    17f6:	97 a1       	ldd	r25, Z+39	; 0x27
    17f8:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <strcmp>
    17fc:	89 2b       	or	r24, r25
    17fe:	59 f4       	brne	.+22     	; 0x1816 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x410>
    1800:	d7 01       	movw	r26, r14
    1802:	98 96       	adiw	r26, 0x28	; 40
    1804:	2d 91       	ld	r18, X+
    1806:	3c 91       	ld	r19, X
    1808:	99 97       	sbiw	r26, 0x29	; 41
    180a:	f5 01       	movw	r30, r10
    180c:	80 81       	ld	r24, Z
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	82 17       	cp	r24, r18
    1812:	93 07       	cpc	r25, r19
    1814:	d4 f6       	brge	.-76     	; 0x17ca <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3c4>
  if (p->termNumber == curTermNumber)
  p->set(term);

  return false;
}
    1816:	81 2f       	mov	r24, r17
    1818:	df 91       	pop	r29
    181a:	cf 91       	pop	r28
    181c:	1f 91       	pop	r17
    181e:	ff 90       	pop	r15
    1820:	ef 90       	pop	r14
    1822:	df 90       	pop	r13
    1824:	cf 90       	pop	r12
    1826:	bf 90       	pop	r11
    1828:	af 90       	pop	r10
    182a:	08 95       	ret

0000182c <_ZN11TinyGPSPlus6encodeEc>:
//
// public methods
//

bool TinyGPSPlus::encode(char c)
{
    182c:	1f 93       	push	r17
    182e:	cf 93       	push	r28
    1830:	df 93       	push	r29
    1832:	ec 01       	movw	r28, r24
    1834:	16 2f       	mov	r17, r22
  ++encodedCharCount;
    1836:	fc 01       	movw	r30, r24
    1838:	e3 56       	subi	r30, 0x63	; 99
    183a:	ff 4f       	sbci	r31, 0xFF	; 255
    183c:	40 81       	ld	r20, Z
    183e:	51 81       	ldd	r21, Z+1	; 0x01
    1840:	62 81       	ldd	r22, Z+2	; 0x02
    1842:	73 81       	ldd	r23, Z+3	; 0x03
    1844:	4f 5f       	subi	r20, 0xFF	; 255
    1846:	5f 4f       	sbci	r21, 0xFF	; 255
    1848:	6f 4f       	sbci	r22, 0xFF	; 255
    184a:	7f 4f       	sbci	r23, 0xFF	; 255
    184c:	40 83       	st	Z, r20
    184e:	51 83       	std	Z+1, r21	; 0x01
    1850:	62 83       	std	Z+2, r22	; 0x02
    1852:	73 83       	std	Z+3, r23	; 0x03

  switch(c)
    1854:	14 32       	cpi	r17, 0x24	; 36
    1856:	99 f1       	breq	.+102    	; 0x18be <_ZN11TinyGPSPlus6encodeEc+0x92>
    1858:	30 f4       	brcc	.+12     	; 0x1866 <_ZN11TinyGPSPlus6encodeEc+0x3a>
    185a:	1a 30       	cpi	r17, 0x0A	; 10
    185c:	79 f0       	breq	.+30     	; 0x187c <_ZN11TinyGPSPlus6encodeEc+0x50>
    185e:	1d 30       	cpi	r17, 0x0D	; 13
    1860:	09 f0       	breq	.+2      	; 0x1864 <_ZN11TinyGPSPlus6encodeEc+0x38>
    1862:	3f c0       	rjmp	.+126    	; 0x18e2 <_ZN11TinyGPSPlus6encodeEc+0xb6>
    1864:	0b c0       	rjmp	.+22     	; 0x187c <_ZN11TinyGPSPlus6encodeEc+0x50>
    1866:	1a 32       	cpi	r17, 0x2A	; 42
    1868:	49 f0       	breq	.+18     	; 0x187c <_ZN11TinyGPSPlus6encodeEc+0x50>
    186a:	1c 32       	cpi	r17, 0x2C	; 44
    186c:	d1 f5       	brne	.+116    	; 0x18e2 <_ZN11TinyGPSPlus6encodeEc+0xb6>
  {
    case ',': // term terminators
    parity ^= (uint8_t)c;
    186e:	fc 01       	movw	r30, r24
    1870:	ec 57       	subi	r30, 0x7C	; 124
    1872:	ff 4f       	sbci	r31, 0xFF	; 255
    1874:	90 81       	ld	r25, Z
    1876:	8c e2       	ldi	r24, 0x2C	; 44
    1878:	89 27       	eor	r24, r25
    187a:	80 83       	st	Z, r24
    case '\r':
    case '\n':
    case '*':
    {
      bool isValidSentence = false;
      if (curTermOffset < sizeof(term))
    187c:	fe 01       	movw	r30, r28
    187e:	e9 56       	subi	r30, 0x69	; 105
    1880:	ff 4f       	sbci	r31, 0xFF	; 255
    1882:	80 81       	ld	r24, Z
    1884:	8f 30       	cpi	r24, 0x0F	; 15
    1886:	50 f4       	brcc	.+20     	; 0x189c <_ZN11TinyGPSPlus6encodeEc+0x70>
      {
        term[curTermOffset] = 0;
    1888:	fe 01       	movw	r30, r28
    188a:	e8 0f       	add	r30, r24
    188c:	f1 1d       	adc	r31, r1
    188e:	ea 57       	subi	r30, 0x7A	; 122
    1890:	ff 4f       	sbci	r31, 0xFF	; 255
    1892:	10 82       	st	Z, r1
        isValidSentence = endOfTermHandler();
    1894:	ce 01       	movw	r24, r28
    1896:	0e 94 03 0a 	call	0x1406	; 0x1406 <_ZN11TinyGPSPlus16endOfTermHandlerEv>
    189a:	01 c0       	rjmp	.+2      	; 0x189e <_ZN11TinyGPSPlus6encodeEc+0x72>
    parity ^= (uint8_t)c;
    case '\r':
    case '\n':
    case '*':
    {
      bool isValidSentence = false;
    189c:	80 e0       	ldi	r24, 0x00	; 0
      if (curTermOffset < sizeof(term))
      {
        term[curTermOffset] = 0;
        isValidSentence = endOfTermHandler();
      }
      ++curTermNumber;
    189e:	fe 01       	movw	r30, r28
    18a0:	ea 56       	subi	r30, 0x6A	; 106
    18a2:	ff 4f       	sbci	r31, 0xFF	; 255
    18a4:	90 81       	ld	r25, Z
    18a6:	9f 5f       	subi	r25, 0xFF	; 255
    18a8:	90 83       	st	Z, r25
      curTermOffset = 0;
    18aa:	31 96       	adiw	r30, 0x01	; 1
    18ac:	10 82       	st	Z, r1
      isChecksumTerm = c == '*';
    18ae:	cb 57       	subi	r28, 0x7B	; 123
    18b0:	df 4f       	sbci	r29, 0xFF	; 255
    18b2:	91 e0       	ldi	r25, 0x01	; 1
    18b4:	1a 32       	cpi	r17, 0x2A	; 42
    18b6:	09 f0       	breq	.+2      	; 0x18ba <_ZN11TinyGPSPlus6encodeEc+0x8e>
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	98 83       	st	Y, r25
      return isValidSentence;
    18bc:	2e c0       	rjmp	.+92     	; 0x191a <_ZN11TinyGPSPlus6encodeEc+0xee>
    }
    break;

    case '$': // sentence begin
    curTermNumber = curTermOffset = 0;
    18be:	fc 01       	movw	r30, r24
    18c0:	e9 56       	subi	r30, 0x69	; 105
    18c2:	ff 4f       	sbci	r31, 0xFF	; 255
    18c4:	10 82       	st	Z, r1
    18c6:	31 97       	sbiw	r30, 0x01	; 1
    18c8:	10 82       	st	Z, r1
    parity = 0;
    18ca:	72 97       	sbiw	r30, 0x12	; 18
    18cc:	10 82       	st	Z, r1
    curSentenceType = GPS_SENTENCE_OTHER;
    18ce:	71 96       	adiw	r30, 0x11	; 17
    18d0:	82 e0       	ldi	r24, 0x02	; 2
    18d2:	80 83       	st	Z, r24
    isChecksumTerm = false;
    18d4:	70 97       	sbiw	r30, 0x10	; 16
    18d6:	10 82       	st	Z, r1
    sentenceHasFix = false;
    18d8:	c8 56       	subi	r28, 0x68	; 104
    18da:	df 4f       	sbci	r29, 0xFF	; 255
    18dc:	18 82       	st	Y, r1
    return false;
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	1c c0       	rjmp	.+56     	; 0x191a <_ZN11TinyGPSPlus6encodeEc+0xee>

    default: // ordinary characters
    if (curTermOffset < sizeof(term) - 1)
    18e2:	fe 01       	movw	r30, r28
    18e4:	e9 56       	subi	r30, 0x69	; 105
    18e6:	ff 4f       	sbci	r31, 0xFF	; 255
    18e8:	80 81       	ld	r24, Z
    18ea:	8e 30       	cpi	r24, 0x0E	; 14
    18ec:	48 f4       	brcc	.+18     	; 0x1900 <_ZN11TinyGPSPlus6encodeEc+0xd4>
    term[curTermOffset++] = c;
    18ee:	91 e0       	ldi	r25, 0x01	; 1
    18f0:	98 0f       	add	r25, r24
    18f2:	90 83       	st	Z, r25
    18f4:	fe 01       	movw	r30, r28
    18f6:	e8 0f       	add	r30, r24
    18f8:	f1 1d       	adc	r31, r1
    18fa:	ea 57       	subi	r30, 0x7A	; 122
    18fc:	ff 4f       	sbci	r31, 0xFF	; 255
    18fe:	10 83       	st	Z, r17
    if (!isChecksumTerm)
    1900:	fe 01       	movw	r30, r28
    1902:	eb 57       	subi	r30, 0x7B	; 123
    1904:	ff 4f       	sbci	r31, 0xFF	; 255
    1906:	80 81       	ld	r24, Z
    1908:	81 11       	cpse	r24, r1
    190a:	06 c0       	rjmp	.+12     	; 0x1918 <_ZN11TinyGPSPlus6encodeEc+0xec>
    parity ^= c;
    190c:	cc 57       	subi	r28, 0x7C	; 124
    190e:	df 4f       	sbci	r29, 0xFF	; 255
    1910:	98 81       	ld	r25, Y
    1912:	19 27       	eor	r17, r25
    1914:	18 83       	st	Y, r17
    1916:	01 c0       	rjmp	.+2      	; 0x191a <_ZN11TinyGPSPlus6encodeEc+0xee>
    return false;
    1918:	80 e0       	ldi	r24, 0x00	; 0
  }

  return false;
}
    191a:	df 91       	pop	r29
    191c:	cf 91       	pop	r28
    191e:	1f 91       	pop	r17
    1920:	08 95       	ret

00001922 <__mulsi3>:
    1922:	db 01       	movw	r26, r22
    1924:	8f 93       	push	r24
    1926:	9f 93       	push	r25
    1928:	0e 94 c9 0c 	call	0x1992	; 0x1992 <__muluhisi3>
    192c:	bf 91       	pop	r27
    192e:	af 91       	pop	r26
    1930:	a2 9f       	mul	r26, r18
    1932:	80 0d       	add	r24, r0
    1934:	91 1d       	adc	r25, r1
    1936:	a3 9f       	mul	r26, r19
    1938:	90 0d       	add	r25, r0
    193a:	b2 9f       	mul	r27, r18
    193c:	90 0d       	add	r25, r0
    193e:	11 24       	eor	r1, r1
    1940:	08 95       	ret

00001942 <__udivmodsi4>:
    1942:	a1 e2       	ldi	r26, 0x21	; 33
    1944:	1a 2e       	mov	r1, r26
    1946:	aa 1b       	sub	r26, r26
    1948:	bb 1b       	sub	r27, r27
    194a:	fd 01       	movw	r30, r26
    194c:	0d c0       	rjmp	.+26     	; 0x1968 <__udivmodsi4_ep>

0000194e <__udivmodsi4_loop>:
    194e:	aa 1f       	adc	r26, r26
    1950:	bb 1f       	adc	r27, r27
    1952:	ee 1f       	adc	r30, r30
    1954:	ff 1f       	adc	r31, r31
    1956:	a2 17       	cp	r26, r18
    1958:	b3 07       	cpc	r27, r19
    195a:	e4 07       	cpc	r30, r20
    195c:	f5 07       	cpc	r31, r21
    195e:	20 f0       	brcs	.+8      	; 0x1968 <__udivmodsi4_ep>
    1960:	a2 1b       	sub	r26, r18
    1962:	b3 0b       	sbc	r27, r19
    1964:	e4 0b       	sbc	r30, r20
    1966:	f5 0b       	sbc	r31, r21

00001968 <__udivmodsi4_ep>:
    1968:	66 1f       	adc	r22, r22
    196a:	77 1f       	adc	r23, r23
    196c:	88 1f       	adc	r24, r24
    196e:	99 1f       	adc	r25, r25
    1970:	1a 94       	dec	r1
    1972:	69 f7       	brne	.-38     	; 0x194e <__udivmodsi4_loop>
    1974:	60 95       	com	r22
    1976:	70 95       	com	r23
    1978:	80 95       	com	r24
    197a:	90 95       	com	r25
    197c:	9b 01       	movw	r18, r22
    197e:	ac 01       	movw	r20, r24
    1980:	bd 01       	movw	r22, r26
    1982:	cf 01       	movw	r24, r30
    1984:	08 95       	ret

00001986 <__tablejump2__>:
    1986:	ee 0f       	add	r30, r30
    1988:	ff 1f       	adc	r31, r31

0000198a <__tablejump__>:
    198a:	05 90       	lpm	r0, Z+
    198c:	f4 91       	lpm	r31, Z
    198e:	e0 2d       	mov	r30, r0
    1990:	09 94       	ijmp

00001992 <__muluhisi3>:
    1992:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <__umulhisi3>
    1996:	a5 9f       	mul	r26, r21
    1998:	90 0d       	add	r25, r0
    199a:	b4 9f       	mul	r27, r20
    199c:	90 0d       	add	r25, r0
    199e:	a4 9f       	mul	r26, r20
    19a0:	80 0d       	add	r24, r0
    19a2:	91 1d       	adc	r25, r1
    19a4:	11 24       	eor	r1, r1
    19a6:	08 95       	ret

000019a8 <__mulshisi3>:
    19a8:	b7 ff       	sbrs	r27, 7
    19aa:	0c 94 c9 0c 	jmp	0x1992	; 0x1992 <__muluhisi3>

000019ae <__mulohisi3>:
    19ae:	0e 94 c9 0c 	call	0x1992	; 0x1992 <__muluhisi3>
    19b2:	82 1b       	sub	r24, r18
    19b4:	93 0b       	sbc	r25, r19
    19b6:	08 95       	ret

000019b8 <__prologue_saves__>:
    19b8:	2f 92       	push	r2
    19ba:	3f 92       	push	r3
    19bc:	4f 92       	push	r4
    19be:	5f 92       	push	r5
    19c0:	6f 92       	push	r6
    19c2:	7f 92       	push	r7
    19c4:	8f 92       	push	r8
    19c6:	9f 92       	push	r9
    19c8:	af 92       	push	r10
    19ca:	bf 92       	push	r11
    19cc:	cf 92       	push	r12
    19ce:	df 92       	push	r13
    19d0:	ef 92       	push	r14
    19d2:	ff 92       	push	r15
    19d4:	0f 93       	push	r16
    19d6:	1f 93       	push	r17
    19d8:	cf 93       	push	r28
    19da:	df 93       	push	r29
    19dc:	cd b7       	in	r28, 0x3d	; 61
    19de:	de b7       	in	r29, 0x3e	; 62
    19e0:	ca 1b       	sub	r28, r26
    19e2:	db 0b       	sbc	r29, r27
    19e4:	0f b6       	in	r0, 0x3f	; 63
    19e6:	f8 94       	cli
    19e8:	de bf       	out	0x3e, r29	; 62
    19ea:	0f be       	out	0x3f, r0	; 63
    19ec:	cd bf       	out	0x3d, r28	; 61
    19ee:	09 94       	ijmp

000019f0 <__epilogue_restores__>:
    19f0:	2a 88       	ldd	r2, Y+18	; 0x12
    19f2:	39 88       	ldd	r3, Y+17	; 0x11
    19f4:	48 88       	ldd	r4, Y+16	; 0x10
    19f6:	5f 84       	ldd	r5, Y+15	; 0x0f
    19f8:	6e 84       	ldd	r6, Y+14	; 0x0e
    19fa:	7d 84       	ldd	r7, Y+13	; 0x0d
    19fc:	8c 84       	ldd	r8, Y+12	; 0x0c
    19fe:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a00:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a02:	b9 84       	ldd	r11, Y+9	; 0x09
    1a04:	c8 84       	ldd	r12, Y+8	; 0x08
    1a06:	df 80       	ldd	r13, Y+7	; 0x07
    1a08:	ee 80       	ldd	r14, Y+6	; 0x06
    1a0a:	fd 80       	ldd	r15, Y+5	; 0x05
    1a0c:	0c 81       	ldd	r16, Y+4	; 0x04
    1a0e:	1b 81       	ldd	r17, Y+3	; 0x03
    1a10:	aa 81       	ldd	r26, Y+2	; 0x02
    1a12:	b9 81       	ldd	r27, Y+1	; 0x01
    1a14:	ce 0f       	add	r28, r30
    1a16:	d1 1d       	adc	r29, r1
    1a18:	0f b6       	in	r0, 0x3f	; 63
    1a1a:	f8 94       	cli
    1a1c:	de bf       	out	0x3e, r29	; 62
    1a1e:	0f be       	out	0x3f, r0	; 63
    1a20:	cd bf       	out	0x3d, r28	; 61
    1a22:	ed 01       	movw	r28, r26
    1a24:	08 95       	ret

00001a26 <__umulhisi3>:
    1a26:	a2 9f       	mul	r26, r18
    1a28:	b0 01       	movw	r22, r0
    1a2a:	b3 9f       	mul	r27, r19
    1a2c:	c0 01       	movw	r24, r0
    1a2e:	a3 9f       	mul	r26, r19
    1a30:	70 0d       	add	r23, r0
    1a32:	81 1d       	adc	r24, r1
    1a34:	11 24       	eor	r1, r1
    1a36:	91 1d       	adc	r25, r1
    1a38:	b2 9f       	mul	r27, r18
    1a3a:	70 0d       	add	r23, r0
    1a3c:	81 1d       	adc	r24, r1
    1a3e:	11 24       	eor	r1, r1
    1a40:	91 1d       	adc	r25, r1
    1a42:	08 95       	ret

00001a44 <malloc>:
    1a44:	cf 93       	push	r28
    1a46:	df 93       	push	r29
    1a48:	82 30       	cpi	r24, 0x02	; 2
    1a4a:	91 05       	cpc	r25, r1
    1a4c:	10 f4       	brcc	.+4      	; 0x1a52 <malloc+0xe>
    1a4e:	82 e0       	ldi	r24, 0x02	; 2
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	e0 91 50 02 	lds	r30, 0x0250
    1a56:	f0 91 51 02 	lds	r31, 0x0251
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	a0 e0       	ldi	r26, 0x00	; 0
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	30 97       	sbiw	r30, 0x00	; 0
    1a64:	39 f1       	breq	.+78     	; 0x1ab4 <malloc+0x70>
    1a66:	40 81       	ld	r20, Z
    1a68:	51 81       	ldd	r21, Z+1	; 0x01
    1a6a:	48 17       	cp	r20, r24
    1a6c:	59 07       	cpc	r21, r25
    1a6e:	b8 f0       	brcs	.+46     	; 0x1a9e <malloc+0x5a>
    1a70:	48 17       	cp	r20, r24
    1a72:	59 07       	cpc	r21, r25
    1a74:	71 f4       	brne	.+28     	; 0x1a92 <malloc+0x4e>
    1a76:	82 81       	ldd	r24, Z+2	; 0x02
    1a78:	93 81       	ldd	r25, Z+3	; 0x03
    1a7a:	10 97       	sbiw	r26, 0x00	; 0
    1a7c:	29 f0       	breq	.+10     	; 0x1a88 <malloc+0x44>
    1a7e:	13 96       	adiw	r26, 0x03	; 3
    1a80:	9c 93       	st	X, r25
    1a82:	8e 93       	st	-X, r24
    1a84:	12 97       	sbiw	r26, 0x02	; 2
    1a86:	2c c0       	rjmp	.+88     	; 0x1ae0 <malloc+0x9c>
    1a88:	90 93 51 02 	sts	0x0251, r25
    1a8c:	80 93 50 02 	sts	0x0250, r24
    1a90:	27 c0       	rjmp	.+78     	; 0x1ae0 <malloc+0x9c>
    1a92:	21 15       	cp	r18, r1
    1a94:	31 05       	cpc	r19, r1
    1a96:	31 f0       	breq	.+12     	; 0x1aa4 <malloc+0x60>
    1a98:	42 17       	cp	r20, r18
    1a9a:	53 07       	cpc	r21, r19
    1a9c:	18 f0       	brcs	.+6      	; 0x1aa4 <malloc+0x60>
    1a9e:	a9 01       	movw	r20, r18
    1aa0:	db 01       	movw	r26, r22
    1aa2:	01 c0       	rjmp	.+2      	; 0x1aa6 <malloc+0x62>
    1aa4:	ef 01       	movw	r28, r30
    1aa6:	9a 01       	movw	r18, r20
    1aa8:	bd 01       	movw	r22, r26
    1aaa:	df 01       	movw	r26, r30
    1aac:	02 80       	ldd	r0, Z+2	; 0x02
    1aae:	f3 81       	ldd	r31, Z+3	; 0x03
    1ab0:	e0 2d       	mov	r30, r0
    1ab2:	d7 cf       	rjmp	.-82     	; 0x1a62 <malloc+0x1e>
    1ab4:	21 15       	cp	r18, r1
    1ab6:	31 05       	cpc	r19, r1
    1ab8:	f9 f0       	breq	.+62     	; 0x1af8 <malloc+0xb4>
    1aba:	28 1b       	sub	r18, r24
    1abc:	39 0b       	sbc	r19, r25
    1abe:	24 30       	cpi	r18, 0x04	; 4
    1ac0:	31 05       	cpc	r19, r1
    1ac2:	80 f4       	brcc	.+32     	; 0x1ae4 <malloc+0xa0>
    1ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ac8:	61 15       	cp	r22, r1
    1aca:	71 05       	cpc	r23, r1
    1acc:	21 f0       	breq	.+8      	; 0x1ad6 <malloc+0x92>
    1ace:	fb 01       	movw	r30, r22
    1ad0:	93 83       	std	Z+3, r25	; 0x03
    1ad2:	82 83       	std	Z+2, r24	; 0x02
    1ad4:	04 c0       	rjmp	.+8      	; 0x1ade <malloc+0x9a>
    1ad6:	90 93 51 02 	sts	0x0251, r25
    1ada:	80 93 50 02 	sts	0x0250, r24
    1ade:	fe 01       	movw	r30, r28
    1ae0:	32 96       	adiw	r30, 0x02	; 2
    1ae2:	44 c0       	rjmp	.+136    	; 0x1b6c <malloc+0x128>
    1ae4:	fe 01       	movw	r30, r28
    1ae6:	e2 0f       	add	r30, r18
    1ae8:	f3 1f       	adc	r31, r19
    1aea:	81 93       	st	Z+, r24
    1aec:	91 93       	st	Z+, r25
    1aee:	22 50       	subi	r18, 0x02	; 2
    1af0:	31 09       	sbc	r19, r1
    1af2:	39 83       	std	Y+1, r19	; 0x01
    1af4:	28 83       	st	Y, r18
    1af6:	3a c0       	rjmp	.+116    	; 0x1b6c <malloc+0x128>
    1af8:	20 91 4e 02 	lds	r18, 0x024E
    1afc:	30 91 4f 02 	lds	r19, 0x024F
    1b00:	23 2b       	or	r18, r19
    1b02:	41 f4       	brne	.+16     	; 0x1b14 <malloc+0xd0>
    1b04:	20 91 02 01 	lds	r18, 0x0102
    1b08:	30 91 03 01 	lds	r19, 0x0103
    1b0c:	30 93 4f 02 	sts	0x024F, r19
    1b10:	20 93 4e 02 	sts	0x024E, r18
    1b14:	20 91 00 01 	lds	r18, 0x0100
    1b18:	30 91 01 01 	lds	r19, 0x0101
    1b1c:	21 15       	cp	r18, r1
    1b1e:	31 05       	cpc	r19, r1
    1b20:	41 f4       	brne	.+16     	; 0x1b32 <malloc+0xee>
    1b22:	2d b7       	in	r18, 0x3d	; 61
    1b24:	3e b7       	in	r19, 0x3e	; 62
    1b26:	40 91 04 01 	lds	r20, 0x0104
    1b2a:	50 91 05 01 	lds	r21, 0x0105
    1b2e:	24 1b       	sub	r18, r20
    1b30:	35 0b       	sbc	r19, r21
    1b32:	e0 91 4e 02 	lds	r30, 0x024E
    1b36:	f0 91 4f 02 	lds	r31, 0x024F
    1b3a:	e2 17       	cp	r30, r18
    1b3c:	f3 07       	cpc	r31, r19
    1b3e:	a0 f4       	brcc	.+40     	; 0x1b68 <malloc+0x124>
    1b40:	2e 1b       	sub	r18, r30
    1b42:	3f 0b       	sbc	r19, r31
    1b44:	28 17       	cp	r18, r24
    1b46:	39 07       	cpc	r19, r25
    1b48:	78 f0       	brcs	.+30     	; 0x1b68 <malloc+0x124>
    1b4a:	ac 01       	movw	r20, r24
    1b4c:	4e 5f       	subi	r20, 0xFE	; 254
    1b4e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b50:	24 17       	cp	r18, r20
    1b52:	35 07       	cpc	r19, r21
    1b54:	48 f0       	brcs	.+18     	; 0x1b68 <malloc+0x124>
    1b56:	4e 0f       	add	r20, r30
    1b58:	5f 1f       	adc	r21, r31
    1b5a:	50 93 4f 02 	sts	0x024F, r21
    1b5e:	40 93 4e 02 	sts	0x024E, r20
    1b62:	81 93       	st	Z+, r24
    1b64:	91 93       	st	Z+, r25
    1b66:	02 c0       	rjmp	.+4      	; 0x1b6c <malloc+0x128>
    1b68:	e0 e0       	ldi	r30, 0x00	; 0
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	cf 01       	movw	r24, r30
    1b6e:	df 91       	pop	r29
    1b70:	cf 91       	pop	r28
    1b72:	08 95       	ret

00001b74 <free>:
    1b74:	cf 93       	push	r28
    1b76:	df 93       	push	r29
    1b78:	00 97       	sbiw	r24, 0x00	; 0
    1b7a:	09 f4       	brne	.+2      	; 0x1b7e <free+0xa>
    1b7c:	87 c0       	rjmp	.+270    	; 0x1c8c <free+0x118>
    1b7e:	fc 01       	movw	r30, r24
    1b80:	32 97       	sbiw	r30, 0x02	; 2
    1b82:	13 82       	std	Z+3, r1	; 0x03
    1b84:	12 82       	std	Z+2, r1	; 0x02
    1b86:	c0 91 50 02 	lds	r28, 0x0250
    1b8a:	d0 91 51 02 	lds	r29, 0x0251
    1b8e:	20 97       	sbiw	r28, 0x00	; 0
    1b90:	81 f4       	brne	.+32     	; 0x1bb2 <free+0x3e>
    1b92:	20 81       	ld	r18, Z
    1b94:	31 81       	ldd	r19, Z+1	; 0x01
    1b96:	28 0f       	add	r18, r24
    1b98:	39 1f       	adc	r19, r25
    1b9a:	80 91 4e 02 	lds	r24, 0x024E
    1b9e:	90 91 4f 02 	lds	r25, 0x024F
    1ba2:	82 17       	cp	r24, r18
    1ba4:	93 07       	cpc	r25, r19
    1ba6:	79 f5       	brne	.+94     	; 0x1c06 <free+0x92>
    1ba8:	f0 93 4f 02 	sts	0x024F, r31
    1bac:	e0 93 4e 02 	sts	0x024E, r30
    1bb0:	6d c0       	rjmp	.+218    	; 0x1c8c <free+0x118>
    1bb2:	de 01       	movw	r26, r28
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	ae 17       	cp	r26, r30
    1bba:	bf 07       	cpc	r27, r31
    1bbc:	50 f4       	brcc	.+20     	; 0x1bd2 <free+0x5e>
    1bbe:	12 96       	adiw	r26, 0x02	; 2
    1bc0:	4d 91       	ld	r20, X+
    1bc2:	5c 91       	ld	r21, X
    1bc4:	13 97       	sbiw	r26, 0x03	; 3
    1bc6:	9d 01       	movw	r18, r26
    1bc8:	41 15       	cp	r20, r1
    1bca:	51 05       	cpc	r21, r1
    1bcc:	09 f1       	breq	.+66     	; 0x1c10 <free+0x9c>
    1bce:	da 01       	movw	r26, r20
    1bd0:	f3 cf       	rjmp	.-26     	; 0x1bb8 <free+0x44>
    1bd2:	b3 83       	std	Z+3, r27	; 0x03
    1bd4:	a2 83       	std	Z+2, r26	; 0x02
    1bd6:	40 81       	ld	r20, Z
    1bd8:	51 81       	ldd	r21, Z+1	; 0x01
    1bda:	84 0f       	add	r24, r20
    1bdc:	95 1f       	adc	r25, r21
    1bde:	8a 17       	cp	r24, r26
    1be0:	9b 07       	cpc	r25, r27
    1be2:	71 f4       	brne	.+28     	; 0x1c00 <free+0x8c>
    1be4:	8d 91       	ld	r24, X+
    1be6:	9c 91       	ld	r25, X
    1be8:	11 97       	sbiw	r26, 0x01	; 1
    1bea:	84 0f       	add	r24, r20
    1bec:	95 1f       	adc	r25, r21
    1bee:	02 96       	adiw	r24, 0x02	; 2
    1bf0:	91 83       	std	Z+1, r25	; 0x01
    1bf2:	80 83       	st	Z, r24
    1bf4:	12 96       	adiw	r26, 0x02	; 2
    1bf6:	8d 91       	ld	r24, X+
    1bf8:	9c 91       	ld	r25, X
    1bfa:	13 97       	sbiw	r26, 0x03	; 3
    1bfc:	93 83       	std	Z+3, r25	; 0x03
    1bfe:	82 83       	std	Z+2, r24	; 0x02
    1c00:	21 15       	cp	r18, r1
    1c02:	31 05       	cpc	r19, r1
    1c04:	29 f4       	brne	.+10     	; 0x1c10 <free+0x9c>
    1c06:	f0 93 51 02 	sts	0x0251, r31
    1c0a:	e0 93 50 02 	sts	0x0250, r30
    1c0e:	3e c0       	rjmp	.+124    	; 0x1c8c <free+0x118>
    1c10:	d9 01       	movw	r26, r18
    1c12:	13 96       	adiw	r26, 0x03	; 3
    1c14:	fc 93       	st	X, r31
    1c16:	ee 93       	st	-X, r30
    1c18:	12 97       	sbiw	r26, 0x02	; 2
    1c1a:	4d 91       	ld	r20, X+
    1c1c:	5d 91       	ld	r21, X+
    1c1e:	a4 0f       	add	r26, r20
    1c20:	b5 1f       	adc	r27, r21
    1c22:	ea 17       	cp	r30, r26
    1c24:	fb 07       	cpc	r31, r27
    1c26:	79 f4       	brne	.+30     	; 0x1c46 <free+0xd2>
    1c28:	80 81       	ld	r24, Z
    1c2a:	91 81       	ldd	r25, Z+1	; 0x01
    1c2c:	84 0f       	add	r24, r20
    1c2e:	95 1f       	adc	r25, r21
    1c30:	02 96       	adiw	r24, 0x02	; 2
    1c32:	d9 01       	movw	r26, r18
    1c34:	11 96       	adiw	r26, 0x01	; 1
    1c36:	9c 93       	st	X, r25
    1c38:	8e 93       	st	-X, r24
    1c3a:	82 81       	ldd	r24, Z+2	; 0x02
    1c3c:	93 81       	ldd	r25, Z+3	; 0x03
    1c3e:	13 96       	adiw	r26, 0x03	; 3
    1c40:	9c 93       	st	X, r25
    1c42:	8e 93       	st	-X, r24
    1c44:	12 97       	sbiw	r26, 0x02	; 2
    1c46:	e0 e0       	ldi	r30, 0x00	; 0
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c4e:	00 97       	sbiw	r24, 0x00	; 0
    1c50:	19 f0       	breq	.+6      	; 0x1c58 <free+0xe4>
    1c52:	fe 01       	movw	r30, r28
    1c54:	ec 01       	movw	r28, r24
    1c56:	f9 cf       	rjmp	.-14     	; 0x1c4a <free+0xd6>
    1c58:	ce 01       	movw	r24, r28
    1c5a:	02 96       	adiw	r24, 0x02	; 2
    1c5c:	28 81       	ld	r18, Y
    1c5e:	39 81       	ldd	r19, Y+1	; 0x01
    1c60:	82 0f       	add	r24, r18
    1c62:	93 1f       	adc	r25, r19
    1c64:	20 91 4e 02 	lds	r18, 0x024E
    1c68:	30 91 4f 02 	lds	r19, 0x024F
    1c6c:	28 17       	cp	r18, r24
    1c6e:	39 07       	cpc	r19, r25
    1c70:	69 f4       	brne	.+26     	; 0x1c8c <free+0x118>
    1c72:	30 97       	sbiw	r30, 0x00	; 0
    1c74:	29 f4       	brne	.+10     	; 0x1c80 <free+0x10c>
    1c76:	10 92 51 02 	sts	0x0251, r1
    1c7a:	10 92 50 02 	sts	0x0250, r1
    1c7e:	02 c0       	rjmp	.+4      	; 0x1c84 <free+0x110>
    1c80:	13 82       	std	Z+3, r1	; 0x03
    1c82:	12 82       	std	Z+2, r1	; 0x02
    1c84:	d0 93 4f 02 	sts	0x024F, r29
    1c88:	c0 93 4e 02 	sts	0x024E, r28
    1c8c:	df 91       	pop	r29
    1c8e:	cf 91       	pop	r28
    1c90:	08 95       	ret

00001c92 <atol>:
    1c92:	1f 93       	push	r17
    1c94:	fc 01       	movw	r30, r24
    1c96:	99 27       	eor	r25, r25
    1c98:	88 27       	eor	r24, r24
    1c9a:	bc 01       	movw	r22, r24
    1c9c:	e8 94       	clt
    1c9e:	11 91       	ld	r17, Z+
    1ca0:	10 32       	cpi	r17, 0x20	; 32
    1ca2:	e9 f3       	breq	.-6      	; 0x1c9e <atol+0xc>
    1ca4:	19 30       	cpi	r17, 0x09	; 9
    1ca6:	10 f0       	brcs	.+4      	; 0x1cac <atol+0x1a>
    1ca8:	1e 30       	cpi	r17, 0x0E	; 14
    1caa:	c8 f3       	brcs	.-14     	; 0x1c9e <atol+0xc>
    1cac:	1b 32       	cpi	r17, 0x2B	; 43
    1cae:	51 f0       	breq	.+20     	; 0x1cc4 <atol+0x32>
    1cb0:	1d 32       	cpi	r17, 0x2D	; 45
    1cb2:	49 f4       	brne	.+18     	; 0x1cc6 <atol+0x34>
    1cb4:	68 94       	set
    1cb6:	06 c0       	rjmp	.+12     	; 0x1cc4 <atol+0x32>
    1cb8:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <__mulsi_const_10>
    1cbc:	61 0f       	add	r22, r17
    1cbe:	71 1d       	adc	r23, r1
    1cc0:	81 1d       	adc	r24, r1
    1cc2:	91 1d       	adc	r25, r1
    1cc4:	11 91       	ld	r17, Z+
    1cc6:	10 53       	subi	r17, 0x30	; 48
    1cc8:	1a 30       	cpi	r17, 0x0A	; 10
    1cca:	b0 f3       	brcs	.-20     	; 0x1cb8 <atol+0x26>
    1ccc:	3e f4       	brtc	.+14     	; 0x1cdc <atol+0x4a>
    1cce:	90 95       	com	r25
    1cd0:	80 95       	com	r24
    1cd2:	70 95       	com	r23
    1cd4:	61 95       	neg	r22
    1cd6:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd8:	8f 4f       	sbci	r24, 0xFF	; 255
    1cda:	9f 4f       	sbci	r25, 0xFF	; 255
    1cdc:	1f 91       	pop	r17
    1cde:	08 95       	ret

00001ce0 <__ftoa_engine>:
    1ce0:	28 30       	cpi	r18, 0x08	; 8
    1ce2:	08 f0       	brcs	.+2      	; 0x1ce6 <__ftoa_engine+0x6>
    1ce4:	27 e0       	ldi	r18, 0x07	; 7
    1ce6:	33 27       	eor	r19, r19
    1ce8:	da 01       	movw	r26, r20
    1cea:	99 0f       	add	r25, r25
    1cec:	31 1d       	adc	r19, r1
    1cee:	87 fd       	sbrc	r24, 7
    1cf0:	91 60       	ori	r25, 0x01	; 1
    1cf2:	00 96       	adiw	r24, 0x00	; 0
    1cf4:	61 05       	cpc	r22, r1
    1cf6:	71 05       	cpc	r23, r1
    1cf8:	39 f4       	brne	.+14     	; 0x1d08 <__ftoa_engine+0x28>
    1cfa:	32 60       	ori	r19, 0x02	; 2
    1cfc:	2e 5f       	subi	r18, 0xFE	; 254
    1cfe:	3d 93       	st	X+, r19
    1d00:	30 e3       	ldi	r19, 0x30	; 48
    1d02:	2a 95       	dec	r18
    1d04:	e1 f7       	brne	.-8      	; 0x1cfe <__ftoa_engine+0x1e>
    1d06:	08 95       	ret
    1d08:	9f 3f       	cpi	r25, 0xFF	; 255
    1d0a:	30 f0       	brcs	.+12     	; 0x1d18 <__ftoa_engine+0x38>
    1d0c:	80 38       	cpi	r24, 0x80	; 128
    1d0e:	71 05       	cpc	r23, r1
    1d10:	61 05       	cpc	r22, r1
    1d12:	09 f0       	breq	.+2      	; 0x1d16 <__ftoa_engine+0x36>
    1d14:	3c 5f       	subi	r19, 0xFC	; 252
    1d16:	3c 5f       	subi	r19, 0xFC	; 252
    1d18:	3d 93       	st	X+, r19
    1d1a:	91 30       	cpi	r25, 0x01	; 1
    1d1c:	08 f0       	brcs	.+2      	; 0x1d20 <__ftoa_engine+0x40>
    1d1e:	80 68       	ori	r24, 0x80	; 128
    1d20:	91 1d       	adc	r25, r1
    1d22:	df 93       	push	r29
    1d24:	cf 93       	push	r28
    1d26:	1f 93       	push	r17
    1d28:	0f 93       	push	r16
    1d2a:	ff 92       	push	r15
    1d2c:	ef 92       	push	r14
    1d2e:	19 2f       	mov	r17, r25
    1d30:	98 7f       	andi	r25, 0xF8	; 248
    1d32:	96 95       	lsr	r25
    1d34:	e9 2f       	mov	r30, r25
    1d36:	96 95       	lsr	r25
    1d38:	96 95       	lsr	r25
    1d3a:	e9 0f       	add	r30, r25
    1d3c:	ff 27       	eor	r31, r31
    1d3e:	e4 5e       	subi	r30, 0xE4	; 228
    1d40:	fe 4f       	sbci	r31, 0xFE	; 254
    1d42:	99 27       	eor	r25, r25
    1d44:	33 27       	eor	r19, r19
    1d46:	ee 24       	eor	r14, r14
    1d48:	ff 24       	eor	r15, r15
    1d4a:	a7 01       	movw	r20, r14
    1d4c:	e7 01       	movw	r28, r14
    1d4e:	05 90       	lpm	r0, Z+
    1d50:	08 94       	sec
    1d52:	07 94       	ror	r0
    1d54:	28 f4       	brcc	.+10     	; 0x1d60 <__ftoa_engine+0x80>
    1d56:	36 0f       	add	r19, r22
    1d58:	e7 1e       	adc	r14, r23
    1d5a:	f8 1e       	adc	r15, r24
    1d5c:	49 1f       	adc	r20, r25
    1d5e:	51 1d       	adc	r21, r1
    1d60:	66 0f       	add	r22, r22
    1d62:	77 1f       	adc	r23, r23
    1d64:	88 1f       	adc	r24, r24
    1d66:	99 1f       	adc	r25, r25
    1d68:	06 94       	lsr	r0
    1d6a:	a1 f7       	brne	.-24     	; 0x1d54 <__ftoa_engine+0x74>
    1d6c:	05 90       	lpm	r0, Z+
    1d6e:	07 94       	ror	r0
    1d70:	28 f4       	brcc	.+10     	; 0x1d7c <__ftoa_engine+0x9c>
    1d72:	e7 0e       	add	r14, r23
    1d74:	f8 1e       	adc	r15, r24
    1d76:	49 1f       	adc	r20, r25
    1d78:	56 1f       	adc	r21, r22
    1d7a:	c1 1d       	adc	r28, r1
    1d7c:	77 0f       	add	r23, r23
    1d7e:	88 1f       	adc	r24, r24
    1d80:	99 1f       	adc	r25, r25
    1d82:	66 1f       	adc	r22, r22
    1d84:	06 94       	lsr	r0
    1d86:	a1 f7       	brne	.-24     	; 0x1d70 <__ftoa_engine+0x90>
    1d88:	05 90       	lpm	r0, Z+
    1d8a:	07 94       	ror	r0
    1d8c:	28 f4       	brcc	.+10     	; 0x1d98 <__ftoa_engine+0xb8>
    1d8e:	f8 0e       	add	r15, r24
    1d90:	49 1f       	adc	r20, r25
    1d92:	56 1f       	adc	r21, r22
    1d94:	c7 1f       	adc	r28, r23
    1d96:	d1 1d       	adc	r29, r1
    1d98:	88 0f       	add	r24, r24
    1d9a:	99 1f       	adc	r25, r25
    1d9c:	66 1f       	adc	r22, r22
    1d9e:	77 1f       	adc	r23, r23
    1da0:	06 94       	lsr	r0
    1da2:	a1 f7       	brne	.-24     	; 0x1d8c <__ftoa_engine+0xac>
    1da4:	05 90       	lpm	r0, Z+
    1da6:	07 94       	ror	r0
    1da8:	20 f4       	brcc	.+8      	; 0x1db2 <__ftoa_engine+0xd2>
    1daa:	49 0f       	add	r20, r25
    1dac:	56 1f       	adc	r21, r22
    1dae:	c7 1f       	adc	r28, r23
    1db0:	d8 1f       	adc	r29, r24
    1db2:	99 0f       	add	r25, r25
    1db4:	66 1f       	adc	r22, r22
    1db6:	77 1f       	adc	r23, r23
    1db8:	88 1f       	adc	r24, r24
    1dba:	06 94       	lsr	r0
    1dbc:	a9 f7       	brne	.-22     	; 0x1da8 <__ftoa_engine+0xc8>
    1dbe:	84 91       	lpm	r24, Z
    1dc0:	10 95       	com	r17
    1dc2:	17 70       	andi	r17, 0x07	; 7
    1dc4:	41 f0       	breq	.+16     	; 0x1dd6 <__ftoa_engine+0xf6>
    1dc6:	d6 95       	lsr	r29
    1dc8:	c7 95       	ror	r28
    1dca:	57 95       	ror	r21
    1dcc:	47 95       	ror	r20
    1dce:	f7 94       	ror	r15
    1dd0:	e7 94       	ror	r14
    1dd2:	1a 95       	dec	r17
    1dd4:	c1 f7       	brne	.-16     	; 0x1dc6 <__ftoa_engine+0xe6>
    1dd6:	e2 ec       	ldi	r30, 0xC2	; 194
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	68 94       	set
    1ddc:	15 90       	lpm	r1, Z+
    1dde:	15 91       	lpm	r17, Z+
    1de0:	35 91       	lpm	r19, Z+
    1de2:	65 91       	lpm	r22, Z+
    1de4:	95 91       	lpm	r25, Z+
    1de6:	05 90       	lpm	r0, Z+
    1de8:	7f e2       	ldi	r23, 0x2F	; 47
    1dea:	73 95       	inc	r23
    1dec:	e1 18       	sub	r14, r1
    1dee:	f1 0a       	sbc	r15, r17
    1df0:	43 0b       	sbc	r20, r19
    1df2:	56 0b       	sbc	r21, r22
    1df4:	c9 0b       	sbc	r28, r25
    1df6:	d0 09       	sbc	r29, r0
    1df8:	c0 f7       	brcc	.-16     	; 0x1dea <__ftoa_engine+0x10a>
    1dfa:	e1 0c       	add	r14, r1
    1dfc:	f1 1e       	adc	r15, r17
    1dfe:	43 1f       	adc	r20, r19
    1e00:	56 1f       	adc	r21, r22
    1e02:	c9 1f       	adc	r28, r25
    1e04:	d0 1d       	adc	r29, r0
    1e06:	7e f4       	brtc	.+30     	; 0x1e26 <__ftoa_engine+0x146>
    1e08:	70 33       	cpi	r23, 0x30	; 48
    1e0a:	11 f4       	brne	.+4      	; 0x1e10 <__ftoa_engine+0x130>
    1e0c:	8a 95       	dec	r24
    1e0e:	e6 cf       	rjmp	.-52     	; 0x1ddc <__ftoa_engine+0xfc>
    1e10:	e8 94       	clt
    1e12:	01 50       	subi	r16, 0x01	; 1
    1e14:	30 f0       	brcs	.+12     	; 0x1e22 <__ftoa_engine+0x142>
    1e16:	08 0f       	add	r16, r24
    1e18:	0a f4       	brpl	.+2      	; 0x1e1c <__ftoa_engine+0x13c>
    1e1a:	00 27       	eor	r16, r16
    1e1c:	02 17       	cp	r16, r18
    1e1e:	08 f4       	brcc	.+2      	; 0x1e22 <__ftoa_engine+0x142>
    1e20:	20 2f       	mov	r18, r16
    1e22:	23 95       	inc	r18
    1e24:	02 2f       	mov	r16, r18
    1e26:	7a 33       	cpi	r23, 0x3A	; 58
    1e28:	28 f0       	brcs	.+10     	; 0x1e34 <__ftoa_engine+0x154>
    1e2a:	79 e3       	ldi	r23, 0x39	; 57
    1e2c:	7d 93       	st	X+, r23
    1e2e:	2a 95       	dec	r18
    1e30:	e9 f7       	brne	.-6      	; 0x1e2c <__ftoa_engine+0x14c>
    1e32:	10 c0       	rjmp	.+32     	; 0x1e54 <__ftoa_engine+0x174>
    1e34:	7d 93       	st	X+, r23
    1e36:	2a 95       	dec	r18
    1e38:	89 f6       	brne	.-94     	; 0x1ddc <__ftoa_engine+0xfc>
    1e3a:	06 94       	lsr	r0
    1e3c:	97 95       	ror	r25
    1e3e:	67 95       	ror	r22
    1e40:	37 95       	ror	r19
    1e42:	17 95       	ror	r17
    1e44:	17 94       	ror	r1
    1e46:	e1 18       	sub	r14, r1
    1e48:	f1 0a       	sbc	r15, r17
    1e4a:	43 0b       	sbc	r20, r19
    1e4c:	56 0b       	sbc	r21, r22
    1e4e:	c9 0b       	sbc	r28, r25
    1e50:	d0 09       	sbc	r29, r0
    1e52:	98 f0       	brcs	.+38     	; 0x1e7a <__ftoa_engine+0x19a>
    1e54:	23 95       	inc	r18
    1e56:	7e 91       	ld	r23, -X
    1e58:	73 95       	inc	r23
    1e5a:	7a 33       	cpi	r23, 0x3A	; 58
    1e5c:	08 f0       	brcs	.+2      	; 0x1e60 <__ftoa_engine+0x180>
    1e5e:	70 e3       	ldi	r23, 0x30	; 48
    1e60:	7c 93       	st	X, r23
    1e62:	20 13       	cpse	r18, r16
    1e64:	b8 f7       	brcc	.-18     	; 0x1e54 <__ftoa_engine+0x174>
    1e66:	7e 91       	ld	r23, -X
    1e68:	70 61       	ori	r23, 0x10	; 16
    1e6a:	7d 93       	st	X+, r23
    1e6c:	30 f0       	brcs	.+12     	; 0x1e7a <__ftoa_engine+0x19a>
    1e6e:	83 95       	inc	r24
    1e70:	71 e3       	ldi	r23, 0x31	; 49
    1e72:	7d 93       	st	X+, r23
    1e74:	70 e3       	ldi	r23, 0x30	; 48
    1e76:	2a 95       	dec	r18
    1e78:	e1 f7       	brne	.-8      	; 0x1e72 <__ftoa_engine+0x192>
    1e7a:	11 24       	eor	r1, r1
    1e7c:	ef 90       	pop	r14
    1e7e:	ff 90       	pop	r15
    1e80:	0f 91       	pop	r16
    1e82:	1f 91       	pop	r17
    1e84:	cf 91       	pop	r28
    1e86:	df 91       	pop	r29
    1e88:	99 27       	eor	r25, r25
    1e8a:	87 fd       	sbrc	r24, 7
    1e8c:	90 95       	com	r25
    1e8e:	08 95       	ret

00001e90 <strnlen_P>:
    1e90:	fc 01       	movw	r30, r24
    1e92:	05 90       	lpm	r0, Z+
    1e94:	61 50       	subi	r22, 0x01	; 1
    1e96:	70 40       	sbci	r23, 0x00	; 0
    1e98:	01 10       	cpse	r0, r1
    1e9a:	d8 f7       	brcc	.-10     	; 0x1e92 <strnlen_P+0x2>
    1e9c:	80 95       	com	r24
    1e9e:	90 95       	com	r25
    1ea0:	8e 0f       	add	r24, r30
    1ea2:	9f 1f       	adc	r25, r31
    1ea4:	08 95       	ret

00001ea6 <strcmp>:
    1ea6:	fb 01       	movw	r30, r22
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	8d 91       	ld	r24, X+
    1eac:	01 90       	ld	r0, Z+
    1eae:	80 19       	sub	r24, r0
    1eb0:	01 10       	cpse	r0, r1
    1eb2:	d9 f3       	breq	.-10     	; 0x1eaa <strcmp+0x4>
    1eb4:	99 0b       	sbc	r25, r25
    1eb6:	08 95       	ret

00001eb8 <strcpy>:
    1eb8:	fb 01       	movw	r30, r22
    1eba:	dc 01       	movw	r26, r24
    1ebc:	01 90       	ld	r0, Z+
    1ebe:	0d 92       	st	X+, r0
    1ec0:	00 20       	and	r0, r0
    1ec2:	e1 f7       	brne	.-8      	; 0x1ebc <strcpy+0x4>
    1ec4:	08 95       	ret

00001ec6 <strncpy>:
    1ec6:	fb 01       	movw	r30, r22
    1ec8:	dc 01       	movw	r26, r24
    1eca:	41 50       	subi	r20, 0x01	; 1
    1ecc:	50 40       	sbci	r21, 0x00	; 0
    1ece:	48 f0       	brcs	.+18     	; 0x1ee2 <strncpy+0x1c>
    1ed0:	01 90       	ld	r0, Z+
    1ed2:	0d 92       	st	X+, r0
    1ed4:	00 20       	and	r0, r0
    1ed6:	c9 f7       	brne	.-14     	; 0x1eca <strncpy+0x4>
    1ed8:	01 c0       	rjmp	.+2      	; 0x1edc <strncpy+0x16>
    1eda:	1d 92       	st	X+, r1
    1edc:	41 50       	subi	r20, 0x01	; 1
    1ede:	50 40       	sbci	r21, 0x00	; 0
    1ee0:	e0 f7       	brcc	.-8      	; 0x1eda <strncpy+0x14>
    1ee2:	08 95       	ret

00001ee4 <strnlen>:
    1ee4:	fc 01       	movw	r30, r24
    1ee6:	61 50       	subi	r22, 0x01	; 1
    1ee8:	70 40       	sbci	r23, 0x00	; 0
    1eea:	01 90       	ld	r0, Z+
    1eec:	01 10       	cpse	r0, r1
    1eee:	d8 f7       	brcc	.-10     	; 0x1ee6 <strnlen+0x2>
    1ef0:	80 95       	com	r24
    1ef2:	90 95       	com	r25
    1ef4:	8e 0f       	add	r24, r30
    1ef6:	9f 1f       	adc	r25, r31
    1ef8:	08 95       	ret

00001efa <__mulsi_const_10>:
    1efa:	59 2f       	mov	r21, r25
    1efc:	48 2f       	mov	r20, r24
    1efe:	37 2f       	mov	r19, r23
    1f00:	26 2f       	mov	r18, r22
    1f02:	66 0f       	add	r22, r22
    1f04:	77 1f       	adc	r23, r23
    1f06:	88 1f       	adc	r24, r24
    1f08:	99 1f       	adc	r25, r25
    1f0a:	66 0f       	add	r22, r22
    1f0c:	77 1f       	adc	r23, r23
    1f0e:	88 1f       	adc	r24, r24
    1f10:	99 1f       	adc	r25, r25
    1f12:	62 0f       	add	r22, r18
    1f14:	73 1f       	adc	r23, r19
    1f16:	84 1f       	adc	r24, r20
    1f18:	95 1f       	adc	r25, r21
    1f1a:	66 0f       	add	r22, r22
    1f1c:	77 1f       	adc	r23, r23
    1f1e:	88 1f       	adc	r24, r24
    1f20:	99 1f       	adc	r25, r25
    1f22:	08 95       	ret

00001f24 <fputc>:
    1f24:	0f 93       	push	r16
    1f26:	1f 93       	push	r17
    1f28:	cf 93       	push	r28
    1f2a:	df 93       	push	r29
    1f2c:	18 2f       	mov	r17, r24
    1f2e:	09 2f       	mov	r16, r25
    1f30:	eb 01       	movw	r28, r22
    1f32:	8b 81       	ldd	r24, Y+3	; 0x03
    1f34:	81 fd       	sbrc	r24, 1
    1f36:	03 c0       	rjmp	.+6      	; 0x1f3e <fputc+0x1a>
    1f38:	8f ef       	ldi	r24, 0xFF	; 255
    1f3a:	9f ef       	ldi	r25, 0xFF	; 255
    1f3c:	20 c0       	rjmp	.+64     	; 0x1f7e <fputc+0x5a>
    1f3e:	82 ff       	sbrs	r24, 2
    1f40:	10 c0       	rjmp	.+32     	; 0x1f62 <fputc+0x3e>
    1f42:	4e 81       	ldd	r20, Y+6	; 0x06
    1f44:	5f 81       	ldd	r21, Y+7	; 0x07
    1f46:	2c 81       	ldd	r18, Y+4	; 0x04
    1f48:	3d 81       	ldd	r19, Y+5	; 0x05
    1f4a:	42 17       	cp	r20, r18
    1f4c:	53 07       	cpc	r21, r19
    1f4e:	7c f4       	brge	.+30     	; 0x1f6e <fputc+0x4a>
    1f50:	e8 81       	ld	r30, Y
    1f52:	f9 81       	ldd	r31, Y+1	; 0x01
    1f54:	9f 01       	movw	r18, r30
    1f56:	2f 5f       	subi	r18, 0xFF	; 255
    1f58:	3f 4f       	sbci	r19, 0xFF	; 255
    1f5a:	39 83       	std	Y+1, r19	; 0x01
    1f5c:	28 83       	st	Y, r18
    1f5e:	10 83       	st	Z, r17
    1f60:	06 c0       	rjmp	.+12     	; 0x1f6e <fputc+0x4a>
    1f62:	e8 85       	ldd	r30, Y+8	; 0x08
    1f64:	f9 85       	ldd	r31, Y+9	; 0x09
    1f66:	81 2f       	mov	r24, r17
    1f68:	09 95       	icall
    1f6a:	89 2b       	or	r24, r25
    1f6c:	29 f7       	brne	.-54     	; 0x1f38 <fputc+0x14>
    1f6e:	2e 81       	ldd	r18, Y+6	; 0x06
    1f70:	3f 81       	ldd	r19, Y+7	; 0x07
    1f72:	2f 5f       	subi	r18, 0xFF	; 255
    1f74:	3f 4f       	sbci	r19, 0xFF	; 255
    1f76:	3f 83       	std	Y+7, r19	; 0x07
    1f78:	2e 83       	std	Y+6, r18	; 0x06
    1f7a:	81 2f       	mov	r24, r17
    1f7c:	90 2f       	mov	r25, r16
    1f7e:	df 91       	pop	r29
    1f80:	cf 91       	pop	r28
    1f82:	1f 91       	pop	r17
    1f84:	0f 91       	pop	r16
    1f86:	08 95       	ret

00001f88 <sprintf>:
    1f88:	ae e0       	ldi	r26, 0x0E	; 14
    1f8a:	b0 e0       	ldi	r27, 0x00	; 0
    1f8c:	ea ec       	ldi	r30, 0xCA	; 202
    1f8e:	ff e0       	ldi	r31, 0x0F	; 15
    1f90:	0c 94 ea 0c 	jmp	0x19d4	; 0x19d4 <__prologue_saves__+0x1c>
    1f94:	0d 89       	ldd	r16, Y+21	; 0x15
    1f96:	1e 89       	ldd	r17, Y+22	; 0x16
    1f98:	86 e0       	ldi	r24, 0x06	; 6
    1f9a:	8c 83       	std	Y+4, r24	; 0x04
    1f9c:	1a 83       	std	Y+2, r17	; 0x02
    1f9e:	09 83       	std	Y+1, r16	; 0x01
    1fa0:	8f ef       	ldi	r24, 0xFF	; 255
    1fa2:	9f e7       	ldi	r25, 0x7F	; 127
    1fa4:	9e 83       	std	Y+6, r25	; 0x06
    1fa6:	8d 83       	std	Y+5, r24	; 0x05
    1fa8:	ae 01       	movw	r20, r28
    1faa:	47 5e       	subi	r20, 0xE7	; 231
    1fac:	5f 4f       	sbci	r21, 0xFF	; 255
    1fae:	6f 89       	ldd	r22, Y+23	; 0x17
    1fb0:	78 8d       	ldd	r23, Y+24	; 0x18
    1fb2:	ce 01       	movw	r24, r28
    1fb4:	01 96       	adiw	r24, 0x01	; 1
    1fb6:	0e 94 27 04 	call	0x84e	; 0x84e <vfprintf>
    1fba:	ef 81       	ldd	r30, Y+7	; 0x07
    1fbc:	f8 85       	ldd	r31, Y+8	; 0x08
    1fbe:	e0 0f       	add	r30, r16
    1fc0:	f1 1f       	adc	r31, r17
    1fc2:	10 82       	st	Z, r1
    1fc4:	2e 96       	adiw	r28, 0x0e	; 14
    1fc6:	e4 e0       	ldi	r30, 0x04	; 4
    1fc8:	0c 94 06 0d 	jmp	0x1a0c	; 0x1a0c <__epilogue_restores__+0x1c>

00001fcc <__ultoa_invert>:
    1fcc:	fa 01       	movw	r30, r20
    1fce:	aa 27       	eor	r26, r26
    1fd0:	28 30       	cpi	r18, 0x08	; 8
    1fd2:	51 f1       	breq	.+84     	; 0x2028 <__ultoa_invert+0x5c>
    1fd4:	20 31       	cpi	r18, 0x10	; 16
    1fd6:	81 f1       	breq	.+96     	; 0x2038 <__ultoa_invert+0x6c>
    1fd8:	e8 94       	clt
    1fda:	6f 93       	push	r22
    1fdc:	6e 7f       	andi	r22, 0xFE	; 254
    1fde:	6e 5f       	subi	r22, 0xFE	; 254
    1fe0:	7f 4f       	sbci	r23, 0xFF	; 255
    1fe2:	8f 4f       	sbci	r24, 0xFF	; 255
    1fe4:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe6:	af 4f       	sbci	r26, 0xFF	; 255
    1fe8:	b1 e0       	ldi	r27, 0x01	; 1
    1fea:	3e d0       	rcall	.+124    	; 0x2068 <__ultoa_invert+0x9c>
    1fec:	b4 e0       	ldi	r27, 0x04	; 4
    1fee:	3c d0       	rcall	.+120    	; 0x2068 <__ultoa_invert+0x9c>
    1ff0:	67 0f       	add	r22, r23
    1ff2:	78 1f       	adc	r23, r24
    1ff4:	89 1f       	adc	r24, r25
    1ff6:	9a 1f       	adc	r25, r26
    1ff8:	a1 1d       	adc	r26, r1
    1ffa:	68 0f       	add	r22, r24
    1ffc:	79 1f       	adc	r23, r25
    1ffe:	8a 1f       	adc	r24, r26
    2000:	91 1d       	adc	r25, r1
    2002:	a1 1d       	adc	r26, r1
    2004:	6a 0f       	add	r22, r26
    2006:	71 1d       	adc	r23, r1
    2008:	81 1d       	adc	r24, r1
    200a:	91 1d       	adc	r25, r1
    200c:	a1 1d       	adc	r26, r1
    200e:	20 d0       	rcall	.+64     	; 0x2050 <__ultoa_invert+0x84>
    2010:	09 f4       	brne	.+2      	; 0x2014 <__ultoa_invert+0x48>
    2012:	68 94       	set
    2014:	3f 91       	pop	r19
    2016:	2a e0       	ldi	r18, 0x0A	; 10
    2018:	26 9f       	mul	r18, r22
    201a:	11 24       	eor	r1, r1
    201c:	30 19       	sub	r19, r0
    201e:	30 5d       	subi	r19, 0xD0	; 208
    2020:	31 93       	st	Z+, r19
    2022:	de f6       	brtc	.-74     	; 0x1fda <__ultoa_invert+0xe>
    2024:	cf 01       	movw	r24, r30
    2026:	08 95       	ret
    2028:	46 2f       	mov	r20, r22
    202a:	47 70       	andi	r20, 0x07	; 7
    202c:	40 5d       	subi	r20, 0xD0	; 208
    202e:	41 93       	st	Z+, r20
    2030:	b3 e0       	ldi	r27, 0x03	; 3
    2032:	0f d0       	rcall	.+30     	; 0x2052 <__ultoa_invert+0x86>
    2034:	c9 f7       	brne	.-14     	; 0x2028 <__ultoa_invert+0x5c>
    2036:	f6 cf       	rjmp	.-20     	; 0x2024 <__ultoa_invert+0x58>
    2038:	46 2f       	mov	r20, r22
    203a:	4f 70       	andi	r20, 0x0F	; 15
    203c:	40 5d       	subi	r20, 0xD0	; 208
    203e:	4a 33       	cpi	r20, 0x3A	; 58
    2040:	18 f0       	brcs	.+6      	; 0x2048 <__ultoa_invert+0x7c>
    2042:	49 5d       	subi	r20, 0xD9	; 217
    2044:	31 fd       	sbrc	r19, 1
    2046:	40 52       	subi	r20, 0x20	; 32
    2048:	41 93       	st	Z+, r20
    204a:	02 d0       	rcall	.+4      	; 0x2050 <__ultoa_invert+0x84>
    204c:	a9 f7       	brne	.-22     	; 0x2038 <__ultoa_invert+0x6c>
    204e:	ea cf       	rjmp	.-44     	; 0x2024 <__ultoa_invert+0x58>
    2050:	b4 e0       	ldi	r27, 0x04	; 4
    2052:	a6 95       	lsr	r26
    2054:	97 95       	ror	r25
    2056:	87 95       	ror	r24
    2058:	77 95       	ror	r23
    205a:	67 95       	ror	r22
    205c:	ba 95       	dec	r27
    205e:	c9 f7       	brne	.-14     	; 0x2052 <__ultoa_invert+0x86>
    2060:	00 97       	sbiw	r24, 0x00	; 0
    2062:	61 05       	cpc	r22, r1
    2064:	71 05       	cpc	r23, r1
    2066:	08 95       	ret
    2068:	9b 01       	movw	r18, r22
    206a:	ac 01       	movw	r20, r24
    206c:	0a 2e       	mov	r0, r26
    206e:	06 94       	lsr	r0
    2070:	57 95       	ror	r21
    2072:	47 95       	ror	r20
    2074:	37 95       	ror	r19
    2076:	27 95       	ror	r18
    2078:	ba 95       	dec	r27
    207a:	c9 f7       	brne	.-14     	; 0x206e <__ultoa_invert+0xa2>
    207c:	62 0f       	add	r22, r18
    207e:	73 1f       	adc	r23, r19
    2080:	84 1f       	adc	r24, r20
    2082:	95 1f       	adc	r25, r21
    2084:	a0 1d       	adc	r26, r0
    2086:	08 95       	ret

00002088 <_exit>:
    2088:	f8 94       	cli

0000208a <__stop_program>:
    208a:	ff cf       	rjmp	.-2      	; 0x208a <__stop_program>
